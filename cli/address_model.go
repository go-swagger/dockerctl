// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for Address

// register flags to command
func registerModelAddressFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAddressAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAddressPrefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAddressAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addrDescription := `IP address.`

	var addrFlagName string
	if cmdPrefix == "" {
		addrFlagName = "Addr"
	} else {
		addrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
	}

	var addrFlagDefault string

	_ = cmd.PersistentFlags().String(addrFlagName, addrFlagDefault, addrDescription)

	return nil
}

func registerAddressPrefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	prefixLenDescription := `Mask length of the IP address.`

	var prefixLenFlagName string
	if cmdPrefix == "" {
		prefixLenFlagName = "PrefixLen"
	} else {
		prefixLenFlagName = fmt.Sprintf("%v.PrefixLen", cmdPrefix)
	}

	var prefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(prefixLenFlagName, prefixLenFlagDefault, prefixLenDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAddressFlags(depth int, m *models.Address, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addrAdded := retrieveAddressAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addrAdded

	err, prefixLenAdded := retrieveAddressPrefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || prefixLenAdded

	return nil, retAdded
}

func retrieveAddressAddrFlags(depth int, m *models.Address, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addrFlagName := fmt.Sprintf("%v.Addr", cmdPrefix)
	if cmd.Flags().Changed(addrFlagName) {

		var addrFlagName string
		if cmdPrefix == "" {
			addrFlagName = "Addr"
		} else {
			addrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
		}

		addrFlagValue, err := cmd.Flags().GetString(addrFlagName)
		if err != nil {
			return err, false
		}
		m.Addr = addrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAddressPrefixLenFlags(depth int, m *models.Address, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	prefixLenFlagName := fmt.Sprintf("%v.PrefixLen", cmdPrefix)
	if cmd.Flags().Changed(prefixLenFlagName) {

		var prefixLenFlagName string
		if cmdPrefix == "" {
			prefixLenFlagName = "PrefixLen"
		} else {
			prefixLenFlagName = fmt.Sprintf("%v.PrefixLen", cmdPrefix)
		}

		prefixLenFlagValue, err := cmd.Flags().GetInt64(prefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.PrefixLen = prefixLenFlagValue

		retAdded = true
	}

	return nil, retAdded
}
