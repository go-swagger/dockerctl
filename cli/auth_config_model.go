// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for AuthConfig

// register flags to command
func registerModelAuthConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAuthConfigEmail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthConfigPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthConfigServeraddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthConfigUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAuthConfigEmail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailDescription := ``

	var emailFlagName string
	if cmdPrefix == "" {
		emailFlagName = "email"
	} else {
		emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
	}

	var emailFlagDefault string

	_ = cmd.PersistentFlags().String(emailFlagName, emailFlagDefault, emailDescription)

	return nil
}

func registerAuthConfigPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := ``

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerAuthConfigServeraddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serveraddressDescription := ``

	var serveraddressFlagName string
	if cmdPrefix == "" {
		serveraddressFlagName = "serveraddress"
	} else {
		serveraddressFlagName = fmt.Sprintf("%v.serveraddress", cmdPrefix)
	}

	var serveraddressFlagDefault string

	_ = cmd.PersistentFlags().String(serveraddressFlagName, serveraddressFlagDefault, serveraddressDescription)

	return nil
}

func registerAuthConfigUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAuthConfigFlags(depth int, m *models.AuthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, emailAdded := retrieveAuthConfigEmailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailAdded

	err, passwordAdded := retrieveAuthConfigPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, serveraddressAdded := retrieveAuthConfigServeraddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serveraddressAdded

	err, usernameAdded := retrieveAuthConfigUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveAuthConfigEmailFlags(depth int, m *models.AuthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	emailFlagName := fmt.Sprintf("%v.email", cmdPrefix)
	if cmd.Flags().Changed(emailFlagName) {

		var emailFlagName string
		if cmdPrefix == "" {
			emailFlagName = "email"
		} else {
			emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
		}

		emailFlagValue, err := cmd.Flags().GetString(emailFlagName)
		if err != nil {
			return err, false
		}
		m.Email = emailFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveAuthConfigPasswordFlags(depth int, m *models.AuthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveAuthConfigServeraddressFlags(depth int, m *models.AuthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	serveraddressFlagName := fmt.Sprintf("%v.serveraddress", cmdPrefix)
	if cmd.Flags().Changed(serveraddressFlagName) {

		var serveraddressFlagName string
		if cmdPrefix == "" {
			serveraddressFlagName = "serveraddress"
		} else {
			serveraddressFlagName = fmt.Sprintf("%v.serveraddress", cmdPrefix)
		}

		serveraddressFlagValue, err := cmd.Flags().GetString(serveraddressFlagName)
		if err != nil {
			return err, false
		}
		m.Serveraddress = serveraddressFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveAuthConfigUsernameFlags(depth int, m *models.AuthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}
	return nil, retAdded
}
