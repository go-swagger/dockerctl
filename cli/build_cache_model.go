// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelBuildCacheFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBuildCacheCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheInUse(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheLastUsedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheParent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheShared(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuildCacheUsageCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuildCacheCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := ``

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "CreatedAt"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	}

	var createdAtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerBuildCacheDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "Description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerBuildCacheID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "ID"
	} else {
		idFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerBuildCacheInUse(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inUseDescription := ``

	var inUseFlagName string
	if cmdPrefix == "" {
		inUseFlagName = "InUse"
	} else {
		inUseFlagName = fmt.Sprintf("%v.InUse", cmdPrefix)
	}

	var inUseFlagDefault bool

	_ = cmd.PersistentFlags().Bool(inUseFlagName, inUseFlagDefault, inUseDescription)

	return nil
}

func registerBuildCacheLastUsedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastUsedAtDescription := ``

	var lastUsedAtFlagName string
	if cmdPrefix == "" {
		lastUsedAtFlagName = "LastUsedAt"
	} else {
		lastUsedAtFlagName = fmt.Sprintf("%v.LastUsedAt", cmdPrefix)
	}

	var lastUsedAtFlagDefault int64

	_ = cmd.PersistentFlags().Int64(lastUsedAtFlagName, lastUsedAtFlagDefault, lastUsedAtDescription)

	return nil
}

func registerBuildCacheParent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	parentDescription := ``

	var parentFlagName string
	if cmdPrefix == "" {
		parentFlagName = "Parent"
	} else {
		parentFlagName = fmt.Sprintf("%v.Parent", cmdPrefix)
	}

	var parentFlagDefault string

	_ = cmd.PersistentFlags().String(parentFlagName, parentFlagDefault, parentDescription)

	return nil
}

func registerBuildCacheShared(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sharedDescription := ``

	var sharedFlagName string
	if cmdPrefix == "" {
		sharedFlagName = "Shared"
	} else {
		sharedFlagName = fmt.Sprintf("%v.Shared", cmdPrefix)
	}

	var sharedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sharedFlagName, sharedFlagDefault, sharedDescription)

	return nil
}

func registerBuildCacheSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sizeDescription := ``

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "Size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
	}

	var sizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

func registerBuildCacheType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerBuildCacheUsageCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usageCountDescription := ``

	var usageCountFlagName string
	if cmdPrefix == "" {
		usageCountFlagName = "UsageCount"
	} else {
		usageCountFlagName = fmt.Sprintf("%v.UsageCount", cmdPrefix)
	}

	var usageCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(usageCountFlagName, usageCountFlagDefault, usageCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBuildCacheFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAtAdded := retrieveBuildCacheCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, descriptionAdded := retrieveBuildCacheDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, idAdded := retrieveBuildCacheIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, inUseAdded := retrieveBuildCacheInUseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inUseAdded

	err, lastUsedAtAdded := retrieveBuildCacheLastUsedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastUsedAtAdded

	err, parentAdded := retrieveBuildCacheParentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parentAdded

	err, sharedAdded := retrieveBuildCacheSharedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sharedAdded

	err, sizeAdded := retrieveBuildCacheSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sizeAdded

	err, typeAdded := retrieveBuildCacheTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, usageCountAdded := retrieveBuildCacheUsageCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usageCountAdded

	return nil, retAdded
}

func retrieveBuildCacheCreatedAtFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	createdAtFlagName := fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "CreatedAt"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetInt64(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveBuildCacheDescriptionFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	descriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "Description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveBuildCacheIDFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	idFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "ID"
		} else {
			idFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveBuildCacheInUseFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	inUseFlagName := fmt.Sprintf("%v.InUse", cmdPrefix)
	if cmd.Flags().Changed(inUseFlagName) {

		var inUseFlagName string
		if cmdPrefix == "" {
			inUseFlagName = "InUse"
		} else {
			inUseFlagName = fmt.Sprintf("%v.InUse", cmdPrefix)
		}

		inUseFlagValue, err := cmd.Flags().GetBool(inUseFlagName)
		if err != nil {
			return err, false
		}
		m.InUse = inUseFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveBuildCacheLastUsedAtFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	lastUsedAtFlagName := fmt.Sprintf("%v.LastUsedAt", cmdPrefix)
	if cmd.Flags().Changed(lastUsedAtFlagName) {

		var lastUsedAtFlagName string
		if cmdPrefix == "" {
			lastUsedAtFlagName = "LastUsedAt"
		} else {
			lastUsedAtFlagName = fmt.Sprintf("%v.LastUsedAt", cmdPrefix)
		}

		lastUsedAtFlagValue, err := cmd.Flags().GetInt64(lastUsedAtFlagName)
		if err != nil {
			return err, false
		}
		m.LastUsedAt = &lastUsedAtFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveBuildCacheParentFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	parentFlagName := fmt.Sprintf("%v.Parent", cmdPrefix)
	if cmd.Flags().Changed(parentFlagName) {

		var parentFlagName string
		if cmdPrefix == "" {
			parentFlagName = "Parent"
		} else {
			parentFlagName = fmt.Sprintf("%v.Parent", cmdPrefix)
		}

		parentFlagValue, err := cmd.Flags().GetString(parentFlagName)
		if err != nil {
			return err, false
		}
		m.Parent = parentFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveBuildCacheSharedFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	sharedFlagName := fmt.Sprintf("%v.Shared", cmdPrefix)
	if cmd.Flags().Changed(sharedFlagName) {

		var sharedFlagName string
		if cmdPrefix == "" {
			sharedFlagName = "Shared"
		} else {
			sharedFlagName = fmt.Sprintf("%v.Shared", cmdPrefix)
		}

		sharedFlagValue, err := cmd.Flags().GetBool(sharedFlagName)
		if err != nil {
			return err, false
		}
		m.Shared = sharedFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveBuildCacheSizeFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	sizeFlagName := fmt.Sprintf("%v.Size", cmdPrefix)
	if cmd.Flags().Changed(sizeFlagName) {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "Size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetInt64(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = sizeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveBuildCacheTypeFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveBuildCacheUsageCountFlags(depth int, m *models.BuildCache, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	usageCountFlagName := fmt.Sprintf("%v.UsageCount", cmdPrefix)
	if cmd.Flags().Changed(usageCountFlagName) {

		var usageCountFlagName string
		if cmdPrefix == "" {
			usageCountFlagName = "UsageCount"
		} else {
			usageCountFlagName = fmt.Sprintf("%v.UsageCount", cmdPrefix)
		}

		usageCountFlagValue, err := cmd.Flags().GetInt64(usageCountFlagName)
		if err != nil {
			return err, false
		}
		m.UsageCount = usageCountFlagValue

		retAdded = true
	}
	return nil, retAdded
}
