// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"
	"os"
	"path"
	"path/filepath"

	"github.com/go-swagger/dockerctl/client"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	homedir "github.com/mitchellh/go-homedir"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// debug flag indicating that cli should output debug logs
var debug bool

// config file location
var configFile string

// dry run flag
var dryRun bool

// name of the executable
var exeName string = filepath.Base(os.Args[0])

// logDebugf writes debug log to stdout
func logDebugf(format string, v ...interface{}) {
	if !debug {
		return
	}
	log.Printf(format, v...)
}

// depth of recursion to construct model flags
var maxDepth int = 5

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, args []string) (*client.DockerEngineAPI, error) {
	hostname := viper.GetString("hostname")
	scheme := viper.GetString("scheme")

	r := httptransport.New(hostname, client.DefaultBasePath, []string{scheme})
	r.SetDebug(debug)
	// set custom producer and consumer to use the default ones

	// warning: consumes application/octet-stream is not supported by go-swagger cli yet

	r.Consumers["application/json"] = runtime.JSONConsumer()

	// warning: consumes application/x-tar is not supported by go-swagger cli yet

	// warning: consumes text/plain is not supported by go-swagger cli yet

	// warning: produces application/octet-stream is not supported by go-swagger cli yet
	// warning: produces application/vnd.docker.raw-stream is not supported by go-swagger cli yet

	r.Producers["application/json"] = runtime.JSONProducer()

	// warning: produces application/x-tar is not supported by go-swagger cli yet

	// warning: produces text/plain is not supported by go-swagger cli yet

	appCli := client.New(r, strfmt.Default)
	logDebugf("Server url: %v://%v", scheme, hostname)
	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {
	cobra.OnInitialize(initViperConfigs)

	// Use executable name as the command name
	rootCmd := &cobra.Command{
		Use: exeName,
	}

	// register basic flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	viper.BindPFlag("hostname", rootCmd.PersistentFlags().Lookup("hostname"))
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))
	viper.BindPFlag("scheme", rootCmd.PersistentFlags().Lookup("scheme"))

	// configure debug flag
	rootCmd.PersistentFlags().BoolVar(&debug, "debug", false, "output debug logs")
	// configure config location
	rootCmd.PersistentFlags().StringVar(&configFile, "config", "", "config file path")
	// configure dry run flag
	rootCmd.PersistentFlags().BoolVar(&dryRun, "dry-run", false, "do not send the request to server")

	// register security flags
	// add all operation groups
	operationGroupConfigCmd, err := makeOperationGroupConfigCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupConfigCmd)

	operationGroupContainerCmd, err := makeOperationGroupContainerCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupContainerCmd)

	operationGroupDistributionCmd, err := makeOperationGroupDistributionCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupDistributionCmd)

	operationGroupExecCmd, err := makeOperationGroupExecCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupExecCmd)

	operationGroupImageCmd, err := makeOperationGroupImageCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupImageCmd)

	operationGroupNetworkCmd, err := makeOperationGroupNetworkCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupNetworkCmd)

	operationGroupNodeCmd, err := makeOperationGroupNodeCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupNodeCmd)

	operationGroupPluginCmd, err := makeOperationGroupPluginCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupPluginCmd)

	operationGroupSecretCmd, err := makeOperationGroupSecretCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSecretCmd)

	operationGroupServiceCmd, err := makeOperationGroupServiceCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupServiceCmd)

	operationGroupSessionCmd, err := makeOperationGroupSessionCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSessionCmd)

	operationGroupSwarmCmd, err := makeOperationGroupSwarmCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSwarmCmd)

	operationGroupSystemCmd, err := makeOperationGroupSystemCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSystemCmd)

	operationGroupTaskCmd, err := makeOperationGroupTaskCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTaskCmd)

	operationGroupVolumeCmd, err := makeOperationGroupVolumeCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupVolumeCmd)

	// add cobra completion
	rootCmd.AddCommand(makeGenCompletionCmd())

	return rootCmd, nil
}

// initViperConfigs initialize viper config using config file in '$HOME/.config/<cli name>/config.<json|yaml...>'
// currently hostname, scheme and auth tokens can be specified in this config file.
func initViperConfigs() {
	if configFile != "" {
		// use user specified config file location
		viper.SetConfigFile(configFile)
	} else {
		// look for default config
		// Find home directory.
		home, err := homedir.Dir()
		cobra.CheckErr(err)

		// Search config in home directory with name ".cobra" (without extension).
		viper.AddConfigPath(path.Join(home, ".config", exeName))
		viper.SetConfigName("config")
	}

	if err := viper.ReadInConfig(); err != nil {
		logDebugf("Error: loading config file: %v", err)
		return
	}
	logDebugf("Using config file: %v", viper.ConfigFileUsed())
}

func makeOperationGroupConfigCmd() (*cobra.Command, error) {
	operationGroupConfigCmd := &cobra.Command{
		Use:  "config",
		Long: ``,
	}

	operationConfigCreateCmd, err := makeOperationConfigConfigCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigCmd.AddCommand(operationConfigCreateCmd)

	operationConfigDeleteCmd, err := makeOperationConfigConfigDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigCmd.AddCommand(operationConfigDeleteCmd)

	operationConfigInspectCmd, err := makeOperationConfigConfigInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigCmd.AddCommand(operationConfigInspectCmd)

	operationConfigListCmd, err := makeOperationConfigConfigListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigCmd.AddCommand(operationConfigListCmd)

	operationConfigUpdateCmd, err := makeOperationConfigConfigUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigCmd.AddCommand(operationConfigUpdateCmd)

	return operationGroupConfigCmd, nil
}
func makeOperationGroupContainerCmd() (*cobra.Command, error) {
	operationGroupContainerCmd := &cobra.Command{
		Use:  "container",
		Long: ``,
	}

	operationContainerArchiveCmd, err := makeOperationContainerContainerArchiveCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerArchiveCmd)

	operationContainerArchiveInfoCmd, err := makeOperationContainerContainerArchiveInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerArchiveInfoCmd)

	operationContainerAttachCmd, err := makeOperationContainerContainerAttachCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerAttachCmd)

	operationContainerAttachWebsocketCmd, err := makeOperationContainerContainerAttachWebsocketCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerAttachWebsocketCmd)

	operationContainerChangesCmd, err := makeOperationContainerContainerChangesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerChangesCmd)

	operationContainerCreateCmd, err := makeOperationContainerContainerCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerCreateCmd)

	operationContainerDeleteCmd, err := makeOperationContainerContainerDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerDeleteCmd)

	operationContainerExportCmd, err := makeOperationContainerContainerExportCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerExportCmd)

	operationContainerInspectCmd, err := makeOperationContainerContainerInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerInspectCmd)

	operationContainerKillCmd, err := makeOperationContainerContainerKillCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerKillCmd)

	operationContainerListCmd, err := makeOperationContainerContainerListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerListCmd)

	operationContainerLogsCmd, err := makeOperationContainerContainerLogsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerLogsCmd)

	operationContainerPauseCmd, err := makeOperationContainerContainerPauseCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerPauseCmd)

	operationContainerPruneCmd, err := makeOperationContainerContainerPruneCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerPruneCmd)

	operationContainerRenameCmd, err := makeOperationContainerContainerRenameCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerRenameCmd)

	operationContainerResizeCmd, err := makeOperationContainerContainerResizeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerResizeCmd)

	operationContainerRestartCmd, err := makeOperationContainerContainerRestartCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerRestartCmd)

	operationContainerStartCmd, err := makeOperationContainerContainerStartCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerStartCmd)

	operationContainerStatsCmd, err := makeOperationContainerContainerStatsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerStatsCmd)

	operationContainerStopCmd, err := makeOperationContainerContainerStopCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerStopCmd)

	operationContainerTopCmd, err := makeOperationContainerContainerTopCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerTopCmd)

	operationContainerUnpauseCmd, err := makeOperationContainerContainerUnpauseCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerUnpauseCmd)

	operationContainerUpdateCmd, err := makeOperationContainerContainerUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerUpdateCmd)

	operationContainerWaitCmd, err := makeOperationContainerContainerWaitCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationContainerWaitCmd)

	operationPutContainerArchiveCmd, err := makeOperationContainerPutContainerArchiveCmd()
	if err != nil {
		return nil, err
	}
	operationGroupContainerCmd.AddCommand(operationPutContainerArchiveCmd)

	return operationGroupContainerCmd, nil
}
func makeOperationGroupDistributionCmd() (*cobra.Command, error) {
	operationGroupDistributionCmd := &cobra.Command{
		Use:  "distribution",
		Long: ``,
	}

	operationDistributionInspectCmd, err := makeOperationDistributionDistributionInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDistributionCmd.AddCommand(operationDistributionInspectCmd)

	return operationGroupDistributionCmd, nil
}
func makeOperationGroupExecCmd() (*cobra.Command, error) {
	operationGroupExecCmd := &cobra.Command{
		Use:  "exec",
		Long: ``,
	}

	operationContainerExecCmd, err := makeOperationExecContainerExecCmd()
	if err != nil {
		return nil, err
	}
	operationGroupExecCmd.AddCommand(operationContainerExecCmd)

	operationExecInspectCmd, err := makeOperationExecExecInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupExecCmd.AddCommand(operationExecInspectCmd)

	operationExecResizeCmd, err := makeOperationExecExecResizeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupExecCmd.AddCommand(operationExecResizeCmd)

	operationExecStartCmd, err := makeOperationExecExecStartCmd()
	if err != nil {
		return nil, err
	}
	operationGroupExecCmd.AddCommand(operationExecStartCmd)

	return operationGroupExecCmd, nil
}
func makeOperationGroupImageCmd() (*cobra.Command, error) {
	operationGroupImageCmd := &cobra.Command{
		Use:  "image",
		Long: ``,
	}

	operationBuildPruneCmd, err := makeOperationImageBuildPruneCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationBuildPruneCmd)

	operationImageBuildCmd, err := makeOperationImageImageBuildCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageBuildCmd)

	operationImageCommitCmd, err := makeOperationImageImageCommitCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageCommitCmd)

	operationImageCreateCmd, err := makeOperationImageImageCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageCreateCmd)

	operationImageDeleteCmd, err := makeOperationImageImageDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageDeleteCmd)

	operationImageGetCmd, err := makeOperationImageImageGetCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageGetCmd)

	operationImageGetAllCmd, err := makeOperationImageImageGetAllCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageGetAllCmd)

	operationImageHistoryCmd, err := makeOperationImageImageHistoryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageHistoryCmd)

	operationImageInspectCmd, err := makeOperationImageImageInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageInspectCmd)

	operationImageListCmd, err := makeOperationImageImageListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageListCmd)

	operationImageLoadCmd, err := makeOperationImageImageLoadCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageLoadCmd)

	operationImagePruneCmd, err := makeOperationImageImagePruneCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImagePruneCmd)

	operationImagePushCmd, err := makeOperationImageImagePushCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImagePushCmd)

	operationImageSearchCmd, err := makeOperationImageImageSearchCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageSearchCmd)

	operationImageTagCmd, err := makeOperationImageImageTagCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImageCmd.AddCommand(operationImageTagCmd)

	return operationGroupImageCmd, nil
}
func makeOperationGroupNetworkCmd() (*cobra.Command, error) {
	operationGroupNetworkCmd := &cobra.Command{
		Use:  "network",
		Long: ``,
	}

	operationNetworkConnectCmd, err := makeOperationNetworkNetworkConnectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNetworkCmd.AddCommand(operationNetworkConnectCmd)

	operationNetworkCreateCmd, err := makeOperationNetworkNetworkCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNetworkCmd.AddCommand(operationNetworkCreateCmd)

	operationNetworkDeleteCmd, err := makeOperationNetworkNetworkDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNetworkCmd.AddCommand(operationNetworkDeleteCmd)

	operationNetworkDisconnectCmd, err := makeOperationNetworkNetworkDisconnectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNetworkCmd.AddCommand(operationNetworkDisconnectCmd)

	operationNetworkInspectCmd, err := makeOperationNetworkNetworkInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNetworkCmd.AddCommand(operationNetworkInspectCmd)

	operationNetworkListCmd, err := makeOperationNetworkNetworkListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNetworkCmd.AddCommand(operationNetworkListCmd)

	operationNetworkPruneCmd, err := makeOperationNetworkNetworkPruneCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNetworkCmd.AddCommand(operationNetworkPruneCmd)

	return operationGroupNetworkCmd, nil
}
func makeOperationGroupNodeCmd() (*cobra.Command, error) {
	operationGroupNodeCmd := &cobra.Command{
		Use:  "node",
		Long: ``,
	}

	operationNodeDeleteCmd, err := makeOperationNodeNodeDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNodeCmd.AddCommand(operationNodeDeleteCmd)

	operationNodeInspectCmd, err := makeOperationNodeNodeInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNodeCmd.AddCommand(operationNodeInspectCmd)

	operationNodeListCmd, err := makeOperationNodeNodeListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNodeCmd.AddCommand(operationNodeListCmd)

	operationNodeUpdateCmd, err := makeOperationNodeNodeUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupNodeCmd.AddCommand(operationNodeUpdateCmd)

	return operationGroupNodeCmd, nil
}
func makeOperationGroupPluginCmd() (*cobra.Command, error) {
	operationGroupPluginCmd := &cobra.Command{
		Use:  "plugin",
		Long: ``,
	}

	operationGetPluginPrivilegesCmd, err := makeOperationPluginGetPluginPrivilegesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationGetPluginPrivilegesCmd)

	operationPluginCreateCmd, err := makeOperationPluginPluginCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationPluginCreateCmd)

	operationPluginDeleteCmd, err := makeOperationPluginPluginDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationPluginDeleteCmd)

	operationPluginDisableCmd, err := makeOperationPluginPluginDisableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationPluginDisableCmd)

	operationPluginEnableCmd, err := makeOperationPluginPluginEnableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationPluginEnableCmd)

	operationPluginInspectCmd, err := makeOperationPluginPluginInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationPluginInspectCmd)

	operationPluginListCmd, err := makeOperationPluginPluginListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationPluginListCmd)

	operationPluginPullCmd, err := makeOperationPluginPluginPullCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationPluginPullCmd)

	operationPluginPushCmd, err := makeOperationPluginPluginPushCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationPluginPushCmd)

	operationPluginSetCmd, err := makeOperationPluginPluginSetCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationPluginSetCmd)

	operationPluginUpgradeCmd, err := makeOperationPluginPluginUpgradeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPluginCmd.AddCommand(operationPluginUpgradeCmd)

	return operationGroupPluginCmd, nil
}
func makeOperationGroupSecretCmd() (*cobra.Command, error) {
	operationGroupSecretCmd := &cobra.Command{
		Use:  "secret",
		Long: ``,
	}

	operationSecretCreateCmd, err := makeOperationSecretSecretCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSecretCmd.AddCommand(operationSecretCreateCmd)

	operationSecretDeleteCmd, err := makeOperationSecretSecretDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSecretCmd.AddCommand(operationSecretDeleteCmd)

	operationSecretInspectCmd, err := makeOperationSecretSecretInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSecretCmd.AddCommand(operationSecretInspectCmd)

	operationSecretListCmd, err := makeOperationSecretSecretListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSecretCmd.AddCommand(operationSecretListCmd)

	operationSecretUpdateCmd, err := makeOperationSecretSecretUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSecretCmd.AddCommand(operationSecretUpdateCmd)

	return operationGroupSecretCmd, nil
}
func makeOperationGroupServiceCmd() (*cobra.Command, error) {
	operationGroupServiceCmd := &cobra.Command{
		Use:  "service",
		Long: ``,
	}

	operationServiceCreateCmd, err := makeOperationServiceServiceCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceCmd.AddCommand(operationServiceCreateCmd)

	operationServiceDeleteCmd, err := makeOperationServiceServiceDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceCmd.AddCommand(operationServiceDeleteCmd)

	operationServiceInspectCmd, err := makeOperationServiceServiceInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceCmd.AddCommand(operationServiceInspectCmd)

	operationServiceListCmd, err := makeOperationServiceServiceListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceCmd.AddCommand(operationServiceListCmd)

	operationServiceLogsCmd, err := makeOperationServiceServiceLogsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceCmd.AddCommand(operationServiceLogsCmd)

	operationServiceUpdateCmd, err := makeOperationServiceServiceUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupServiceCmd.AddCommand(operationServiceUpdateCmd)

	return operationGroupServiceCmd, nil
}
func makeOperationGroupSessionCmd() (*cobra.Command, error) {
	operationGroupSessionCmd := &cobra.Command{
		Use:  "session",
		Long: ``,
	}

	operationSessionCmd, err := makeOperationSessionSessionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSessionCmd.AddCommand(operationSessionCmd)

	return operationGroupSessionCmd, nil
}
func makeOperationGroupSwarmCmd() (*cobra.Command, error) {
	operationGroupSwarmCmd := &cobra.Command{
		Use:  "swarm",
		Long: ``,
	}

	operationSwarmInitCmd, err := makeOperationSwarmSwarmInitCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSwarmCmd.AddCommand(operationSwarmInitCmd)

	operationSwarmInspectCmd, err := makeOperationSwarmSwarmInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSwarmCmd.AddCommand(operationSwarmInspectCmd)

	operationSwarmJoinCmd, err := makeOperationSwarmSwarmJoinCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSwarmCmd.AddCommand(operationSwarmJoinCmd)

	operationSwarmLeaveCmd, err := makeOperationSwarmSwarmLeaveCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSwarmCmd.AddCommand(operationSwarmLeaveCmd)

	operationSwarmUnlockCmd, err := makeOperationSwarmSwarmUnlockCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSwarmCmd.AddCommand(operationSwarmUnlockCmd)

	operationSwarmUnlockkeyCmd, err := makeOperationSwarmSwarmUnlockkeyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSwarmCmd.AddCommand(operationSwarmUnlockkeyCmd)

	operationSwarmUpdateCmd, err := makeOperationSwarmSwarmUpdateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSwarmCmd.AddCommand(operationSwarmUpdateCmd)

	return operationGroupSwarmCmd, nil
}
func makeOperationGroupSystemCmd() (*cobra.Command, error) {
	operationGroupSystemCmd := &cobra.Command{
		Use:  "system",
		Long: ``,
	}

	operationSystemAuthCmd, err := makeOperationSystemSystemAuthCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemAuthCmd)

	operationSystemDataUsageCmd, err := makeOperationSystemSystemDataUsageCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemDataUsageCmd)

	operationSystemEventsCmd, err := makeOperationSystemSystemEventsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemEventsCmd)

	operationSystemInfoCmd, err := makeOperationSystemSystemInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemInfoCmd)

	operationSystemPingCmd, err := makeOperationSystemSystemPingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemPingCmd)

	operationSystemPingHeadCmd, err := makeOperationSystemSystemPingHeadCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemPingHeadCmd)

	operationSystemVersionCmd, err := makeOperationSystemSystemVersionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemCmd.AddCommand(operationSystemVersionCmd)

	return operationGroupSystemCmd, nil
}
func makeOperationGroupTaskCmd() (*cobra.Command, error) {
	operationGroupTaskCmd := &cobra.Command{
		Use:  "task",
		Long: ``,
	}

	operationTaskInspectCmd, err := makeOperationTaskTaskInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationTaskInspectCmd)

	operationTaskListCmd, err := makeOperationTaskTaskListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationTaskListCmd)

	operationTaskLogsCmd, err := makeOperationTaskTaskLogsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTaskCmd.AddCommand(operationTaskLogsCmd)

	return operationGroupTaskCmd, nil
}
func makeOperationGroupVolumeCmd() (*cobra.Command, error) {
	operationGroupVolumeCmd := &cobra.Command{
		Use:  "volume",
		Long: ``,
	}

	operationVolumeCreateCmd, err := makeOperationVolumeVolumeCreateCmd()
	if err != nil {
		return nil, err
	}
	operationGroupVolumeCmd.AddCommand(operationVolumeCreateCmd)

	operationVolumeDeleteCmd, err := makeOperationVolumeVolumeDeleteCmd()
	if err != nil {
		return nil, err
	}
	operationGroupVolumeCmd.AddCommand(operationVolumeDeleteCmd)

	operationVolumeInspectCmd, err := makeOperationVolumeVolumeInspectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupVolumeCmd.AddCommand(operationVolumeInspectCmd)

	operationVolumeListCmd, err := makeOperationVolumeVolumeListCmd()
	if err != nil {
		return nil, err
	}
	operationGroupVolumeCmd.AddCommand(operationVolumeListCmd)

	operationVolumePruneCmd, err := makeOperationVolumeVolumePruneCmd()
	if err != nil {
		return nil, err
	}
	operationGroupVolumeCmd.AddCommand(operationVolumePruneCmd)

	return operationGroupVolumeCmd, nil
}
