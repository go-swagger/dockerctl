// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelConfigSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConfigSpecData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigSpecLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigSpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigSpecTemplating(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigSpecData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataDescription := `Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))
config data.
`

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "Data"
	} else {
		dataFlagName = fmt.Sprintf("%v.Data", cmdPrefix)
	}

	var dataFlagDefault string

	_ = cmd.PersistentFlags().String(dataFlagName, dataFlagDefault, dataDescription)

	return nil
}

func registerConfigSpecLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerConfigSpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `User-defined name of the config.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerConfigSpecTemplating(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var templatingFlagName string
	if cmdPrefix == "" {
		templatingFlagName = "Templating"
	} else {
		templatingFlagName = fmt.Sprintf("%v.Templating", cmdPrefix)
	}

	registerModelConfigSpecFlags(depth+1, templatingFlagName, cmd)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConfigSpecFlags(depth int, m *models.ConfigSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveConfigSpecDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	err, labelsAdded := retrieveConfigSpecLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	err, nameAdded := retrieveConfigSpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, templatingAdded := retrieveConfigSpecTemplatingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || templatingAdded

	return nil, retAdded
}

func retrieveConfigSpecDataFlags(depth int, m *models.ConfigSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	dataFlagName := fmt.Sprintf("%v.Data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {

		var dataFlagName string
		if cmdPrefix == "" {
			dataFlagName = "Data"
		} else {
			dataFlagName = fmt.Sprintf("%v.Data", cmdPrefix)
		}

		dataFlagValue, err := cmd.Flags().GetString(dataFlagName)
		if err != nil {
			return err, false
		}
		m.Data = dataFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveConfigSpecLabelsFlags(depth int, m *models.ConfigSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	labelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveConfigSpecNameFlags(depth int, m *models.ConfigSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveConfigSpecTemplatingFlags(depth int, m *models.ConfigSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	templatingFlagName := fmt.Sprintf("%v.Templating", cmdPrefix)
	if cmd.Flags().Changed(templatingFlagName) {

		templatingFlagValue := &models.ConfigSpec{}
		err, added := retrieveModelConfigSpecFlags(depth+1, templatingFlagValue, templatingFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}
