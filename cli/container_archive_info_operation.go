// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/dockerctl/client/container"

	"github.com/spf13/cobra"
)

// makeOperationContainerContainerArchiveInfoCmd returns a cmd to handle operation containerArchiveInfo
func makeOperationContainerContainerArchiveInfoCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerArchiveInfo",
		Short: `A response header ` + "`" + `X-Docker-Container-Path-Stat` + "`" + ` is return containing a base64 - encoded JSON object with some filesystem header information about the path.`,
		RunE:  runOperationContainerContainerArchiveInfo,
	}

	if err := registerOperationContainerContainerArchiveInfoParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerArchiveInfo uses cmd flags to call endpoint api
func runOperationContainerContainerArchiveInfo(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerArchiveInfoParams()
	if err, _ := retrieveOperationContainerContainerArchiveInfoIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerArchiveInfoPathFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationContainerContainerArchiveInfoResult(appCli.Container.ContainerArchiveInfo(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationContainerContainerArchiveInfoIDFlag(m *container.ContainerArchiveInfoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerArchiveInfoPathFlag(m *container.ContainerArchiveInfoParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("path") {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "path"
		} else {
			pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = pathFlagValue

	}
	return nil, retAdded
}

// printOperationContainerContainerArchiveInfoResult prints output to stdout
func printOperationContainerContainerArchiveInfoResult(resp0 *container.ContainerArchiveInfoOK, respErr error) error {
	if respErr != nil {
		return respErr
	}

	// warning: non schema response containerArchiveInfoOK is not supported by go-swagger cli yet.

	return nil
}

// registerOperationContainerContainerArchiveInfoParamFlags registers all flags needed to fill params
func registerOperationContainerContainerArchiveInfoParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerArchiveInfoIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerArchiveInfoPathParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerArchiveInfoIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID or name of the container`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationContainerContainerArchiveInfoPathParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pathDescription := `Required. Resource in the containerâ€™s filesystem to archive.`

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "path"
	} else {
		pathFlagName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

// register flags to command
func registerModelContainerArchiveInfoBadRequestBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	// allOf containerArchiveInfoBadRequestBodyAO0 is not supported by go-swwagger cli yet

	// allOf containerArchiveInfoBadRequestBodyAO1 is not supported by go-swwagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerArchiveInfoBadRequestBodyFlags(depth int, m *container.ContainerArchiveInfoBadRequestBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	// allOf containerArchiveInfoBadRequestBodyAO0 is not supported by go-swwagger cli yet

	// allOf containerArchiveInfoBadRequestBodyAO1 is not supported by go-swwagger cli yet

	return nil, retAdded
}
