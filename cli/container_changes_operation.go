// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerChangesCmd returns a cmd to handle operation containerChanges
func makeOperationContainerContainerChangesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ContainerChanges",
		Short: `Returns which files in a container's filesystem have been added, deleted,
or modified. The ` + "`" + `Kind` + "`" + ` of modification can be one of:

- ` + "`" + `0` + "`" + `: Modified
- ` + "`" + `1` + "`" + `: Added
- ` + "`" + `2` + "`" + `: Deleted
`,
		RunE: runOperationContainerContainerChanges,
	}

	if err := registerOperationContainerContainerChangesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerChanges uses cmd flags to call endpoint api
func runOperationContainerContainerChanges(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerChangesParams()
	if err, _ := retrieveOperationContainerContainerChangesIDFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationContainerContainerChangesResult(appCli.Container.ContainerChanges(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationContainerContainerChangesIDFlag(m *container.ContainerChangesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// printOperationContainerContainerChangesResult prints output to stdout
func printOperationContainerContainerChangesResult(resp0 *container.ContainerChangesOK, respErr error) error {
	if respErr != nil {
		return respErr
	}

	if !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return err
		}
		fmt.Println(string(msgStr))
	}

	return nil
}

// registerOperationContainerContainerChangesParamFlags registers all flags needed to fill params
func registerOperationContainerContainerChangesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerChangesIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerChangesIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID or name of the container`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// register flags to command
func registerModelContainerChangeResponseItemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerChangeResponseItemKind(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerChangeResponseItemPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerChangeResponseItemKind(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive Kind uint8 is not supported by go-swagger cli yet

	return nil
}

func registerContainerChangeResponseItemPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathDescription := `Required. Path to file that has changed`

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "Path"
	} else {
		pathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerChangeResponseItemFlags(depth int, m *container.ContainerChangeResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, kindAdded := retrieveContainerChangeResponseItemKindFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kindAdded

	err, pathAdded := retrieveContainerChangeResponseItemPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathAdded

	return nil, retAdded
}

func retrieveContainerChangeResponseItemKindFlags(depth int, m *container.ContainerChangeResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	kindFlagName := fmt.Sprintf("%v.Kind", cmdPrefix)
	if cmd.Flags().Changed(kindFlagName) {

		// warning: primitive Kind uint8 is not supported by go-swagger cli yet

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerChangeResponseItemPathFlags(depth int, m *container.ContainerChangeResponseItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	pathFlagName := fmt.Sprintf("%v.Path", cmdPrefix)
	if cmd.Flags().Changed(pathFlagName) {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "Path"
		} else {
			pathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = pathFlagValue

		retAdded = true
	}
	return nil, retAdded
}
