// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ContainerConfig

// register flags to command
func registerModelContainerConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerConfigArgsEscaped(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigAttachStderr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigAttachStdin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigAttachStdout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigCmd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigDomainname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigEntrypoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigEnv(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigExposedPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigHealthcheck(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigMacAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigNetworkDisabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigOnBuild(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigOpenStdin(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigShell(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigStdinOnce(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigStopSignal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigStopTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigTty(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigVolumes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerConfigWorkingDir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerConfigArgsEscaped(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	argsEscapedDescription := `Command is already escaped (Windows only)`

	var argsEscapedFlagName string
	if cmdPrefix == "" {
		argsEscapedFlagName = "ArgsEscaped"
	} else {
		argsEscapedFlagName = fmt.Sprintf("%v.ArgsEscaped", cmdPrefix)
	}

	var argsEscapedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(argsEscapedFlagName, argsEscapedFlagDefault, argsEscapedDescription)

	return nil
}

func registerContainerConfigAttachStderr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	attachStderrDescription := `Whether to attach to ` + "`" + `stderr` + "`" + `.`

	var attachStderrFlagName string
	if cmdPrefix == "" {
		attachStderrFlagName = "AttachStderr"
	} else {
		attachStderrFlagName = fmt.Sprintf("%v.AttachStderr", cmdPrefix)
	}

	var attachStderrFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(attachStderrFlagName, attachStderrFlagDefault, attachStderrDescription)

	return nil
}

func registerContainerConfigAttachStdin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	attachStdinDescription := `Whether to attach to ` + "`" + `stdin` + "`" + `.`

	var attachStdinFlagName string
	if cmdPrefix == "" {
		attachStdinFlagName = "AttachStdin"
	} else {
		attachStdinFlagName = fmt.Sprintf("%v.AttachStdin", cmdPrefix)
	}

	var attachStdinFlagDefault bool

	_ = cmd.PersistentFlags().Bool(attachStdinFlagName, attachStdinFlagDefault, attachStdinDescription)

	return nil
}

func registerContainerConfigAttachStdout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	attachStdoutDescription := `Whether to attach to ` + "`" + `stdout` + "`" + `.`

	var attachStdoutFlagName string
	if cmdPrefix == "" {
		attachStdoutFlagName = "AttachStdout"
	} else {
		attachStdoutFlagName = fmt.Sprintf("%v.AttachStdout", cmdPrefix)
	}

	var attachStdoutFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(attachStdoutFlagName, attachStdoutFlagDefault, attachStdoutDescription)

	return nil
}

func registerContainerConfigCmd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Cmd []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigDomainname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	domainnameDescription := `The domain name to use for the container.`

	var domainnameFlagName string
	if cmdPrefix == "" {
		domainnameFlagName = "Domainname"
	} else {
		domainnameFlagName = fmt.Sprintf("%v.Domainname", cmdPrefix)
	}

	var domainnameFlagDefault string

	_ = cmd.PersistentFlags().String(domainnameFlagName, domainnameFlagDefault, domainnameDescription)

	return nil
}

func registerContainerConfigEntrypoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Entrypoint []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigEnv(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Env []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigExposedPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ExposedPorts map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigHealthcheck(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var healthcheckFlagName string
	if cmdPrefix == "" {
		healthcheckFlagName = "Healthcheck"
	} else {
		healthcheckFlagName = fmt.Sprintf("%v.Healthcheck", cmdPrefix)
	}

	if err := registerModelHealthConfigFlags(depth+1, healthcheckFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerConfigHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := `The hostname to use for the container, as a valid RFC 1123 hostname.`

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "Hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.Hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerContainerConfigImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imageDescription := `The name of the image to use when creating the container`

	var imageFlagName string
	if cmdPrefix == "" {
		imageFlagName = "Image"
	} else {
		imageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
	}

	var imageFlagDefault string

	_ = cmd.PersistentFlags().String(imageFlagName, imageFlagDefault, imageDescription)

	return nil
}

func registerContainerConfigLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigMacAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macAddressDescription := `MAC address of the container.`

	var macAddressFlagName string
	if cmdPrefix == "" {
		macAddressFlagName = "MacAddress"
	} else {
		macAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
	}

	var macAddressFlagDefault string

	_ = cmd.PersistentFlags().String(macAddressFlagName, macAddressFlagDefault, macAddressDescription)

	return nil
}

func registerContainerConfigNetworkDisabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	networkDisabledDescription := `Disable networking for the container.`

	var networkDisabledFlagName string
	if cmdPrefix == "" {
		networkDisabledFlagName = "NetworkDisabled"
	} else {
		networkDisabledFlagName = fmt.Sprintf("%v.NetworkDisabled", cmdPrefix)
	}

	var networkDisabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(networkDisabledFlagName, networkDisabledFlagDefault, networkDisabledDescription)

	return nil
}

func registerContainerConfigOnBuild(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: OnBuild []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigOpenStdin(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	openStdinDescription := `Open ` + "`" + `stdin` + "`" + ``

	var openStdinFlagName string
	if cmdPrefix == "" {
		openStdinFlagName = "OpenStdin"
	} else {
		openStdinFlagName = fmt.Sprintf("%v.OpenStdin", cmdPrefix)
	}

	var openStdinFlagDefault bool

	_ = cmd.PersistentFlags().Bool(openStdinFlagName, openStdinFlagDefault, openStdinDescription)

	return nil
}

func registerContainerConfigShell(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Shell []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigStdinOnce(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stdinOnceDescription := `Close ` + "`" + `stdin` + "`" + ` after one attached client disconnects`

	var stdinOnceFlagName string
	if cmdPrefix == "" {
		stdinOnceFlagName = "StdinOnce"
	} else {
		stdinOnceFlagName = fmt.Sprintf("%v.StdinOnce", cmdPrefix)
	}

	var stdinOnceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(stdinOnceFlagName, stdinOnceFlagDefault, stdinOnceDescription)

	return nil
}

func registerContainerConfigStopSignal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stopSignalDescription := `Signal to stop a container as a string or unsigned integer.`

	var stopSignalFlagName string
	if cmdPrefix == "" {
		stopSignalFlagName = "StopSignal"
	} else {
		stopSignalFlagName = fmt.Sprintf("%v.StopSignal", cmdPrefix)
	}

	var stopSignalFlagDefault string = "SIGTERM"

	_ = cmd.PersistentFlags().String(stopSignalFlagName, stopSignalFlagDefault, stopSignalDescription)

	return nil
}

func registerContainerConfigStopTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stopTimeoutDescription := `Timeout to stop a container in seconds.`

	var stopTimeoutFlagName string
	if cmdPrefix == "" {
		stopTimeoutFlagName = "StopTimeout"
	} else {
		stopTimeoutFlagName = fmt.Sprintf("%v.StopTimeout", cmdPrefix)
	}

	var stopTimeoutFlagDefault int64 = 10

	_ = cmd.PersistentFlags().Int64(stopTimeoutFlagName, stopTimeoutFlagDefault, stopTimeoutDescription)

	return nil
}

func registerContainerConfigTty(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ttyDescription := `Attach standard streams to a TTY, including ` + "`" + `stdin` + "`" + ` if it is not closed.`

	var ttyFlagName string
	if cmdPrefix == "" {
		ttyFlagName = "Tty"
	} else {
		ttyFlagName = fmt.Sprintf("%v.Tty", cmdPrefix)
	}

	var ttyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ttyFlagName, ttyFlagDefault, ttyDescription)

	return nil
}

func registerContainerConfigUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDescription := `The user that commands are run as inside the container.`

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "User"
	} else {
		userFlagName = fmt.Sprintf("%v.User", cmdPrefix)
	}

	var userFlagDefault string

	_ = cmd.PersistentFlags().String(userFlagName, userFlagDefault, userDescription)

	return nil
}

func registerContainerConfigVolumes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Volumes map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerContainerConfigWorkingDir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workingDirDescription := `The working directory for commands to run in.`

	var workingDirFlagName string
	if cmdPrefix == "" {
		workingDirFlagName = "WorkingDir"
	} else {
		workingDirFlagName = fmt.Sprintf("%v.WorkingDir", cmdPrefix)
	}

	var workingDirFlagDefault string

	_ = cmd.PersistentFlags().String(workingDirFlagName, workingDirFlagDefault, workingDirDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerConfigFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, argsEscapedAdded := retrieveContainerConfigArgsEscapedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || argsEscapedAdded

	err, attachStderrAdded := retrieveContainerConfigAttachStderrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attachStderrAdded

	err, attachStdinAdded := retrieveContainerConfigAttachStdinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attachStdinAdded

	err, attachStdoutAdded := retrieveContainerConfigAttachStdoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attachStdoutAdded

	err, cmdAdded := retrieveContainerConfigCmdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cmdAdded

	err, domainnameAdded := retrieveContainerConfigDomainnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || domainnameAdded

	err, entrypointAdded := retrieveContainerConfigEntrypointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || entrypointAdded

	err, envAdded := retrieveContainerConfigEnvFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || envAdded

	err, exposedPortsAdded := retrieveContainerConfigExposedPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exposedPortsAdded

	err, healthcheckAdded := retrieveContainerConfigHealthcheckFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || healthcheckAdded

	err, hostnameAdded := retrieveContainerConfigHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, imageAdded := retrieveContainerConfigImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imageAdded

	err, labelsAdded := retrieveContainerConfigLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	err, macAddressAdded := retrieveContainerConfigMacAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAddressAdded

	err, networkDisabledAdded := retrieveContainerConfigNetworkDisabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networkDisabledAdded

	err, onBuildAdded := retrieveContainerConfigOnBuildFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || onBuildAdded

	err, openStdinAdded := retrieveContainerConfigOpenStdinFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || openStdinAdded

	err, shellAdded := retrieveContainerConfigShellFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || shellAdded

	err, stdinOnceAdded := retrieveContainerConfigStdinOnceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stdinOnceAdded

	err, stopSignalAdded := retrieveContainerConfigStopSignalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stopSignalAdded

	err, stopTimeoutAdded := retrieveContainerConfigStopTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stopTimeoutAdded

	err, ttyAdded := retrieveContainerConfigTtyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ttyAdded

	err, userAdded := retrieveContainerConfigUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	err, volumesAdded := retrieveContainerConfigVolumesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || volumesAdded

	err, workingDirAdded := retrieveContainerConfigWorkingDirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workingDirAdded

	return nil, retAdded
}

func retrieveContainerConfigArgsEscapedFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	argsEscapedFlagName := fmt.Sprintf("%v.ArgsEscaped", cmdPrefix)
	if cmd.Flags().Changed(argsEscapedFlagName) {

		var argsEscapedFlagName string
		if cmdPrefix == "" {
			argsEscapedFlagName = "ArgsEscaped"
		} else {
			argsEscapedFlagName = fmt.Sprintf("%v.ArgsEscaped", cmdPrefix)
		}

		argsEscapedFlagValue, err := cmd.Flags().GetBool(argsEscapedFlagName)
		if err != nil {
			return err, false
		}
		m.ArgsEscaped = argsEscapedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigAttachStderrFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attachStderrFlagName := fmt.Sprintf("%v.AttachStderr", cmdPrefix)
	if cmd.Flags().Changed(attachStderrFlagName) {

		var attachStderrFlagName string
		if cmdPrefix == "" {
			attachStderrFlagName = "AttachStderr"
		} else {
			attachStderrFlagName = fmt.Sprintf("%v.AttachStderr", cmdPrefix)
		}

		attachStderrFlagValue, err := cmd.Flags().GetBool(attachStderrFlagName)
		if err != nil {
			return err, false
		}
		m.AttachStderr = &attachStderrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigAttachStdinFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attachStdinFlagName := fmt.Sprintf("%v.AttachStdin", cmdPrefix)
	if cmd.Flags().Changed(attachStdinFlagName) {

		var attachStdinFlagName string
		if cmdPrefix == "" {
			attachStdinFlagName = "AttachStdin"
		} else {
			attachStdinFlagName = fmt.Sprintf("%v.AttachStdin", cmdPrefix)
		}

		attachStdinFlagValue, err := cmd.Flags().GetBool(attachStdinFlagName)
		if err != nil {
			return err, false
		}
		m.AttachStdin = &attachStdinFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigAttachStdoutFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attachStdoutFlagName := fmt.Sprintf("%v.AttachStdout", cmdPrefix)
	if cmd.Flags().Changed(attachStdoutFlagName) {

		var attachStdoutFlagName string
		if cmdPrefix == "" {
			attachStdoutFlagName = "AttachStdout"
		} else {
			attachStdoutFlagName = fmt.Sprintf("%v.AttachStdout", cmdPrefix)
		}

		attachStdoutFlagValue, err := cmd.Flags().GetBool(attachStdoutFlagName)
		if err != nil {
			return err, false
		}
		m.AttachStdout = &attachStdoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigCmdFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cmdFlagName := fmt.Sprintf("%v.Cmd", cmdPrefix)
	if cmd.Flags().Changed(cmdFlagName) {
		// warning: Cmd array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigDomainnameFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	domainnameFlagName := fmt.Sprintf("%v.Domainname", cmdPrefix)
	if cmd.Flags().Changed(domainnameFlagName) {

		var domainnameFlagName string
		if cmdPrefix == "" {
			domainnameFlagName = "Domainname"
		} else {
			domainnameFlagName = fmt.Sprintf("%v.Domainname", cmdPrefix)
		}

		domainnameFlagValue, err := cmd.Flags().GetString(domainnameFlagName)
		if err != nil {
			return err, false
		}
		m.Domainname = domainnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigEntrypointFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	entrypointFlagName := fmt.Sprintf("%v.Entrypoint", cmdPrefix)
	if cmd.Flags().Changed(entrypointFlagName) {
		// warning: Entrypoint array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigEnvFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	envFlagName := fmt.Sprintf("%v.Env", cmdPrefix)
	if cmd.Flags().Changed(envFlagName) {
		// warning: Env array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigExposedPortsFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	exposedPortsFlagName := fmt.Sprintf("%v.ExposedPorts", cmdPrefix)
	if cmd.Flags().Changed(exposedPortsFlagName) {
		// warning: ExposedPorts map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigHealthcheckFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	healthcheckFlagName := fmt.Sprintf("%v.Healthcheck", cmdPrefix)
	if cmd.Flags().Changed(healthcheckFlagName) {
		// info: complex object Healthcheck HealthConfig is retrieved outside this Changed() block
	}

	healthcheckFlagValue := models.HealthConfig{}
	err, healthcheckAdded := retrieveModelHealthConfigFlags(depth+1, &healthcheckFlagValue, healthcheckFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || healthcheckAdded
	if healthcheckAdded {
		m.Healthcheck = &healthcheckFlagValue
	}

	return nil, retAdded
}

func retrieveContainerConfigHostnameFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.Hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "Hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.Hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigImageFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	imageFlagName := fmt.Sprintf("%v.Image", cmdPrefix)
	if cmd.Flags().Changed(imageFlagName) {

		var imageFlagName string
		if cmdPrefix == "" {
			imageFlagName = "Image"
		} else {
			imageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
		}

		imageFlagValue, err := cmd.Flags().GetString(imageFlagName)
		if err != nil {
			return err, false
		}
		m.Image = imageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigLabelsFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	labelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigMacAddressFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macAddressFlagName := fmt.Sprintf("%v.MacAddress", cmdPrefix)
	if cmd.Flags().Changed(macAddressFlagName) {

		var macAddressFlagName string
		if cmdPrefix == "" {
			macAddressFlagName = "MacAddress"
		} else {
			macAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
		}

		macAddressFlagValue, err := cmd.Flags().GetString(macAddressFlagName)
		if err != nil {
			return err, false
		}
		m.MacAddress = macAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigNetworkDisabledFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	networkDisabledFlagName := fmt.Sprintf("%v.NetworkDisabled", cmdPrefix)
	if cmd.Flags().Changed(networkDisabledFlagName) {

		var networkDisabledFlagName string
		if cmdPrefix == "" {
			networkDisabledFlagName = "NetworkDisabled"
		} else {
			networkDisabledFlagName = fmt.Sprintf("%v.NetworkDisabled", cmdPrefix)
		}

		networkDisabledFlagValue, err := cmd.Flags().GetBool(networkDisabledFlagName)
		if err != nil {
			return err, false
		}
		m.NetworkDisabled = networkDisabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigOnBuildFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	onBuildFlagName := fmt.Sprintf("%v.OnBuild", cmdPrefix)
	if cmd.Flags().Changed(onBuildFlagName) {
		// warning: OnBuild array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigOpenStdinFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	openStdinFlagName := fmt.Sprintf("%v.OpenStdin", cmdPrefix)
	if cmd.Flags().Changed(openStdinFlagName) {

		var openStdinFlagName string
		if cmdPrefix == "" {
			openStdinFlagName = "OpenStdin"
		} else {
			openStdinFlagName = fmt.Sprintf("%v.OpenStdin", cmdPrefix)
		}

		openStdinFlagValue, err := cmd.Flags().GetBool(openStdinFlagName)
		if err != nil {
			return err, false
		}
		m.OpenStdin = &openStdinFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigShellFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	shellFlagName := fmt.Sprintf("%v.Shell", cmdPrefix)
	if cmd.Flags().Changed(shellFlagName) {
		// warning: Shell array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigStdinOnceFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stdinOnceFlagName := fmt.Sprintf("%v.StdinOnce", cmdPrefix)
	if cmd.Flags().Changed(stdinOnceFlagName) {

		var stdinOnceFlagName string
		if cmdPrefix == "" {
			stdinOnceFlagName = "StdinOnce"
		} else {
			stdinOnceFlagName = fmt.Sprintf("%v.StdinOnce", cmdPrefix)
		}

		stdinOnceFlagValue, err := cmd.Flags().GetBool(stdinOnceFlagName)
		if err != nil {
			return err, false
		}
		m.StdinOnce = &stdinOnceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigStopSignalFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stopSignalFlagName := fmt.Sprintf("%v.StopSignal", cmdPrefix)
	if cmd.Flags().Changed(stopSignalFlagName) {

		var stopSignalFlagName string
		if cmdPrefix == "" {
			stopSignalFlagName = "StopSignal"
		} else {
			stopSignalFlagName = fmt.Sprintf("%v.StopSignal", cmdPrefix)
		}

		stopSignalFlagValue, err := cmd.Flags().GetString(stopSignalFlagName)
		if err != nil {
			return err, false
		}
		m.StopSignal = &stopSignalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigStopTimeoutFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stopTimeoutFlagName := fmt.Sprintf("%v.StopTimeout", cmdPrefix)
	if cmd.Flags().Changed(stopTimeoutFlagName) {

		var stopTimeoutFlagName string
		if cmdPrefix == "" {
			stopTimeoutFlagName = "StopTimeout"
		} else {
			stopTimeoutFlagName = fmt.Sprintf("%v.StopTimeout", cmdPrefix)
		}

		stopTimeoutFlagValue, err := cmd.Flags().GetInt64(stopTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.StopTimeout = &stopTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigTtyFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ttyFlagName := fmt.Sprintf("%v.Tty", cmdPrefix)
	if cmd.Flags().Changed(ttyFlagName) {

		var ttyFlagName string
		if cmdPrefix == "" {
			ttyFlagName = "Tty"
		} else {
			ttyFlagName = fmt.Sprintf("%v.Tty", cmdPrefix)
		}

		ttyFlagValue, err := cmd.Flags().GetBool(ttyFlagName)
		if err != nil {
			return err, false
		}
		m.Tty = &ttyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigUserFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userFlagName := fmt.Sprintf("%v.User", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {

		var userFlagName string
		if cmdPrefix == "" {
			userFlagName = "User"
		} else {
			userFlagName = fmt.Sprintf("%v.User", cmdPrefix)
		}

		userFlagValue, err := cmd.Flags().GetString(userFlagName)
		if err != nil {
			return err, false
		}
		m.User = userFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveContainerConfigVolumesFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	volumesFlagName := fmt.Sprintf("%v.Volumes", cmdPrefix)
	if cmd.Flags().Changed(volumesFlagName) {
		// warning: Volumes map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveContainerConfigWorkingDirFlags(depth int, m *models.ContainerConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workingDirFlagName := fmt.Sprintf("%v.WorkingDir", cmdPrefix)
	if cmd.Flags().Changed(workingDirFlagName) {

		var workingDirFlagName string
		if cmdPrefix == "" {
			workingDirFlagName = "WorkingDir"
		} else {
			workingDirFlagName = fmt.Sprintf("%v.WorkingDir", cmdPrefix)
		}

		workingDirFlagValue, err := cmd.Flags().GetString(workingDirFlagName)
		if err != nil {
			return err, false
		}
		m.WorkingDir = workingDirFlagValue

		retAdded = true
	}

	return nil, retAdded
}
