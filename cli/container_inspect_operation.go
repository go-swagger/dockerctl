// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerInspectCmd returns a cmd to handle operation containerInspect
func makeOperationContainerContainerInspectCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerInspect",
		Short: `Return low-level information about a container.`,
		RunE:  runOperationContainerContainerInspect,
	}

	if err := registerOperationContainerContainerInspectParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerInspect uses cmd flags to call endpoint api
func runOperationContainerContainerInspect(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerInspectParams()
	if err, _ := retrieveOperationContainerContainerInspectIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerInspectSizeFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationContainerContainerInspectResult(appCli.Container.ContainerInspect(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationContainerContainerInspectIDFlag(m *container.ContainerInspectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerInspectSizeFlag(m *container.ContainerInspectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("size") {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetBool(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = &sizeFlagValue

	}
	return nil, retAdded
}

// printOperationContainerContainerInspectResult prints output to stdout
func printOperationContainerContainerInspectResult(resp0 *container.ContainerInspectOK, respErr error) error {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*container.ContainerInspectOK)
		if ok {
			if !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerInspectNotFound)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerInspectInternalServerError)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		return respErr
	}

	if !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return err
		}
		fmt.Println(string(msgStr))
	}

	return nil
}

// registerOperationContainerContainerInspectParamFlags registers all flags needed to fill params
func registerOperationContainerContainerInspectParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerInspectIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerInspectSizeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerInspectIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID or name of the container`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationContainerContainerInspectSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sizeDescription := `Return the size of container as fields ` + "`" + `SizeRw` + "`" + ` and ` + "`" + `SizeRootFs` + "`" + ``

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

// register flags to command
func registerModelContainerInspectOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerInspectOKBodyAppArmorProfile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyArgs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyCreated(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyExecIDs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyGraphDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyHostConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyHostnamePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyHostsPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyImage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyLogPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyMountLabel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyMounts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyNetworkSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyNode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyPlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyProcessLabel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyResolvConfPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyRestartCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodySizeRootFs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodySizeRw(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerInspectOKBodyAppArmorProfile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	appArmorProfileDescription := ``

	var appArmorProfileFlagName string
	if cmdPrefix == "" {
		appArmorProfileFlagName = "AppArmorProfile"
	} else {
		appArmorProfileFlagName = fmt.Sprintf("%v.AppArmorProfile", cmdPrefix)
	}

	var appArmorProfileFlagDefault string

	_ = cmd.PersistentFlags().String(appArmorProfileFlagName, appArmorProfileFlagDefault, appArmorProfileDescription)

	return nil
}

func registerContainerInspectOKBodyArgs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Args []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerInspectOKBodyConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var configFlagName string
	if cmdPrefix == "" {
		configFlagName = "Config"
	} else {
		configFlagName = fmt.Sprintf("%v.Config", cmdPrefix)
	}

	registerModelContainerInspectOKBodyFlags(depth+1, configFlagName, cmd)

	return nil
}

func registerContainerInspectOKBodyCreated(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdDescription := `The time the container was created`

	var createdFlagName string
	if cmdPrefix == "" {
		createdFlagName = "Created"
	} else {
		createdFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
	}

	var createdFlagDefault string

	_ = cmd.PersistentFlags().String(createdFlagName, createdFlagDefault, createdDescription)

	return nil
}

func registerContainerInspectOKBodyDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	driverDescription := ``

	var driverFlagName string
	if cmdPrefix == "" {
		driverFlagName = "Driver"
	} else {
		driverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
	}

	var driverFlagDefault string

	_ = cmd.PersistentFlags().String(driverFlagName, driverFlagDefault, driverDescription)

	return nil
}

func registerContainerInspectOKBodyExecIDs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: ExecIDs []string array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerInspectOKBodyGraphDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var graphDriverFlagName string
	if cmdPrefix == "" {
		graphDriverFlagName = "GraphDriver"
	} else {
		graphDriverFlagName = fmt.Sprintf("%v.GraphDriver", cmdPrefix)
	}

	registerModelContainerInspectOKBodyFlags(depth+1, graphDriverFlagName, cmd)

	return nil
}

func registerContainerInspectOKBodyHostConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var hostConfigFlagName string
	if cmdPrefix == "" {
		hostConfigFlagName = "HostConfig"
	} else {
		hostConfigFlagName = fmt.Sprintf("%v.HostConfig", cmdPrefix)
	}

	registerModelContainerInspectOKBodyFlags(depth+1, hostConfigFlagName, cmd)

	return nil
}

func registerContainerInspectOKBodyHostnamePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnamePathDescription := ``

	var hostnamePathFlagName string
	if cmdPrefix == "" {
		hostnamePathFlagName = "HostnamePath"
	} else {
		hostnamePathFlagName = fmt.Sprintf("%v.HostnamePath", cmdPrefix)
	}

	var hostnamePathFlagDefault string

	_ = cmd.PersistentFlags().String(hostnamePathFlagName, hostnamePathFlagDefault, hostnamePathDescription)

	return nil
}

func registerContainerInspectOKBodyHostsPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostsPathDescription := ``

	var hostsPathFlagName string
	if cmdPrefix == "" {
		hostsPathFlagName = "HostsPath"
	} else {
		hostsPathFlagName = fmt.Sprintf("%v.HostsPath", cmdPrefix)
	}

	var hostsPathFlagDefault string

	_ = cmd.PersistentFlags().String(hostsPathFlagName, hostsPathFlagDefault, hostsPathDescription)

	return nil
}

func registerContainerInspectOKBodyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The ID of the container`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerContainerInspectOKBodyImage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imageDescription := `The container's image`

	var imageFlagName string
	if cmdPrefix == "" {
		imageFlagName = "Image"
	} else {
		imageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
	}

	var imageFlagDefault string

	_ = cmd.PersistentFlags().String(imageFlagName, imageFlagDefault, imageDescription)

	return nil
}

func registerContainerInspectOKBodyLogPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logPathDescription := ``

	var logPathFlagName string
	if cmdPrefix == "" {
		logPathFlagName = "LogPath"
	} else {
		logPathFlagName = fmt.Sprintf("%v.LogPath", cmdPrefix)
	}

	var logPathFlagDefault string

	_ = cmd.PersistentFlags().String(logPathFlagName, logPathFlagDefault, logPathDescription)

	return nil
}

func registerContainerInspectOKBodyMountLabel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mountLabelDescription := ``

	var mountLabelFlagName string
	if cmdPrefix == "" {
		mountLabelFlagName = "MountLabel"
	} else {
		mountLabelFlagName = fmt.Sprintf("%v.MountLabel", cmdPrefix)
	}

	var mountLabelFlagDefault string

	_ = cmd.PersistentFlags().String(mountLabelFlagName, mountLabelFlagDefault, mountLabelDescription)

	return nil
}

func registerContainerInspectOKBodyMounts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Mounts []*models.MountPoint array type is not supported by go-swagger cli yet

	return nil
}

func registerContainerInspectOKBodyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerContainerInspectOKBodyNetworkSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var networkSettingsFlagName string
	if cmdPrefix == "" {
		networkSettingsFlagName = "NetworkSettings"
	} else {
		networkSettingsFlagName = fmt.Sprintf("%v.NetworkSettings", cmdPrefix)
	}

	registerModelContainerInspectOKBodyFlags(depth+1, networkSettingsFlagName, cmd)

	return nil
}

func registerContainerInspectOKBodyNode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Node interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerContainerInspectOKBodyPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathDescription := `The path to the command being run`

	var pathFlagName string
	if cmdPrefix == "" {
		pathFlagName = "Path"
	} else {
		pathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
	}

	var pathFlagDefault string

	_ = cmd.PersistentFlags().String(pathFlagName, pathFlagDefault, pathDescription)

	return nil
}

func registerContainerInspectOKBodyPlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	platformDescription := ``

	var platformFlagName string
	if cmdPrefix == "" {
		platformFlagName = "Platform"
	} else {
		platformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
	}

	var platformFlagDefault string

	_ = cmd.PersistentFlags().String(platformFlagName, platformFlagDefault, platformDescription)

	return nil
}

func registerContainerInspectOKBodyProcessLabel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	processLabelDescription := ``

	var processLabelFlagName string
	if cmdPrefix == "" {
		processLabelFlagName = "ProcessLabel"
	} else {
		processLabelFlagName = fmt.Sprintf("%v.ProcessLabel", cmdPrefix)
	}

	var processLabelFlagDefault string

	_ = cmd.PersistentFlags().String(processLabelFlagName, processLabelFlagDefault, processLabelDescription)

	return nil
}

func registerContainerInspectOKBodyResolvConfPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resolvConfPathDescription := ``

	var resolvConfPathFlagName string
	if cmdPrefix == "" {
		resolvConfPathFlagName = "ResolvConfPath"
	} else {
		resolvConfPathFlagName = fmt.Sprintf("%v.ResolvConfPath", cmdPrefix)
	}

	var resolvConfPathFlagDefault string

	_ = cmd.PersistentFlags().String(resolvConfPathFlagName, resolvConfPathFlagDefault, resolvConfPathDescription)

	return nil
}

func registerContainerInspectOKBodyRestartCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	restartCountDescription := ``

	var restartCountFlagName string
	if cmdPrefix == "" {
		restartCountFlagName = "RestartCount"
	} else {
		restartCountFlagName = fmt.Sprintf("%v.RestartCount", cmdPrefix)
	}

	var restartCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(restartCountFlagName, restartCountFlagDefault, restartCountDescription)

	return nil
}

func registerContainerInspectOKBodySizeRootFs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sizeRootFsDescription := `The total size of all the files in this container.`

	var sizeRootFsFlagName string
	if cmdPrefix == "" {
		sizeRootFsFlagName = "SizeRootFs"
	} else {
		sizeRootFsFlagName = fmt.Sprintf("%v.SizeRootFs", cmdPrefix)
	}

	var sizeRootFsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sizeRootFsFlagName, sizeRootFsFlagDefault, sizeRootFsDescription)

	return nil
}

func registerContainerInspectOKBodySizeRw(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sizeRwDescription := `The size of files that have been created or changed by this container.`

	var sizeRwFlagName string
	if cmdPrefix == "" {
		sizeRwFlagName = "SizeRw"
	} else {
		sizeRwFlagName = fmt.Sprintf("%v.SizeRw", cmdPrefix)
	}

	var sizeRwFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sizeRwFlagName, sizeRwFlagDefault, sizeRwDescription)

	return nil
}

func registerContainerInspectOKBodyState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "State"
	} else {
		stateFlagName = fmt.Sprintf("%v.State", cmdPrefix)
	}

	registerModelContainerInspectOKBodyFlags(depth+1, stateFlagName, cmd)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerInspectOKBodyFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, appArmorProfileAdded := retrieveContainerInspectOKBodyAppArmorProfileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appArmorProfileAdded

	err, argsAdded := retrieveContainerInspectOKBodyArgsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || argsAdded

	err, configAdded := retrieveContainerInspectOKBodyConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configAdded

	err, createdAdded := retrieveContainerInspectOKBodyCreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAdded

	err, driverAdded := retrieveContainerInspectOKBodyDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || driverAdded

	err, execIDsAdded := retrieveContainerInspectOKBodyExecIDsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || execIDsAdded

	err, graphDriverAdded := retrieveContainerInspectOKBodyGraphDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || graphDriverAdded

	err, hostConfigAdded := retrieveContainerInspectOKBodyHostConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostConfigAdded

	err, hostnamePathAdded := retrieveContainerInspectOKBodyHostnamePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnamePathAdded

	err, hostsPathAdded := retrieveContainerInspectOKBodyHostsPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostsPathAdded

	err, idAdded := retrieveContainerInspectOKBodyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, imageAdded := retrieveContainerInspectOKBodyImageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imageAdded

	err, logPathAdded := retrieveContainerInspectOKBodyLogPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logPathAdded

	err, mountLabelAdded := retrieveContainerInspectOKBodyMountLabelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mountLabelAdded

	err, mountsAdded := retrieveContainerInspectOKBodyMountsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mountsAdded

	err, nameAdded := retrieveContainerInspectOKBodyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, networkSettingsAdded := retrieveContainerInspectOKBodyNetworkSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networkSettingsAdded

	err, nodeAdded := retrieveContainerInspectOKBodyNodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeAdded

	err, pathAdded := retrieveContainerInspectOKBodyPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathAdded

	err, platformAdded := retrieveContainerInspectOKBodyPlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformAdded

	err, processLabelAdded := retrieveContainerInspectOKBodyProcessLabelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || processLabelAdded

	err, resolvConfPathAdded := retrieveContainerInspectOKBodyResolvConfPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resolvConfPathAdded

	err, restartCountAdded := retrieveContainerInspectOKBodyRestartCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || restartCountAdded

	err, sizeRootFsAdded := retrieveContainerInspectOKBodySizeRootFsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sizeRootFsAdded

	err, sizeRwAdded := retrieveContainerInspectOKBodySizeRwFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sizeRwAdded

	err, stateAdded := retrieveContainerInspectOKBodyStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stateAdded

	return nil, retAdded
}

func retrieveContainerInspectOKBodyAppArmorProfileFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	appArmorProfileFlagName := fmt.Sprintf("%v.AppArmorProfile", cmdPrefix)
	if cmd.Flags().Changed(appArmorProfileFlagName) {

		var appArmorProfileFlagName string
		if cmdPrefix == "" {
			appArmorProfileFlagName = "AppArmorProfile"
		} else {
			appArmorProfileFlagName = fmt.Sprintf("%v.AppArmorProfile", cmdPrefix)
		}

		appArmorProfileFlagValue, err := cmd.Flags().GetString(appArmorProfileFlagName)
		if err != nil {
			return err, false
		}
		m.AppArmorProfile = appArmorProfileFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyArgsFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	argsFlagName := fmt.Sprintf("%v.Args", cmdPrefix)
	if cmd.Flags().Changed(argsFlagName) {
		// warning: Args array type []string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyConfigFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	configFlagName := fmt.Sprintf("%v.Config", cmdPrefix)
	if cmd.Flags().Changed(configFlagName) {

		configFlagValue := &container.ContainerInspectOKBody{}
		err, added := retrieveModelContainerInspectOKBodyFlags(depth+1, configFlagValue, configFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyCreatedFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	createdFlagName := fmt.Sprintf("%v.Created", cmdPrefix)
	if cmd.Flags().Changed(createdFlagName) {

		var createdFlagName string
		if cmdPrefix == "" {
			createdFlagName = "Created"
		} else {
			createdFlagName = fmt.Sprintf("%v.Created", cmdPrefix)
		}

		createdFlagValue, err := cmd.Flags().GetString(createdFlagName)
		if err != nil {
			return err, false
		}
		m.Created = createdFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyDriverFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	driverFlagName := fmt.Sprintf("%v.Driver", cmdPrefix)
	if cmd.Flags().Changed(driverFlagName) {

		var driverFlagName string
		if cmdPrefix == "" {
			driverFlagName = "Driver"
		} else {
			driverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
		}

		driverFlagValue, err := cmd.Flags().GetString(driverFlagName)
		if err != nil {
			return err, false
		}
		m.Driver = driverFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyExecIDsFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	execIDsFlagName := fmt.Sprintf("%v.ExecIDs", cmdPrefix)
	if cmd.Flags().Changed(execIDsFlagName) {
		// warning: ExecIDs array type []string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyGraphDriverFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	graphDriverFlagName := fmt.Sprintf("%v.GraphDriver", cmdPrefix)
	if cmd.Flags().Changed(graphDriverFlagName) {

		graphDriverFlagValue := &container.ContainerInspectOKBody{}
		err, added := retrieveModelContainerInspectOKBodyFlags(depth+1, graphDriverFlagValue, graphDriverFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyHostConfigFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	hostConfigFlagName := fmt.Sprintf("%v.HostConfig", cmdPrefix)
	if cmd.Flags().Changed(hostConfigFlagName) {

		hostConfigFlagValue := &container.ContainerInspectOKBody{}
		err, added := retrieveModelContainerInspectOKBodyFlags(depth+1, hostConfigFlagValue, hostConfigFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyHostnamePathFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	hostnamePathFlagName := fmt.Sprintf("%v.HostnamePath", cmdPrefix)
	if cmd.Flags().Changed(hostnamePathFlagName) {

		var hostnamePathFlagName string
		if cmdPrefix == "" {
			hostnamePathFlagName = "HostnamePath"
		} else {
			hostnamePathFlagName = fmt.Sprintf("%v.HostnamePath", cmdPrefix)
		}

		hostnamePathFlagValue, err := cmd.Flags().GetString(hostnamePathFlagName)
		if err != nil {
			return err, false
		}
		m.HostnamePath = hostnamePathFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyHostsPathFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	hostsPathFlagName := fmt.Sprintf("%v.HostsPath", cmdPrefix)
	if cmd.Flags().Changed(hostsPathFlagName) {

		var hostsPathFlagName string
		if cmdPrefix == "" {
			hostsPathFlagName = "HostsPath"
		} else {
			hostsPathFlagName = fmt.Sprintf("%v.HostsPath", cmdPrefix)
		}

		hostsPathFlagValue, err := cmd.Flags().GetString(hostsPathFlagName)
		if err != nil {
			return err, false
		}
		m.HostsPath = hostsPathFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyIDFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyImageFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	imageFlagName := fmt.Sprintf("%v.Image", cmdPrefix)
	if cmd.Flags().Changed(imageFlagName) {

		var imageFlagName string
		if cmdPrefix == "" {
			imageFlagName = "Image"
		} else {
			imageFlagName = fmt.Sprintf("%v.Image", cmdPrefix)
		}

		imageFlagValue, err := cmd.Flags().GetString(imageFlagName)
		if err != nil {
			return err, false
		}
		m.Image = imageFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyLogPathFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	logPathFlagName := fmt.Sprintf("%v.LogPath", cmdPrefix)
	if cmd.Flags().Changed(logPathFlagName) {

		var logPathFlagName string
		if cmdPrefix == "" {
			logPathFlagName = "LogPath"
		} else {
			logPathFlagName = fmt.Sprintf("%v.LogPath", cmdPrefix)
		}

		logPathFlagValue, err := cmd.Flags().GetString(logPathFlagName)
		if err != nil {
			return err, false
		}
		m.LogPath = logPathFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyMountLabelFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	mountLabelFlagName := fmt.Sprintf("%v.MountLabel", cmdPrefix)
	if cmd.Flags().Changed(mountLabelFlagName) {

		var mountLabelFlagName string
		if cmdPrefix == "" {
			mountLabelFlagName = "MountLabel"
		} else {
			mountLabelFlagName = fmt.Sprintf("%v.MountLabel", cmdPrefix)
		}

		mountLabelFlagValue, err := cmd.Flags().GetString(mountLabelFlagName)
		if err != nil {
			return err, false
		}
		m.MountLabel = mountLabelFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyMountsFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	mountsFlagName := fmt.Sprintf("%v.Mounts", cmdPrefix)
	if cmd.Flags().Changed(mountsFlagName) {
		// warning: Mounts array type []*models.MountPoint is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyNameFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyNetworkSettingsFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	networkSettingsFlagName := fmt.Sprintf("%v.NetworkSettings", cmdPrefix)
	if cmd.Flags().Changed(networkSettingsFlagName) {

		networkSettingsFlagValue := &container.ContainerInspectOKBody{}
		err, added := retrieveModelContainerInspectOKBodyFlags(depth+1, networkSettingsFlagValue, networkSettingsFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyNodeFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nodeFlagName := fmt.Sprintf("%v.Node", cmdPrefix)
	if cmd.Flags().Changed(nodeFlagName) {
		// warning: Node map type interface{} is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyPathFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	pathFlagName := fmt.Sprintf("%v.Path", cmdPrefix)
	if cmd.Flags().Changed(pathFlagName) {

		var pathFlagName string
		if cmdPrefix == "" {
			pathFlagName = "Path"
		} else {
			pathFlagName = fmt.Sprintf("%v.Path", cmdPrefix)
		}

		pathFlagValue, err := cmd.Flags().GetString(pathFlagName)
		if err != nil {
			return err, false
		}
		m.Path = pathFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyPlatformFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	platformFlagName := fmt.Sprintf("%v.Platform", cmdPrefix)
	if cmd.Flags().Changed(platformFlagName) {

		var platformFlagName string
		if cmdPrefix == "" {
			platformFlagName = "Platform"
		} else {
			platformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
		}

		platformFlagValue, err := cmd.Flags().GetString(platformFlagName)
		if err != nil {
			return err, false
		}
		m.Platform = platformFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyProcessLabelFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	processLabelFlagName := fmt.Sprintf("%v.ProcessLabel", cmdPrefix)
	if cmd.Flags().Changed(processLabelFlagName) {

		var processLabelFlagName string
		if cmdPrefix == "" {
			processLabelFlagName = "ProcessLabel"
		} else {
			processLabelFlagName = fmt.Sprintf("%v.ProcessLabel", cmdPrefix)
		}

		processLabelFlagValue, err := cmd.Flags().GetString(processLabelFlagName)
		if err != nil {
			return err, false
		}
		m.ProcessLabel = processLabelFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyResolvConfPathFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	resolvConfPathFlagName := fmt.Sprintf("%v.ResolvConfPath", cmdPrefix)
	if cmd.Flags().Changed(resolvConfPathFlagName) {

		var resolvConfPathFlagName string
		if cmdPrefix == "" {
			resolvConfPathFlagName = "ResolvConfPath"
		} else {
			resolvConfPathFlagName = fmt.Sprintf("%v.ResolvConfPath", cmdPrefix)
		}

		resolvConfPathFlagValue, err := cmd.Flags().GetString(resolvConfPathFlagName)
		if err != nil {
			return err, false
		}
		m.ResolvConfPath = resolvConfPathFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyRestartCountFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	restartCountFlagName := fmt.Sprintf("%v.RestartCount", cmdPrefix)
	if cmd.Flags().Changed(restartCountFlagName) {

		var restartCountFlagName string
		if cmdPrefix == "" {
			restartCountFlagName = "RestartCount"
		} else {
			restartCountFlagName = fmt.Sprintf("%v.RestartCount", cmdPrefix)
		}

		restartCountFlagValue, err := cmd.Flags().GetInt64(restartCountFlagName)
		if err != nil {
			return err, false
		}
		m.RestartCount = restartCountFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodySizeRootFsFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	sizeRootFsFlagName := fmt.Sprintf("%v.SizeRootFs", cmdPrefix)
	if cmd.Flags().Changed(sizeRootFsFlagName) {

		var sizeRootFsFlagName string
		if cmdPrefix == "" {
			sizeRootFsFlagName = "SizeRootFs"
		} else {
			sizeRootFsFlagName = fmt.Sprintf("%v.SizeRootFs", cmdPrefix)
		}

		sizeRootFsFlagValue, err := cmd.Flags().GetInt64(sizeRootFsFlagName)
		if err != nil {
			return err, false
		}
		m.SizeRootFs = sizeRootFsFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodySizeRwFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	sizeRwFlagName := fmt.Sprintf("%v.SizeRw", cmdPrefix)
	if cmd.Flags().Changed(sizeRwFlagName) {

		var sizeRwFlagName string
		if cmdPrefix == "" {
			sizeRwFlagName = "SizeRw"
		} else {
			sizeRwFlagName = fmt.Sprintf("%v.SizeRw", cmdPrefix)
		}

		sizeRwFlagValue, err := cmd.Flags().GetInt64(sizeRwFlagName)
		if err != nil {
			return err, false
		}
		m.SizeRw = sizeRwFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateFlags(depth int, m *container.ContainerInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	stateFlagName := fmt.Sprintf("%v.State", cmdPrefix)
	if cmd.Flags().Changed(stateFlagName) {

		stateFlagValue := &container.ContainerInspectOKBody{}
		err, added := retrieveModelContainerInspectOKBodyFlags(depth+1, stateFlagValue, stateFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

// register flags to command
func registerModelContainerInspectOKBodyStateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerInspectOKBodyStateDead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateExitCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateFinishedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateOOMKilled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStatePaused(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStatePid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateRestarting(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateRunning(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateStartedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerContainerInspectOKBodyStateStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerInspectOKBodyStateDead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deadDescription := ``

	var deadFlagName string
	if cmdPrefix == "" {
		deadFlagName = "Dead"
	} else {
		deadFlagName = fmt.Sprintf("%v.Dead", cmdPrefix)
	}

	var deadFlagDefault bool

	_ = cmd.PersistentFlags().Bool(deadFlagName, deadFlagDefault, deadDescription)

	return nil
}

func registerContainerInspectOKBodyStateError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorDescription := ``

	var errorFlagName string
	if cmdPrefix == "" {
		errorFlagName = "Error"
	} else {
		errorFlagName = fmt.Sprintf("%v.Error", cmdPrefix)
	}

	var errorFlagDefault string

	_ = cmd.PersistentFlags().String(errorFlagName, errorFlagDefault, errorDescription)

	return nil
}

func registerContainerInspectOKBodyStateExitCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	exitCodeDescription := `The last exit code of this container`

	var exitCodeFlagName string
	if cmdPrefix == "" {
		exitCodeFlagName = "ExitCode"
	} else {
		exitCodeFlagName = fmt.Sprintf("%v.ExitCode", cmdPrefix)
	}

	var exitCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(exitCodeFlagName, exitCodeFlagDefault, exitCodeDescription)

	return nil
}

func registerContainerInspectOKBodyStateFinishedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	finishedAtDescription := `The time when this container last exited.`

	var finishedAtFlagName string
	if cmdPrefix == "" {
		finishedAtFlagName = "FinishedAt"
	} else {
		finishedAtFlagName = fmt.Sprintf("%v.FinishedAt", cmdPrefix)
	}

	var finishedAtFlagDefault string

	_ = cmd.PersistentFlags().String(finishedAtFlagName, finishedAtFlagDefault, finishedAtDescription)

	return nil
}

func registerContainerInspectOKBodyStateOOMKilled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oOMKilledDescription := `Whether this container has been killed because it ran out of memory.`

	var oOMKilledFlagName string
	if cmdPrefix == "" {
		oOMKilledFlagName = "OOMKilled"
	} else {
		oOMKilledFlagName = fmt.Sprintf("%v.OOMKilled", cmdPrefix)
	}

	var oOMKilledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(oOMKilledFlagName, oOMKilledFlagDefault, oOMKilledDescription)

	return nil
}

func registerContainerInspectOKBodyStatePaused(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pausedDescription := `Whether this container is paused.`

	var pausedFlagName string
	if cmdPrefix == "" {
		pausedFlagName = "Paused"
	} else {
		pausedFlagName = fmt.Sprintf("%v.Paused", cmdPrefix)
	}

	var pausedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pausedFlagName, pausedFlagDefault, pausedDescription)

	return nil
}

func registerContainerInspectOKBodyStatePid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pidDescription := `The process ID of this container`

	var pidFlagName string
	if cmdPrefix == "" {
		pidFlagName = "Pid"
	} else {
		pidFlagName = fmt.Sprintf("%v.Pid", cmdPrefix)
	}

	var pidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pidFlagName, pidFlagDefault, pidDescription)

	return nil
}

func registerContainerInspectOKBodyStateRestarting(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	restartingDescription := `Whether this container is restarting.`

	var restartingFlagName string
	if cmdPrefix == "" {
		restartingFlagName = "Restarting"
	} else {
		restartingFlagName = fmt.Sprintf("%v.Restarting", cmdPrefix)
	}

	var restartingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(restartingFlagName, restartingFlagDefault, restartingDescription)

	return nil
}

func registerContainerInspectOKBodyStateRunning(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runningDescription := `Whether this container is running.

Note that a running container can be _paused_. The ` + "`" + `Running` + "`" + ` and ` + "`" + `Paused` + "`" + `
booleans are not mutually exclusive:

When pausing a container (on Linux), the freezer cgroup is used to suspend
all processes in the container. Freezing the process requires the process to
be running. As a result, paused containers are both ` + "`" + `Running` + "`" + ` _and_ ` + "`" + `Paused` + "`" + `.

Use the ` + "`" + `Status` + "`" + ` field instead to determine if a container's state is "running".
`

	var runningFlagName string
	if cmdPrefix == "" {
		runningFlagName = "Running"
	} else {
		runningFlagName = fmt.Sprintf("%v.Running", cmdPrefix)
	}

	var runningFlagDefault bool

	_ = cmd.PersistentFlags().Bool(runningFlagName, runningFlagDefault, runningDescription)

	return nil
}

func registerContainerInspectOKBodyStateStartedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startedAtDescription := `The time when this container was last started.`

	var startedAtFlagName string
	if cmdPrefix == "" {
		startedAtFlagName = "StartedAt"
	} else {
		startedAtFlagName = fmt.Sprintf("%v.StartedAt", cmdPrefix)
	}

	var startedAtFlagDefault string

	_ = cmd.PersistentFlags().String(startedAtFlagName, startedAtFlagDefault, startedAtDescription)

	return nil
}

func registerContainerInspectOKBodyStateStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `The status of the container. For example, ` + "`" + `"running"` + "`" + ` or ` + "`" + `"exited"` + "`" + `.
`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "Status"
	} else {
		statusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerInspectOKBodyStateFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deadAdded := retrieveContainerInspectOKBodyStateDeadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deadAdded

	err, errorAdded := retrieveContainerInspectOKBodyStateErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorAdded

	err, exitCodeAdded := retrieveContainerInspectOKBodyStateExitCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || exitCodeAdded

	err, finishedAtAdded := retrieveContainerInspectOKBodyStateFinishedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || finishedAtAdded

	err, oOMKilledAdded := retrieveContainerInspectOKBodyStateOOMKilledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oOMKilledAdded

	err, pausedAdded := retrieveContainerInspectOKBodyStatePausedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pausedAdded

	err, pidAdded := retrieveContainerInspectOKBodyStatePidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pidAdded

	err, restartingAdded := retrieveContainerInspectOKBodyStateRestartingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || restartingAdded

	err, runningAdded := retrieveContainerInspectOKBodyStateRunningFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runningAdded

	err, startedAtAdded := retrieveContainerInspectOKBodyStateStartedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startedAtAdded

	err, statusAdded := retrieveContainerInspectOKBodyStateStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateDeadFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	deadFlagName := fmt.Sprintf("%v.Dead", cmdPrefix)
	if cmd.Flags().Changed(deadFlagName) {

		var deadFlagName string
		if cmdPrefix == "" {
			deadFlagName = "Dead"
		} else {
			deadFlagName = fmt.Sprintf("%v.Dead", cmdPrefix)
		}

		deadFlagValue, err := cmd.Flags().GetBool(deadFlagName)
		if err != nil {
			return err, false
		}
		m.Dead = deadFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateErrorFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	errorFlagName := fmt.Sprintf("%v.Error", cmdPrefix)
	if cmd.Flags().Changed(errorFlagName) {

		var errorFlagName string
		if cmdPrefix == "" {
			errorFlagName = "Error"
		} else {
			errorFlagName = fmt.Sprintf("%v.Error", cmdPrefix)
		}

		errorFlagValue, err := cmd.Flags().GetString(errorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = errorFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateExitCodeFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	exitCodeFlagName := fmt.Sprintf("%v.ExitCode", cmdPrefix)
	if cmd.Flags().Changed(exitCodeFlagName) {

		var exitCodeFlagName string
		if cmdPrefix == "" {
			exitCodeFlagName = "ExitCode"
		} else {
			exitCodeFlagName = fmt.Sprintf("%v.ExitCode", cmdPrefix)
		}

		exitCodeFlagValue, err := cmd.Flags().GetInt64(exitCodeFlagName)
		if err != nil {
			return err, false
		}
		m.ExitCode = exitCodeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateFinishedAtFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	finishedAtFlagName := fmt.Sprintf("%v.FinishedAt", cmdPrefix)
	if cmd.Flags().Changed(finishedAtFlagName) {

		var finishedAtFlagName string
		if cmdPrefix == "" {
			finishedAtFlagName = "FinishedAt"
		} else {
			finishedAtFlagName = fmt.Sprintf("%v.FinishedAt", cmdPrefix)
		}

		finishedAtFlagValue, err := cmd.Flags().GetString(finishedAtFlagName)
		if err != nil {
			return err, false
		}
		m.FinishedAt = finishedAtFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateOOMKilledFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	oOMKilledFlagName := fmt.Sprintf("%v.OOMKilled", cmdPrefix)
	if cmd.Flags().Changed(oOMKilledFlagName) {

		var oOMKilledFlagName string
		if cmdPrefix == "" {
			oOMKilledFlagName = "OOMKilled"
		} else {
			oOMKilledFlagName = fmt.Sprintf("%v.OOMKilled", cmdPrefix)
		}

		oOMKilledFlagValue, err := cmd.Flags().GetBool(oOMKilledFlagName)
		if err != nil {
			return err, false
		}
		m.OOMKilled = oOMKilledFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStatePausedFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	pausedFlagName := fmt.Sprintf("%v.Paused", cmdPrefix)
	if cmd.Flags().Changed(pausedFlagName) {

		var pausedFlagName string
		if cmdPrefix == "" {
			pausedFlagName = "Paused"
		} else {
			pausedFlagName = fmt.Sprintf("%v.Paused", cmdPrefix)
		}

		pausedFlagValue, err := cmd.Flags().GetBool(pausedFlagName)
		if err != nil {
			return err, false
		}
		m.Paused = pausedFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStatePidFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	pidFlagName := fmt.Sprintf("%v.Pid", cmdPrefix)
	if cmd.Flags().Changed(pidFlagName) {

		var pidFlagName string
		if cmdPrefix == "" {
			pidFlagName = "Pid"
		} else {
			pidFlagName = fmt.Sprintf("%v.Pid", cmdPrefix)
		}

		pidFlagValue, err := cmd.Flags().GetInt64(pidFlagName)
		if err != nil {
			return err, false
		}
		m.Pid = pidFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateRestartingFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	restartingFlagName := fmt.Sprintf("%v.Restarting", cmdPrefix)
	if cmd.Flags().Changed(restartingFlagName) {

		var restartingFlagName string
		if cmdPrefix == "" {
			restartingFlagName = "Restarting"
		} else {
			restartingFlagName = fmt.Sprintf("%v.Restarting", cmdPrefix)
		}

		restartingFlagValue, err := cmd.Flags().GetBool(restartingFlagName)
		if err != nil {
			return err, false
		}
		m.Restarting = restartingFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateRunningFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	runningFlagName := fmt.Sprintf("%v.Running", cmdPrefix)
	if cmd.Flags().Changed(runningFlagName) {

		var runningFlagName string
		if cmdPrefix == "" {
			runningFlagName = "Running"
		} else {
			runningFlagName = fmt.Sprintf("%v.Running", cmdPrefix)
		}

		runningFlagValue, err := cmd.Flags().GetBool(runningFlagName)
		if err != nil {
			return err, false
		}
		m.Running = runningFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateStartedAtFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	startedAtFlagName := fmt.Sprintf("%v.StartedAt", cmdPrefix)
	if cmd.Flags().Changed(startedAtFlagName) {

		var startedAtFlagName string
		if cmdPrefix == "" {
			startedAtFlagName = "StartedAt"
		} else {
			startedAtFlagName = fmt.Sprintf("%v.StartedAt", cmdPrefix)
		}

		startedAtFlagValue, err := cmd.Flags().GetString(startedAtFlagName)
		if err != nil {
			return err, false
		}
		m.StartedAt = startedAtFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveContainerInspectOKBodyStateStatusFlags(depth int, m *container.ContainerInspectOKBodyState, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	statusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "Status"
		} else {
			statusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}
	return nil, retAdded
}
