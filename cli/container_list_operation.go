// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerListCmd returns a cmd to handle operation containerList
func makeOperationContainerContainerListCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ContainerList",
		Short: `Returns a list of containers. For details on the format, see [the inspect endpoint](#operation/ContainerInspect).

Note that it uses a different, smaller representation of a container than inspecting a single container. For example,
the list of linked containers is not propagated .
`,
		RunE: runOperationContainerContainerList,
	}

	if err := registerOperationContainerContainerListParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerList uses cmd flags to call endpoint api
func runOperationContainerContainerList(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerListParams()
	if err, _ := retrieveOperationContainerContainerListAllFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerListFiltersFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerListLimitFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerListSizeFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationContainerContainerListResult(appCli.Container.ContainerList(params)); err != nil {
		return err
	}
	return nil
}

// registerOperationContainerContainerListParamFlags registers all flags needed to fill params
func registerOperationContainerContainerListParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerListAllParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerListFiltersParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerListLimitParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerListSizeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerListAllParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	allDescription := `Return all containers. By default, only running containers are shown`

	var allFlagName string
	if cmdPrefix == "" {
		allFlagName = "all"
	} else {
		allFlagName = fmt.Sprintf("%v.all", cmdPrefix)
	}

	var allFlagDefault bool

	_ = cmd.PersistentFlags().Bool(allFlagName, allFlagDefault, allDescription)

	return nil
}
func registerOperationContainerContainerListFiltersParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filtersDescription := `Filters to process on the container list, encoded as JSON (a ` + "`" + `map[string][]string` + "`" + `). For example, ` + "`" + `{"status": ["paused"]}` + "`" + ` will only return paused containers. Available filters:

- ` + "`" + `ancestor` + "`" + `=(` + "`" + `<image-name>[:<tag>]` + "`" + `, ` + "`" + `<image id>` + "`" + `, or ` + "`" + `<image@digest>` + "`" + `)
- ` + "`" + `before` + "`" + `=(` + "`" + `<container id>` + "`" + ` or ` + "`" + `<container name>` + "`" + `)
- ` + "`" + `expose` + "`" + `=(` + "`" + `<port>[/<proto>]` + "`" + `|` + "`" + `<startport-endport>/[<proto>]` + "`" + `)
- ` + "`" + `exited=<int>` + "`" + ` containers with exit code of ` + "`" + `<int>` + "`" + `
- ` + "`" + `health` + "`" + `=(` + "`" + `starting` + "`" + `|` + "`" + `healthy` + "`" + `|` + "`" + `unhealthy` + "`" + `|` + "`" + `none` + "`" + `)
- ` + "`" + `id=<ID>` + "`" + ` a container's ID
- ` + "`" + `isolation=` + "`" + `(` + "`" + `default` + "`" + `|` + "`" + `process` + "`" + `|` + "`" + `hyperv` + "`" + `) (Windows daemon only)
- ` + "`" + `is-task=` + "`" + `(` + "`" + `true` + "`" + `|` + "`" + `false` + "`" + `)
- ` + "`" + `label=key` + "`" + ` or ` + "`" + `label="key=value"` + "`" + ` of a container label
- ` + "`" + `name=<name>` + "`" + ` a container's name
- ` + "`" + `network` + "`" + `=(` + "`" + `<network id>` + "`" + ` or ` + "`" + `<network name>` + "`" + `)
- ` + "`" + `publish` + "`" + `=(` + "`" + `<port>[/<proto>]` + "`" + `|` + "`" + `<startport-endport>/[<proto>]` + "`" + `)
- ` + "`" + `since` + "`" + `=(` + "`" + `<container id>` + "`" + ` or ` + "`" + `<container name>` + "`" + `)
- ` + "`" + `status=` + "`" + `(` + "`" + `created` + "`" + `|` + "`" + `restarting` + "`" + `|` + "`" + `running` + "`" + `|` + "`" + `removing` + "`" + `|` + "`" + `paused` + "`" + `|` + "`" + `exited` + "`" + `|` + "`" + `dead` + "`" + `)
- ` + "`" + `volume` + "`" + `=(` + "`" + `<volume name>` + "`" + ` or ` + "`" + `<mount point destination>` + "`" + `)
`

	var filtersFlagName string
	if cmdPrefix == "" {
		filtersFlagName = "filters"
	} else {
		filtersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
	}

	var filtersFlagDefault string

	_ = cmd.PersistentFlags().String(filtersFlagName, filtersFlagDefault, filtersDescription)

	return nil
}
func registerOperationContainerContainerListLimitParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	limitDescription := `Return this number of most recently created containers, including non-running ones.`

	var limitFlagName string
	if cmdPrefix == "" {
		limitFlagName = "limit"
	} else {
		limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var limitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(limitFlagName, limitFlagDefault, limitDescription)

	return nil
}
func registerOperationContainerContainerListSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sizeDescription := `Return the size of container as fields ` + "`" + `SizeRw` + "`" + ` and ` + "`" + `SizeRootFs` + "`" + `.`

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

func retrieveOperationContainerContainerListAllFlag(m *container.ContainerListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("all") {

		var allFlagName string
		if cmdPrefix == "" {
			allFlagName = "all"
		} else {
			allFlagName = fmt.Sprintf("%v.all", cmdPrefix)
		}

		allFlagValue, err := cmd.Flags().GetBool(allFlagName)
		if err != nil {
			return err, false
		}
		m.All = &allFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerListFiltersFlag(m *container.ContainerListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("filters") {

		var filtersFlagName string
		if cmdPrefix == "" {
			filtersFlagName = "filters"
		} else {
			filtersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
		}

		filtersFlagValue, err := cmd.Flags().GetString(filtersFlagName)
		if err != nil {
			return err, false
		}
		m.Filters = &filtersFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerListLimitFlag(m *container.ContainerListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("limit") {

		var limitFlagName string
		if cmdPrefix == "" {
			limitFlagName = "limit"
		} else {
			limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		limitFlagValue, err := cmd.Flags().GetInt64(limitFlagName)
		if err != nil {
			return err, false
		}
		m.Limit = &limitFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerListSizeFlag(m *container.ContainerListParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("size") {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetBool(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = &sizeFlagValue

	}
	return nil, retAdded
}

// printOperationContainerContainerListResult prints output to stdout
func printOperationContainerContainerListResult(resp0 *container.ContainerListOK, respErr error) error {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*container.ContainerListOK)
		if ok {
			if !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerListBadRequest)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerListInternalServerError)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		return respErr
	}

	if !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return err
		}
		fmt.Println(string(msgStr))
	}

	return nil
}
