// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerPauseCmd returns a cmd to handle operation containerPause
func makeOperationContainerContainerPauseCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ContainerPause",
		Short: `Use the freezer cgroup to suspend all processes in a container.

Traditionally, when suspending a process the ` + "`" + `SIGSTOP` + "`" + ` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed.
`,
		RunE: runOperationContainerContainerPause,
	}

	if err := registerOperationContainerContainerPauseParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerPause uses cmd flags to call endpoint api
func runOperationContainerContainerPause(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerPauseParams()
	if err, _ := retrieveOperationContainerContainerPauseIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationContainerContainerPauseResult(appCli.Container.ContainerPause(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationContainerContainerPauseParamFlags registers all flags needed to fill params
func registerOperationContainerContainerPauseParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerPauseIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerPauseIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID or name of the container`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func retrieveOperationContainerContainerPauseIDFlag(m *container.ContainerPauseParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// parseOperationContainerContainerPauseResult parses request result and return the string content
func parseOperationContainerContainerPauseResult(resp0 *container.ContainerPauseNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning containerPauseNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerPauseNotFound)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerPauseInternalServerError)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response containerPauseNoContent is not supported by go-swagger cli yet.

	return "", nil
}
