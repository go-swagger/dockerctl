// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerRenameCmd returns a cmd to handle operation containerRename
func makeOperationContainerContainerRenameCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerRename",
		Short: ``,
		RunE:  runOperationContainerContainerRename,
	}

	if err := registerOperationContainerContainerRenameParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerRename uses cmd flags to call endpoint api
func runOperationContainerContainerRename(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerRenameParams()
	if err, _ := retrieveOperationContainerContainerRenameIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerRenameNameFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationContainerContainerRenameResult(appCli.Container.ContainerRename(params)); err != nil {
		return err
	}
	return nil
}

// registerOperationContainerContainerRenameParamFlags registers all flags needed to fill params
func registerOperationContainerContainerRenameParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerRenameIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerRenameNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerRenameIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID or name of the container`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationContainerContainerRenameNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. New name for the container`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func retrieveOperationContainerContainerRenameIDFlag(m *container.ContainerRenameParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerRenameNameFlag(m *container.ContainerRenameParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}

// printOperationContainerContainerRenameResult prints output to stdout
func printOperationContainerContainerRenameResult(resp0 *container.ContainerRenameNoContent, respErr error) error {
	if respErr != nil {

		// Non schema case: warning containerRenameNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerRenameNotFound)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerRenameConflict)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*container.ContainerRenameInternalServerError)
		if ok {
			if !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		return respErr
	}

	// warning: non schema response containerRenameNoContent is not supported by go-swagger cli yet.

	return nil
}
