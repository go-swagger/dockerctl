// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerResizeCmd returns a cmd to handle operation containerResize
func makeOperationContainerContainerResizeCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerResize",
		Short: `Resize the TTY for a container.`,
		RunE:  runOperationContainerContainerResize,
	}

	if err := registerOperationContainerContainerResizeParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerResize uses cmd flags to call endpoint api
func runOperationContainerContainerResize(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerResizeParams()
	if err, _ := retrieveOperationContainerContainerResizeHFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerResizeIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerResizeWFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationContainerContainerResizeResult(appCli.Container.ContainerResize(params)); err != nil {
		return err
	}
	return nil
}

// registerOperationContainerContainerResizeParamFlags registers all flags needed to fill params
func registerOperationContainerContainerResizeParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerResizeHParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerResizeIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerResizeWParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerResizeHParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	hDescription := `Height of the tty session in characters`

	var hFlagName string
	if cmdPrefix == "" {
		hFlagName = "h"
	} else {
		hFlagName = fmt.Sprintf("%v.h", cmdPrefix)
	}

	var hFlagDefault int64

	_ = cmd.PersistentFlags().Int64(hFlagName, hFlagDefault, hDescription)

	return nil
}
func registerOperationContainerContainerResizeIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID or name of the container`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationContainerContainerResizeWParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	wDescription := `Width of the tty session in characters`

	var wFlagName string
	if cmdPrefix == "" {
		wFlagName = "w"
	} else {
		wFlagName = fmt.Sprintf("%v.w", cmdPrefix)
	}

	var wFlagDefault int64

	_ = cmd.PersistentFlags().Int64(wFlagName, wFlagDefault, wDescription)

	return nil
}

func retrieveOperationContainerContainerResizeHFlag(m *container.ContainerResizeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("h") {

		var hFlagName string
		if cmdPrefix == "" {
			hFlagName = "h"
		} else {
			hFlagName = fmt.Sprintf("%v.h", cmdPrefix)
		}

		hFlagValue, err := cmd.Flags().GetInt64(hFlagName)
		if err != nil {
			return err, false
		}
		m.H = &hFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerResizeIDFlag(m *container.ContainerResizeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerResizeWFlag(m *container.ContainerResizeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("w") {

		var wFlagName string
		if cmdPrefix == "" {
			wFlagName = "w"
		} else {
			wFlagName = fmt.Sprintf("%v.w", cmdPrefix)
		}

		wFlagValue, err := cmd.Flags().GetInt64(wFlagName)
		if err != nil {
			return err, false
		}
		m.W = &wFlagValue

	}
	return nil, retAdded
}

// printOperationContainerContainerResizeResult prints output to stdout
func printOperationContainerContainerResizeResult(resp0 *container.ContainerResizeOK, respErr error) error {
	if respErr != nil {

		// Non schema case: warning containerResizeOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerResizeNotFound)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerResizeInternalServerError)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		return respErr
	}

	// warning: non schema response containerResizeOK is not supported by go-swagger cli yet.

	return nil
}
