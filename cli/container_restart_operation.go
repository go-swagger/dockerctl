// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/dockerctl/client/container"

	"github.com/spf13/cobra"
)

// makeOperationContainerContainerRestartCmd returns a cmd to handle operation containerRestart
func makeOperationContainerContainerRestartCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerRestart",
		Short: ``,
		RunE:  runOperationContainerContainerRestart,
	}

	if err := registerOperationContainerContainerRestartParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerRestart uses cmd flags to call endpoint api
func runOperationContainerContainerRestart(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerRestartParams()
	if err, _ := retrieveOperationContainerContainerRestartIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerRestartTFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationContainerContainerRestartResult(appCli.Container.ContainerRestart(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationContainerContainerRestartIDFlag(m *container.ContainerRestartParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerRestartTFlag(m *container.ContainerRestartParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("t") {

		var tFlagName string
		if cmdPrefix == "" {
			tFlagName = "t"
		} else {
			tFlagName = fmt.Sprintf("%v.t", cmdPrefix)
		}

		tFlagValue, err := cmd.Flags().GetInt64(tFlagName)
		if err != nil {
			return err, false
		}
		m.T = &tFlagValue

	}
	return nil, retAdded
}

// printOperationContainerContainerRestartResult prints output to stdout
func printOperationContainerContainerRestartResult(resp0 *container.ContainerRestartNoContent, respErr error) error {
	if respErr != nil {
		return respErr
	}

	// warning: non schema response containerRestartNoContent is not supported by go-swagger cli yet.

	return nil
}

// registerOperationContainerContainerRestartParamFlags registers all flags needed to fill params
func registerOperationContainerContainerRestartParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerRestartIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerRestartTParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerRestartIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID or name of the container`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationContainerContainerRestartTParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tDescription := `Number of seconds to wait before killing the container`

	var tFlagName string
	if cmdPrefix == "" {
		tFlagName = "t"
	} else {
		tFlagName = fmt.Sprintf("%v.t", cmdPrefix)
	}

	var tFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tFlagName, tFlagDefault, tDescription)

	return nil
}
