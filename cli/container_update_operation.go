// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/container"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationContainerContainerUpdateCmd returns a cmd to handle operation containerUpdate
func makeOperationContainerContainerUpdateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ContainerUpdate",
		Short: `Change various configuration options of a container without having to recreate it.`,
		RunE:  runOperationContainerContainerUpdate,
	}

	if err := registerOperationContainerContainerUpdateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationContainerContainerUpdate uses cmd flags to call endpoint api
func runOperationContainerContainerUpdate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := container.NewContainerUpdateParams()
	if err, _ := retrieveOperationContainerContainerUpdateIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationContainerContainerUpdateUpdateFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationContainerContainerUpdateResult(appCli.Container.ContainerUpdate(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationContainerContainerUpdateIDFlag(m *container.ContainerUpdateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationContainerContainerUpdateUpdateFlag(m *container.ContainerUpdateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("update") {
		// Read update string from cmd and unmarshal
		updateValueStr, err := cmd.Flags().GetString("update")
		if err != nil {
			return err, false
		}

		updateValue := container.ContainerUpdateBody{}
		if err := json.Unmarshal([]byte(updateValueStr), &updateValue); err != nil {
			return fmt.Errorf("cannot unmarshal update string in ContainerUpdateBody: %v", err), false
		}
		m.Update = updateValue
	}
	updateValueModel := m.Update
	if swag.IsZero(updateValueModel) {
		updateValueModel = container.ContainerUpdateBody{}
	}
	err, added := retrieveModelContainerUpdateBodyFlags(0, &updateValueModel, "containerUpdateBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Update = updateValueModel
	}
	updateValueDebugBytes, err := json.Marshal(m.Update)
	if err != nil {
		return err, false
	}
	logDebugf("Update payload: %v", string(updateValueDebugBytes))
	return nil, retAdded
}

// printOperationContainerContainerUpdateResult prints output to stdout
func printOperationContainerContainerUpdateResult(resp0 *container.ContainerUpdateOK, respErr error) error {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*container.ContainerUpdateOK)
		if ok {
			if !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*container.ContainerUpdateNotFound)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*container.ContainerUpdateInternalServerError)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		return respErr
	}

	if !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return err
		}
		fmt.Println(string(msgStr))
	}

	return nil
}

// registerOperationContainerContainerUpdateParamFlags registers all flags needed to fill params
func registerOperationContainerContainerUpdateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationContainerContainerUpdateIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationContainerContainerUpdateUpdateParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationContainerContainerUpdateIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID or name of the container`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationContainerContainerUpdateUpdateParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var updateFlagName string
	if cmdPrefix == "" {
		updateFlagName = "update"
	} else {
		updateFlagName = fmt.Sprintf("%v.update", cmdPrefix)
	}

	exampleUpdateStr := "go-swagger TODO"
	_ = cmd.PersistentFlags().String(updateFlagName, "", fmt.Sprintf("Optional json string for [update] of form %v.", string(exampleUpdateStr)))

	// add flags for body
	if err := registerModelContainerUpdateBodyFlags(0, "containerUpdateBody", cmd); err != nil {
		return err
	}

	return nil
}

// register flags to command
func registerModelContainerUpdateBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	// register embedded models.Resources flags

	if err := registerModelResourcesFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	// inline allOf ContainerUpdateParamsBodyAO1 of type  is not supported by go-swagger cli yet

	return nil
}

// inline definition name ContainerUpdateParamsBodyAO1, type

func registerContainerUpdateBodyAnonContainerUpdateParamsBodyAO1RestartPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// inline allOf RestartPolicy of type models.RestartPolicy is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerUpdateBodyFlags(depth int, m *container.ContainerUpdateBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	// retrieve model models.Resources
	err, containerUpdateParamsBodyAO0Added := retrieveModelResourcesFlags(depth, &m.Resources, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || containerUpdateParamsBodyAO0Added

	// inline allOf ContainerUpdateParamsBodyAO1 is not supported by go-swagger cli yet

	return nil, retAdded
}

// register flags to command
func registerModelContainerUpdateOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerContainerUpdateOKBodyWarnings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerContainerUpdateOKBodyWarnings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Warnings []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelContainerUpdateOKBodyFlags(depth int, m *container.ContainerUpdateOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, warningsAdded := retrieveContainerUpdateOKBodyWarningsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || warningsAdded

	return nil, retAdded
}

func retrieveContainerUpdateOKBodyWarningsFlags(depth int, m *container.ContainerUpdateOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	warningsFlagName := fmt.Sprintf("%v.Warnings", cmdPrefix)
	if cmd.Flags().Changed(warningsFlagName) {
		// warning: Warnings array type []string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}
