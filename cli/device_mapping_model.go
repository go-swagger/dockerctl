// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelDeviceMappingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDeviceMappingCgroupPermissions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceMappingPathInContainer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDeviceMappingPathOnHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDeviceMappingCgroupPermissions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cgroupPermissionsDescription := ``

	var cgroupPermissionsFlagName string
	if cmdPrefix == "" {
		cgroupPermissionsFlagName = "CgroupPermissions"
	} else {
		cgroupPermissionsFlagName = fmt.Sprintf("%v.CgroupPermissions", cmdPrefix)
	}

	var cgroupPermissionsFlagDefault string

	_ = cmd.PersistentFlags().String(cgroupPermissionsFlagName, cgroupPermissionsFlagDefault, cgroupPermissionsDescription)

	return nil
}

func registerDeviceMappingPathInContainer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathInContainerDescription := ``

	var pathInContainerFlagName string
	if cmdPrefix == "" {
		pathInContainerFlagName = "PathInContainer"
	} else {
		pathInContainerFlagName = fmt.Sprintf("%v.PathInContainer", cmdPrefix)
	}

	var pathInContainerFlagDefault string

	_ = cmd.PersistentFlags().String(pathInContainerFlagName, pathInContainerFlagDefault, pathInContainerDescription)

	return nil
}

func registerDeviceMappingPathOnHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pathOnHostDescription := ``

	var pathOnHostFlagName string
	if cmdPrefix == "" {
		pathOnHostFlagName = "PathOnHost"
	} else {
		pathOnHostFlagName = fmt.Sprintf("%v.PathOnHost", cmdPrefix)
	}

	var pathOnHostFlagDefault string

	_ = cmd.PersistentFlags().String(pathOnHostFlagName, pathOnHostFlagDefault, pathOnHostDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDeviceMappingFlags(depth int, m *models.DeviceMapping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cgroupPermissionsAdded := retrieveDeviceMappingCgroupPermissionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cgroupPermissionsAdded

	err, pathInContainerAdded := retrieveDeviceMappingPathInContainerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathInContainerAdded

	err, pathOnHostAdded := retrieveDeviceMappingPathOnHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pathOnHostAdded

	return nil, retAdded
}

func retrieveDeviceMappingCgroupPermissionsFlags(depth int, m *models.DeviceMapping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cgroupPermissionsFlagName := fmt.Sprintf("%v.CgroupPermissions", cmdPrefix)
	if cmd.Flags().Changed(cgroupPermissionsFlagName) {

		var cgroupPermissionsFlagName string
		if cmdPrefix == "" {
			cgroupPermissionsFlagName = "CgroupPermissions"
		} else {
			cgroupPermissionsFlagName = fmt.Sprintf("%v.CgroupPermissions", cmdPrefix)
		}

		cgroupPermissionsFlagValue, err := cmd.Flags().GetString(cgroupPermissionsFlagName)
		if err != nil {
			return err, false
		}
		m.CgroupPermissions = cgroupPermissionsFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveDeviceMappingPathInContainerFlags(depth int, m *models.DeviceMapping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	pathInContainerFlagName := fmt.Sprintf("%v.PathInContainer", cmdPrefix)
	if cmd.Flags().Changed(pathInContainerFlagName) {

		var pathInContainerFlagName string
		if cmdPrefix == "" {
			pathInContainerFlagName = "PathInContainer"
		} else {
			pathInContainerFlagName = fmt.Sprintf("%v.PathInContainer", cmdPrefix)
		}

		pathInContainerFlagValue, err := cmd.Flags().GetString(pathInContainerFlagName)
		if err != nil {
			return err, false
		}
		m.PathInContainer = pathInContainerFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveDeviceMappingPathOnHostFlags(depth int, m *models.DeviceMapping, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	pathOnHostFlagName := fmt.Sprintf("%v.PathOnHost", cmdPrefix)
	if cmd.Flags().Changed(pathOnHostFlagName) {

		var pathOnHostFlagName string
		if cmdPrefix == "" {
			pathOnHostFlagName = "PathOnHost"
		} else {
			pathOnHostFlagName = fmt.Sprintf("%v.PathOnHost", cmdPrefix)
		}

		pathOnHostFlagValue, err := cmd.Flags().GetString(pathOnHostFlagName)
		if err != nil {
			return err, false
		}
		m.PathOnHost = pathOnHostFlagValue

		retAdded = true
	}
	return nil, retAdded
}
