// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/distribution"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDistributionDistributionInspectCmd returns a cmd to handle operation distributionInspect
func makeOperationDistributionDistributionInspectCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "DistributionInspect",
		Short: `Return image digest and platform information by contacting the registry.`,
		RunE:  runOperationDistributionDistributionInspect,
	}

	if err := registerOperationDistributionDistributionInspectParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDistributionDistributionInspect uses cmd flags to call endpoint api
func runOperationDistributionDistributionInspect(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := distribution.NewDistributionInspectParams()
	if err, _ := retrieveOperationDistributionDistributionInspectNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationDistributionDistributionInspectResult(appCli.Distribution.DistributionInspect(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationDistributionDistributionInspectParamFlags registers all flags needed to fill params
func registerOperationDistributionDistributionInspectParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDistributionDistributionInspectNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDistributionDistributionInspectNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. Image name or id`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func retrieveOperationDistributionDistributionInspectNameFlag(m *distribution.DistributionInspectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}

// parseOperationDistributionDistributionInspectResult parses request result and return the string content
func parseOperationDistributionDistributionInspectResult(resp0 *distribution.DistributionInspectOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*distribution.DistributionInspectOK)
		if ok {
			if !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*distribution.DistributionInspectUnauthorized)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*distribution.DistributionInspectInternalServerError)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelDistributionInspectDistributionInspectOKBodyDescriptorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDistributionInspectDistributionInspectOKBodyDescriptorDigest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectDistributionInspectOKBodyDescriptorMediaType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectDistributionInspectOKBodyDescriptorSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectDistributionInspectOKBodyDescriptorURLs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDistributionInspectDistributionInspectOKBodyDescriptorDigest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	digestDescription := ``

	var digestFlagName string
	if cmdPrefix == "" {
		digestFlagName = "Digest"
	} else {
		digestFlagName = fmt.Sprintf("%v.Digest", cmdPrefix)
	}

	var digestFlagDefault string

	_ = cmd.PersistentFlags().String(digestFlagName, digestFlagDefault, digestDescription)

	return nil
}

func registerDistributionInspectDistributionInspectOKBodyDescriptorMediaType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	mediaTypeDescription := ``

	var mediaTypeFlagName string
	if cmdPrefix == "" {
		mediaTypeFlagName = "MediaType"
	} else {
		mediaTypeFlagName = fmt.Sprintf("%v.MediaType", cmdPrefix)
	}

	var mediaTypeFlagDefault string

	_ = cmd.PersistentFlags().String(mediaTypeFlagName, mediaTypeFlagDefault, mediaTypeDescription)

	return nil
}

func registerDistributionInspectDistributionInspectOKBodyDescriptorSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sizeDescription := ``

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "Size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
	}

	var sizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

func registerDistributionInspectDistributionInspectOKBodyDescriptorURLs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: URLs []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDistributionInspectDistributionInspectOKBodyDescriptorFlags(depth int, m *distribution.DistributionInspectDistributionInspectOKBodyDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, digestAdded := retrieveDistributionInspectDistributionInspectOKBodyDescriptorDigestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || digestAdded

	err, mediaTypeAdded := retrieveDistributionInspectDistributionInspectOKBodyDescriptorMediaTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || mediaTypeAdded

	err, sizeAdded := retrieveDistributionInspectDistributionInspectOKBodyDescriptorSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sizeAdded

	err, uRLsAdded := retrieveDistributionInspectDistributionInspectOKBodyDescriptorURLsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uRLsAdded

	return nil, retAdded
}

func retrieveDistributionInspectDistributionInspectOKBodyDescriptorDigestFlags(depth int, m *distribution.DistributionInspectDistributionInspectOKBodyDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	digestFlagName := fmt.Sprintf("%v.Digest", cmdPrefix)
	if cmd.Flags().Changed(digestFlagName) {

		var digestFlagName string
		if cmdPrefix == "" {
			digestFlagName = "Digest"
		} else {
			digestFlagName = fmt.Sprintf("%v.Digest", cmdPrefix)
		}

		digestFlagValue, err := cmd.Flags().GetString(digestFlagName)
		if err != nil {
			return err, false
		}
		m.Digest = digestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectDistributionInspectOKBodyDescriptorMediaTypeFlags(depth int, m *distribution.DistributionInspectDistributionInspectOKBodyDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	mediaTypeFlagName := fmt.Sprintf("%v.MediaType", cmdPrefix)
	if cmd.Flags().Changed(mediaTypeFlagName) {

		var mediaTypeFlagName string
		if cmdPrefix == "" {
			mediaTypeFlagName = "MediaType"
		} else {
			mediaTypeFlagName = fmt.Sprintf("%v.MediaType", cmdPrefix)
		}

		mediaTypeFlagValue, err := cmd.Flags().GetString(mediaTypeFlagName)
		if err != nil {
			return err, false
		}
		m.MediaType = mediaTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectDistributionInspectOKBodyDescriptorSizeFlags(depth int, m *distribution.DistributionInspectDistributionInspectOKBodyDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sizeFlagName := fmt.Sprintf("%v.Size", cmdPrefix)
	if cmd.Flags().Changed(sizeFlagName) {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "Size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.Size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetInt64(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = sizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectDistributionInspectOKBodyDescriptorURLsFlags(depth int, m *distribution.DistributionInspectDistributionInspectOKBodyDescriptor, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uRLsFlagName := fmt.Sprintf("%v.URLs", cmdPrefix)
	if cmd.Flags().Changed(uRLsFlagName) {
		// warning: URLs array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// register flags to command
func registerModelDistributionInspectOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDistributionInspectOKBodyDescriptor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectOKBodyPlatforms(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDistributionInspectOKBodyDescriptor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var descriptorFlagName string
	if cmdPrefix == "" {
		descriptorFlagName = "Descriptor"
	} else {
		descriptorFlagName = fmt.Sprintf("%v.Descriptor", cmdPrefix)
	}

	if err := registerModelDistributionInspectDistributionInspectOKBodyDescriptorFlags(depth+1, descriptorFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDistributionInspectOKBodyPlatforms(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Platforms []*DistributionInspectPlatformsItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDistributionInspectOKBodyFlags(depth int, m *distribution.DistributionInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptorAdded := retrieveDistributionInspectOKBodyDescriptorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptorAdded

	err, platformsAdded := retrieveDistributionInspectOKBodyPlatformsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformsAdded

	return nil, retAdded
}

func retrieveDistributionInspectOKBodyDescriptorFlags(depth int, m *distribution.DistributionInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptorFlagName := fmt.Sprintf("%v.Descriptor", cmdPrefix)
	if cmd.Flags().Changed(descriptorFlagName) {
		// info: complex object Descriptor DistributionInspectDistributionInspectOKBodyDescriptor is retrieved outside this Changed() block
	}

	descriptorFlagValue := distribution.DistributionInspectDistributionInspectOKBodyDescriptor{}
	err, descriptorAdded := retrieveModelDistributionInspectDistributionInspectOKBodyDescriptorFlags(depth+1, &descriptorFlagValue, descriptorFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptorAdded
	if descriptorAdded {
		m.Descriptor = &descriptorFlagValue
	}

	return nil, retAdded
}

func retrieveDistributionInspectOKBodyPlatformsFlags(depth int, m *distribution.DistributionInspectOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	platformsFlagName := fmt.Sprintf("%v.Platforms", cmdPrefix)
	if cmd.Flags().Changed(platformsFlagName) {
		// warning: Platforms array type []*DistributionInspectPlatformsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// register flags to command
func registerModelDistributionInspectPlatformsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDistributionInspectPlatformsItems0Architecture(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectPlatformsItems0Features(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectPlatformsItems0OS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectPlatformsItems0OSFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectPlatformsItems0OSVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDistributionInspectPlatformsItems0Variant(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDistributionInspectPlatformsItems0Architecture(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	architectureDescription := ``

	var architectureFlagName string
	if cmdPrefix == "" {
		architectureFlagName = "Architecture"
	} else {
		architectureFlagName = fmt.Sprintf("%v.Architecture", cmdPrefix)
	}

	var architectureFlagDefault string

	_ = cmd.PersistentFlags().String(architectureFlagName, architectureFlagDefault, architectureDescription)

	return nil
}

func registerDistributionInspectPlatformsItems0Features(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Features []string array type is not supported by go-swagger cli yet

	return nil
}

func registerDistributionInspectPlatformsItems0OS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oSDescription := ``

	var oSFlagName string
	if cmdPrefix == "" {
		oSFlagName = "OS"
	} else {
		oSFlagName = fmt.Sprintf("%v.OS", cmdPrefix)
	}

	var oSFlagDefault string

	_ = cmd.PersistentFlags().String(oSFlagName, oSFlagDefault, oSDescription)

	return nil
}

func registerDistributionInspectPlatformsItems0OSFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: OSFeatures []string array type is not supported by go-swagger cli yet

	return nil
}

func registerDistributionInspectPlatformsItems0OSVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oSVersionDescription := ``

	var oSVersionFlagName string
	if cmdPrefix == "" {
		oSVersionFlagName = "OSVersion"
	} else {
		oSVersionFlagName = fmt.Sprintf("%v.OSVersion", cmdPrefix)
	}

	var oSVersionFlagDefault string

	_ = cmd.PersistentFlags().String(oSVersionFlagName, oSVersionFlagDefault, oSVersionDescription)

	return nil
}

func registerDistributionInspectPlatformsItems0Variant(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	variantDescription := ``

	var variantFlagName string
	if cmdPrefix == "" {
		variantFlagName = "Variant"
	} else {
		variantFlagName = fmt.Sprintf("%v.Variant", cmdPrefix)
	}

	var variantFlagDefault string

	_ = cmd.PersistentFlags().String(variantFlagName, variantFlagDefault, variantDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDistributionInspectPlatformsItems0Flags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, architectureAdded := retrieveDistributionInspectPlatformsItems0ArchitectureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || architectureAdded

	err, featuresAdded := retrieveDistributionInspectPlatformsItems0FeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded

	err, oSAdded := retrieveDistributionInspectPlatformsItems0OSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oSAdded

	err, oSFeaturesAdded := retrieveDistributionInspectPlatformsItems0OSFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oSFeaturesAdded

	err, oSVersionAdded := retrieveDistributionInspectPlatformsItems0OSVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oSVersionAdded

	err, variantAdded := retrieveDistributionInspectPlatformsItems0VariantFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || variantAdded

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0ArchitectureFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	architectureFlagName := fmt.Sprintf("%v.Architecture", cmdPrefix)
	if cmd.Flags().Changed(architectureFlagName) {

		var architectureFlagName string
		if cmdPrefix == "" {
			architectureFlagName = "Architecture"
		} else {
			architectureFlagName = fmt.Sprintf("%v.Architecture", cmdPrefix)
		}

		architectureFlagValue, err := cmd.Flags().GetString(architectureFlagName)
		if err != nil {
			return err, false
		}
		m.Architecture = architectureFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0FeaturesFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	featuresFlagName := fmt.Sprintf("%v.Features", cmdPrefix)
	if cmd.Flags().Changed(featuresFlagName) {
		// warning: Features array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0OSFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oSFlagName := fmt.Sprintf("%v.OS", cmdPrefix)
	if cmd.Flags().Changed(oSFlagName) {

		var oSFlagName string
		if cmdPrefix == "" {
			oSFlagName = "OS"
		} else {
			oSFlagName = fmt.Sprintf("%v.OS", cmdPrefix)
		}

		oSFlagValue, err := cmd.Flags().GetString(oSFlagName)
		if err != nil {
			return err, false
		}
		m.OS = oSFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0OSFeaturesFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oSFeaturesFlagName := fmt.Sprintf("%v.OSFeatures", cmdPrefix)
	if cmd.Flags().Changed(oSFeaturesFlagName) {
		// warning: OSFeatures array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0OSVersionFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oSVersionFlagName := fmt.Sprintf("%v.OSVersion", cmdPrefix)
	if cmd.Flags().Changed(oSVersionFlagName) {

		var oSVersionFlagName string
		if cmdPrefix == "" {
			oSVersionFlagName = "OSVersion"
		} else {
			oSVersionFlagName = fmt.Sprintf("%v.OSVersion", cmdPrefix)
		}

		oSVersionFlagValue, err := cmd.Flags().GetString(oSVersionFlagName)
		if err != nil {
			return err, false
		}
		m.OSVersion = oSVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDistributionInspectPlatformsItems0VariantFlags(depth int, m *distribution.DistributionInspectPlatformsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	variantFlagName := fmt.Sprintf("%v.Variant", cmdPrefix)
	if cmd.Flags().Changed(variantFlagName) {

		var variantFlagName string
		if cmdPrefix == "" {
			variantFlagName = "Variant"
		} else {
			variantFlagName = fmt.Sprintf("%v.Variant", cmdPrefix)
		}

		variantFlagValue, err := cmd.Flags().GetString(variantFlagName)
		if err != nil {
			return err, false
		}
		m.Variant = variantFlagValue

		retAdded = true
	}

	return nil, retAdded
}
