// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for EndpointPortConfig

// register flags to command
func registerModelEndpointPortConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointPortConfigName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointPortConfigProtocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointPortConfigPublishMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointPortConfigPublishedPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointPortConfigTargetPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointPortConfigName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerEndpointPortConfigProtocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protocolDescription := ``

	var protocolFlagName string
	if cmdPrefix == "" {
		protocolFlagName = "Protocol"
	} else {
		protocolFlagName = fmt.Sprintf("%v.Protocol", cmdPrefix)
	}

	var protocolFlagDefault string

	_ = cmd.PersistentFlags().String(protocolFlagName, protocolFlagDefault, protocolDescription)

	return nil
}

func registerEndpointPortConfigPublishMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publishModeDescription := `The mode in which port is published.

<p><br /></p>

- "ingress" makes the target port accessible on every node,
  regardless of whether there is a task for the service running on
  that node or not.
- "host" bypasses the routing mesh and publish the port directly on
  the swarm node where that service is running.
`

	var publishModeFlagName string
	if cmdPrefix == "" {
		publishModeFlagName = "PublishMode"
	} else {
		publishModeFlagName = fmt.Sprintf("%v.PublishMode", cmdPrefix)
	}

	var publishModeFlagDefault string = "ingress"

	_ = cmd.PersistentFlags().String(publishModeFlagName, publishModeFlagDefault, publishModeDescription)

	return nil
}

func registerEndpointPortConfigPublishedPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publishedPortDescription := `The port on the swarm hosts.`

	var publishedPortFlagName string
	if cmdPrefix == "" {
		publishedPortFlagName = "PublishedPort"
	} else {
		publishedPortFlagName = fmt.Sprintf("%v.PublishedPort", cmdPrefix)
	}

	var publishedPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(publishedPortFlagName, publishedPortFlagDefault, publishedPortDescription)

	return nil
}

func registerEndpointPortConfigTargetPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	targetPortDescription := `The port inside the container.`

	var targetPortFlagName string
	if cmdPrefix == "" {
		targetPortFlagName = "TargetPort"
	} else {
		targetPortFlagName = fmt.Sprintf("%v.TargetPort", cmdPrefix)
	}

	var targetPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(targetPortFlagName, targetPortFlagDefault, targetPortDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointPortConfigFlags(depth int, m *models.EndpointPortConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, nameAdded := retrieveEndpointPortConfigNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, protocolAdded := retrieveEndpointPortConfigProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protocolAdded

	err, publishModeAdded := retrieveEndpointPortConfigPublishModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publishModeAdded

	err, publishedPortAdded := retrieveEndpointPortConfigPublishedPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publishedPortAdded

	err, targetPortAdded := retrieveEndpointPortConfigTargetPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetPortAdded

	return nil, retAdded
}

func retrieveEndpointPortConfigNameFlags(depth int, m *models.EndpointPortConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveEndpointPortConfigProtocolFlags(depth int, m *models.EndpointPortConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	protocolFlagName := fmt.Sprintf("%v.Protocol", cmdPrefix)
	if cmd.Flags().Changed(protocolFlagName) {

		var protocolFlagName string
		if cmdPrefix == "" {
			protocolFlagName = "Protocol"
		} else {
			protocolFlagName = fmt.Sprintf("%v.Protocol", cmdPrefix)
		}

		protocolFlagValue, err := cmd.Flags().GetString(protocolFlagName)
		if err != nil {
			return err, false
		}
		m.Protocol = protocolFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveEndpointPortConfigPublishModeFlags(depth int, m *models.EndpointPortConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	publishModeFlagName := fmt.Sprintf("%v.PublishMode", cmdPrefix)
	if cmd.Flags().Changed(publishModeFlagName) {

		var publishModeFlagName string
		if cmdPrefix == "" {
			publishModeFlagName = "PublishMode"
		} else {
			publishModeFlagName = fmt.Sprintf("%v.PublishMode", cmdPrefix)
		}

		publishModeFlagValue, err := cmd.Flags().GetString(publishModeFlagName)
		if err != nil {
			return err, false
		}
		m.PublishMode = &publishModeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveEndpointPortConfigPublishedPortFlags(depth int, m *models.EndpointPortConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	publishedPortFlagName := fmt.Sprintf("%v.PublishedPort", cmdPrefix)
	if cmd.Flags().Changed(publishedPortFlagName) {

		var publishedPortFlagName string
		if cmdPrefix == "" {
			publishedPortFlagName = "PublishedPort"
		} else {
			publishedPortFlagName = fmt.Sprintf("%v.PublishedPort", cmdPrefix)
		}

		publishedPortFlagValue, err := cmd.Flags().GetInt64(publishedPortFlagName)
		if err != nil {
			return err, false
		}
		m.PublishedPort = publishedPortFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveEndpointPortConfigTargetPortFlags(depth int, m *models.EndpointPortConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	targetPortFlagName := fmt.Sprintf("%v.TargetPort", cmdPrefix)
	if cmd.Flags().Changed(targetPortFlagName) {

		var targetPortFlagName string
		if cmdPrefix == "" {
			targetPortFlagName = "TargetPort"
		} else {
			targetPortFlagName = fmt.Sprintf("%v.TargetPort", cmdPrefix)
		}

		targetPortFlagValue, err := cmd.Flags().GetInt64(targetPortFlagName)
		if err != nil {
			return err, false
		}
		m.TargetPort = targetPortFlagValue

		retAdded = true
	}
	return nil, retAdded
}
