// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for EndpointSpec

// register flags to command
func registerModelEndpointSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEndpointSpecMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEndpointSpecPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEndpointSpecMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modeDescription := `The mode of resolution to use for internal load balancing between tasks.
`

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "Mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.Mode", cmdPrefix)
	}

	var modeFlagDefault string = "vip"

	_ = cmd.PersistentFlags().String(modeFlagName, modeFlagDefault, modeDescription)

	return nil
}

func registerEndpointSpecPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Ports []*EndpointPortConfig array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEndpointSpecFlags(depth int, m *models.EndpointSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, modeAdded := retrieveEndpointSpecModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, portsAdded := retrieveEndpointSpecPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portsAdded

	return nil, retAdded
}

func retrieveEndpointSpecModeFlags(depth int, m *models.EndpointSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	modeFlagName := fmt.Sprintf("%v.Mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		var modeFlagName string
		if cmdPrefix == "" {
			modeFlagName = "Mode"
		} else {
			modeFlagName = fmt.Sprintf("%v.Mode", cmdPrefix)
		}

		modeFlagValue, err := cmd.Flags().GetString(modeFlagName)
		if err != nil {
			return err, false
		}
		m.Mode = &modeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveEndpointSpecPortsFlags(depth int, m *models.EndpointSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	portsFlagName := fmt.Sprintf("%v.Ports", cmdPrefix)
	if cmd.Flags().Changed(portsFlagName) {
		// warning: Ports array type []*EndpointPortConfig is not supported by go-swagger cli yet
	}
	return nil, retAdded
}
