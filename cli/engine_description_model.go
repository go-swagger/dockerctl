// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for EngineDescription

// register flags to command
func registerModelEngineDescriptionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEngineDescriptionEngineVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineDescriptionLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineDescriptionPlugins(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEngineDescriptionEngineVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	engineVersionDescription := ``

	var engineVersionFlagName string
	if cmdPrefix == "" {
		engineVersionFlagName = "EngineVersion"
	} else {
		engineVersionFlagName = fmt.Sprintf("%v.EngineVersion", cmdPrefix)
	}

	var engineVersionFlagDefault string

	_ = cmd.PersistentFlags().String(engineVersionFlagName, engineVersionFlagDefault, engineVersionDescription)

	return nil
}

func registerEngineDescriptionLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerEngineDescriptionPlugins(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Plugins []*EngineDescriptionPluginsItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEngineDescriptionFlags(depth int, m *models.EngineDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, engineVersionAdded := retrieveEngineDescriptionEngineVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || engineVersionAdded

	err, labelsAdded := retrieveEngineDescriptionLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	err, pluginsAdded := retrieveEngineDescriptionPluginsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pluginsAdded

	return nil, retAdded
}

func retrieveEngineDescriptionEngineVersionFlags(depth int, m *models.EngineDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	engineVersionFlagName := fmt.Sprintf("%v.EngineVersion", cmdPrefix)
	if cmd.Flags().Changed(engineVersionFlagName) {

		var engineVersionFlagName string
		if cmdPrefix == "" {
			engineVersionFlagName = "EngineVersion"
		} else {
			engineVersionFlagName = fmt.Sprintf("%v.EngineVersion", cmdPrefix)
		}

		engineVersionFlagValue, err := cmd.Flags().GetString(engineVersionFlagName)
		if err != nil {
			return err, false
		}
		m.EngineVersion = engineVersionFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveEngineDescriptionLabelsFlags(depth int, m *models.EngineDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	labelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveEngineDescriptionPluginsFlags(depth int, m *models.EngineDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	pluginsFlagName := fmt.Sprintf("%v.Plugins", cmdPrefix)
	if cmd.Flags().Changed(pluginsFlagName) {
		// warning: Plugins array type []*EngineDescriptionPluginsItems0 is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

// Extra schema cli for EngineDescriptionPluginsItems0

// register flags to command
func registerModelEngineDescriptionPluginsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEngineDescriptionPluginsItems0Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineDescriptionPluginsItems0Type(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEngineDescriptionPluginsItems0Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerEngineDescriptionPluginsItems0Type(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEngineDescriptionPluginsItems0Flags(depth int, m *models.EngineDescriptionPluginsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, nameAdded := retrieveEngineDescriptionPluginsItems0NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, typeAdded := retrieveEngineDescriptionPluginsItems0TypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveEngineDescriptionPluginsItems0NameFlags(depth int, m *models.EngineDescriptionPluginsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveEngineDescriptionPluginsItems0TypeFlags(depth int, m *models.EngineDescriptionPluginsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}
	return nil, retAdded
}
