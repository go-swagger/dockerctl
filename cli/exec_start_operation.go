// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/dockerctl/client/exec"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationExecExecStartCmd returns a cmd to handle operation execStart
func makeOperationExecExecStartCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "ExecStart",
		Short: `Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.`,
		RunE:  runOperationExecExecStart,
	}

	if err := registerOperationExecExecStartParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationExecExecStart uses cmd flags to call endpoint api
func runOperationExecExecStart(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := exec.NewExecStartParams()
	if err, _ := retrieveOperationExecExecStartExecStartConfigFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationExecExecStartIDFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationExecExecStartResult(appCli.Exec.ExecStart(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationExecExecStartExecStartConfigFlag(m *exec.ExecStartParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("execStartConfig") {
		// Read execStartConfig string from cmd and unmarshal
		execStartConfigValueStr, err := cmd.Flags().GetString("execStartConfig")
		if err != nil {
			return err, false
		}

		execStartConfigValue := exec.ExecStartBody{}
		if err := json.Unmarshal([]byte(execStartConfigValueStr), &execStartConfigValue); err != nil {
			return fmt.Errorf("cannot unmarshal execStartConfig string in ExecStartBody: %v", err), false
		}
		m.ExecStartConfig = execStartConfigValue
	}
	execStartConfigValueModel := m.ExecStartConfig
	if swag.IsZero(execStartConfigValueModel) {
		execStartConfigValueModel = exec.ExecStartBody{}
	}
	err, added := retrieveModelExecStartBodyFlags(0, &execStartConfigValueModel, "execStartBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.ExecStartConfig = execStartConfigValueModel
	}
	execStartConfigValueDebugBytes, err := json.Marshal(m.ExecStartConfig)
	if err != nil {
		return err, false
	}
	logDebugf("ExecStartConfig payload: %v", string(execStartConfigValueDebugBytes))
	return nil, retAdded
}
func retrieveOperationExecExecStartIDFlag(m *exec.ExecStartParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// printOperationExecExecStartResult prints output to stdout
func printOperationExecExecStartResult(resp0 *exec.ExecStartOK, respErr error) error {
	if respErr != nil {

		// Non schema case: warning execStartOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*exec.ExecStartNotFound)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*exec.ExecStartConflict)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		return respErr
	}

	// warning: non schema response execStartOK is not supported by go-swagger cli yet.

	return nil
}

// registerOperationExecExecStartParamFlags registers all flags needed to fill params
func registerOperationExecExecStartParamFlags(cmd *cobra.Command) error {
	if err := registerOperationExecExecStartExecStartConfigParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationExecExecStartIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationExecExecStartExecStartConfigParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var execStartConfigFlagName string
	if cmdPrefix == "" {
		execStartConfigFlagName = "execStartConfig"
	} else {
		execStartConfigFlagName = fmt.Sprintf("%v.execStartConfig", cmdPrefix)
	}

	exampleExecStartConfigStr := "go-swagger TODO"
	_ = cmd.PersistentFlags().String(execStartConfigFlagName, "", fmt.Sprintf("Optional json string for [execStartConfig] of form %v.", string(exampleExecStartConfigStr)))

	// add flags for body
	if err := registerModelExecStartBodyFlags(0, "execStartBody", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationExecExecStartIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Exec instance ID`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// register flags to command
func registerModelExecStartBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerExecStartBodyDetach(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecStartBodyTty(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerExecStartBodyDetach(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	detachDescription := `Detach from the command.`

	var detachFlagName string
	if cmdPrefix == "" {
		detachFlagName = "Detach"
	} else {
		detachFlagName = fmt.Sprintf("%v.Detach", cmdPrefix)
	}

	var detachFlagDefault bool

	_ = cmd.PersistentFlags().Bool(detachFlagName, detachFlagDefault, detachDescription)

	return nil
}

func registerExecStartBodyTty(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ttyDescription := `Allocate a pseudo-TTY.`

	var ttyFlagName string
	if cmdPrefix == "" {
		ttyFlagName = "Tty"
	} else {
		ttyFlagName = fmt.Sprintf("%v.Tty", cmdPrefix)
	}

	var ttyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ttyFlagName, ttyFlagDefault, ttyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelExecStartBodyFlags(depth int, m *exec.ExecStartBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, detachAdded := retrieveExecStartBodyDetachFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || detachAdded

	err, ttyAdded := retrieveExecStartBodyTtyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ttyAdded

	return nil, retAdded
}

func retrieveExecStartBodyDetachFlags(depth int, m *exec.ExecStartBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	detachFlagName := fmt.Sprintf("%v.Detach", cmdPrefix)
	if cmd.Flags().Changed(detachFlagName) {

		var detachFlagName string
		if cmdPrefix == "" {
			detachFlagName = "Detach"
		} else {
			detachFlagName = fmt.Sprintf("%v.Detach", cmdPrefix)
		}

		detachFlagValue, err := cmd.Flags().GetBool(detachFlagName)
		if err != nil {
			return err, false
		}
		m.Detach = detachFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveExecStartBodyTtyFlags(depth int, m *exec.ExecStartBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	ttyFlagName := fmt.Sprintf("%v.Tty", cmdPrefix)
	if cmd.Flags().Changed(ttyFlagName) {

		var ttyFlagName string
		if cmdPrefix == "" {
			ttyFlagName = "Tty"
		} else {
			ttyFlagName = fmt.Sprintf("%v.Tty", cmdPrefix)
		}

		ttyFlagValue, err := cmd.Flags().GetBool(ttyFlagName)
		if err != nil {
			return err, false
		}
		m.Tty = ttyFlagValue

		retAdded = true
	}
	return nil, retAdded
}
