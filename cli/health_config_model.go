// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelHealthConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerHealthConfigInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHealthConfigRetries(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHealthConfigStartPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHealthConfigTest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerHealthConfigTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerHealthConfigInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	intervalDescription := `The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.`

	var intervalFlagName string
	if cmdPrefix == "" {
		intervalFlagName = "Interval"
	} else {
		intervalFlagName = fmt.Sprintf("%v.Interval", cmdPrefix)
	}

	var intervalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(intervalFlagName, intervalFlagDefault, intervalDescription)

	return nil
}

func registerHealthConfigRetries(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retriesDescription := `The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.`

	var retriesFlagName string
	if cmdPrefix == "" {
		retriesFlagName = "Retries"
	} else {
		retriesFlagName = fmt.Sprintf("%v.Retries", cmdPrefix)
	}

	var retriesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(retriesFlagName, retriesFlagDefault, retriesDescription)

	return nil
}

func registerHealthConfigStartPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startPeriodDescription := `Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.`

	var startPeriodFlagName string
	if cmdPrefix == "" {
		startPeriodFlagName = "StartPeriod"
	} else {
		startPeriodFlagName = fmt.Sprintf("%v.StartPeriod", cmdPrefix)
	}

	var startPeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(startPeriodFlagName, startPeriodFlagDefault, startPeriodDescription)

	return nil
}

func registerHealthConfigTest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Test []string array type is not supported by go-swagger cli yet

	return nil
}

func registerHealthConfigTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeoutDescription := `The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit.`

	var timeoutFlagName string
	if cmdPrefix == "" {
		timeoutFlagName = "Timeout"
	} else {
		timeoutFlagName = fmt.Sprintf("%v.Timeout", cmdPrefix)
	}

	var timeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(timeoutFlagName, timeoutFlagDefault, timeoutDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelHealthConfigFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, intervalAdded := retrieveHealthConfigIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || intervalAdded

	err, retriesAdded := retrieveHealthConfigRetriesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retriesAdded

	err, startPeriodAdded := retrieveHealthConfigStartPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startPeriodAdded

	err, testAdded := retrieveHealthConfigTestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || testAdded

	err, timeoutAdded := retrieveHealthConfigTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeoutAdded

	return nil, retAdded
}

func retrieveHealthConfigIntervalFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	intervalFlagName := fmt.Sprintf("%v.Interval", cmdPrefix)
	if cmd.Flags().Changed(intervalFlagName) {

		var intervalFlagName string
		if cmdPrefix == "" {
			intervalFlagName = "Interval"
		} else {
			intervalFlagName = fmt.Sprintf("%v.Interval", cmdPrefix)
		}

		intervalFlagValue, err := cmd.Flags().GetInt64(intervalFlagName)
		if err != nil {
			return err, false
		}
		m.Interval = intervalFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveHealthConfigRetriesFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	retriesFlagName := fmt.Sprintf("%v.Retries", cmdPrefix)
	if cmd.Flags().Changed(retriesFlagName) {

		var retriesFlagName string
		if cmdPrefix == "" {
			retriesFlagName = "Retries"
		} else {
			retriesFlagName = fmt.Sprintf("%v.Retries", cmdPrefix)
		}

		retriesFlagValue, err := cmd.Flags().GetInt64(retriesFlagName)
		if err != nil {
			return err, false
		}
		m.Retries = retriesFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveHealthConfigStartPeriodFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	startPeriodFlagName := fmt.Sprintf("%v.StartPeriod", cmdPrefix)
	if cmd.Flags().Changed(startPeriodFlagName) {

		var startPeriodFlagName string
		if cmdPrefix == "" {
			startPeriodFlagName = "StartPeriod"
		} else {
			startPeriodFlagName = fmt.Sprintf("%v.StartPeriod", cmdPrefix)
		}

		startPeriodFlagValue, err := cmd.Flags().GetInt64(startPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.StartPeriod = startPeriodFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveHealthConfigTestFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	testFlagName := fmt.Sprintf("%v.Test", cmdPrefix)
	if cmd.Flags().Changed(testFlagName) {
		// warning: Test array type []string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveHealthConfigTimeoutFlags(depth int, m *models.HealthConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	timeoutFlagName := fmt.Sprintf("%v.Timeout", cmdPrefix)
	if cmd.Flags().Changed(timeoutFlagName) {

		var timeoutFlagName string
		if cmdPrefix == "" {
			timeoutFlagName = "Timeout"
		} else {
			timeoutFlagName = fmt.Sprintf("%v.Timeout", cmdPrefix)
		}

		timeoutFlagValue, err := cmd.Flags().GetInt64(timeoutFlagName)
		if err != nil {
			return err, false
		}
		m.Timeout = timeoutFlagValue

		retAdded = true
	}
	return nil, retAdded
}
