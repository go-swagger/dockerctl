// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/dockerctl/client/image"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationImageImageDeleteCmd returns a cmd to handle operation imageDelete
func makeOperationImageImageDeleteCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ImageDelete",
		Short: `Remove an image, along with any untagged parent images that were
referenced by that image.

Images can't be removed if they have descendant images, are being
used by a running container or are being used by a build.
`,
		RunE: runOperationImageImageDelete,
	}

	if err := registerOperationImageImageDeleteParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationImageImageDelete uses cmd flags to call endpoint api
func runOperationImageImageDelete(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := image.NewImageDeleteParams()
	if err, _ := retrieveOperationImageImageDeleteForceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageDeleteNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageDeleteNopruneFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationImageImageDeleteResult(appCli.Image.ImageDelete(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationImageImageDeleteForceFlag(m *image.ImageDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force") {

		var forceFlagName string
		if cmdPrefix == "" {
			forceFlagName = "force"
		} else {
			forceFlagName = fmt.Sprintf("%v.force", cmdPrefix)
		}

		forceFlagValue, err := cmd.Flags().GetBool(forceFlagName)
		if err != nil {
			return err, false
		}
		m.Force = &forceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageDeleteNameFlag(m *image.ImageDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImageImageDeleteNopruneFlag(m *image.ImageDeleteParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("noprune") {

		var nopruneFlagName string
		if cmdPrefix == "" {
			nopruneFlagName = "noprune"
		} else {
			nopruneFlagName = fmt.Sprintf("%v.noprune", cmdPrefix)
		}

		nopruneFlagValue, err := cmd.Flags().GetBool(nopruneFlagName)
		if err != nil {
			return err, false
		}
		m.Noprune = &nopruneFlagValue

	}
	return nil, retAdded
}

// printOperationImageImageDeleteResult prints output to stdout
func printOperationImageImageDeleteResult(resp0 *image.ImageDeleteOK, respErr error) error {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*image.ImageDeleteOK)
		if ok {
			if !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*image.ImageDeleteNotFound)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*image.ImageDeleteConflict)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*image.ImageDeleteInternalServerError)
		if ok {
			if !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		return respErr
	}

	if !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return err
		}
		fmt.Println(string(msgStr))
	}

	return nil
}

// registerOperationImageImageDeleteParamFlags registers all flags needed to fill params
func registerOperationImageImageDeleteParamFlags(cmd *cobra.Command) error {
	if err := registerOperationImageImageDeleteForceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageDeleteNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageDeleteNopruneParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationImageImageDeleteForceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceDescription := `Remove the image even if it is being used by stopped containers or has other tags`

	var forceFlagName string
	if cmdPrefix == "" {
		forceFlagName = "force"
	} else {
		forceFlagName = fmt.Sprintf("%v.force", cmdPrefix)
	}

	var forceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceFlagName, forceFlagDefault, forceDescription)

	return nil
}
func registerOperationImageImageDeleteNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. Image name or ID`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}
func registerOperationImageImageDeleteNopruneParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nopruneDescription := `Do not delete untagged parent images`

	var nopruneFlagName string
	if cmdPrefix == "" {
		nopruneFlagName = "noprune"
	} else {
		nopruneFlagName = fmt.Sprintf("%v.noprune", cmdPrefix)
	}

	var nopruneFlagDefault bool

	_ = cmd.PersistentFlags().Bool(nopruneFlagName, nopruneFlagDefault, nopruneDescription)

	return nil
}
