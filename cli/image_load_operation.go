// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/image"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationImageImageLoadCmd returns a cmd to handle operation imageLoad
func makeOperationImageImageLoadCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ImageLoad",
		Short: `Load a set of images and tags into a repository.

For details on the format, see [the export image endpoint](#operation/ImageGet).
`,
		RunE: runOperationImageImageLoad,
	}

	if err := registerOperationImageImageLoadParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationImageImageLoad uses cmd flags to call endpoint api
func runOperationImageImageLoad(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := image.NewImageLoadParams()
	if err, _ := retrieveOperationImageImageLoadImagesTarballFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImageImageLoadQuietFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationImageImageLoadResult(appCli.Image.ImageLoad(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationImageImageLoadParamFlags registers all flags needed to fill params
func registerOperationImageImageLoadParamFlags(cmd *cobra.Command) error {
	if err := registerOperationImageImageLoadImagesTarballParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImageImageLoadQuietParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationImageImageLoadImagesTarballParamFlags(cmdPrefix string, cmd *cobra.Command) error {
	// warning: go type io.ReadCloser is not supported by go-swagger cli yet.
	return nil
}
func registerOperationImageImageLoadQuietParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	quietDescription := `Suppress progress details during load.`

	var quietFlagName string
	if cmdPrefix == "" {
		quietFlagName = "quiet"
	} else {
		quietFlagName = fmt.Sprintf("%v.quiet", cmdPrefix)
	}

	var quietFlagDefault bool

	_ = cmd.PersistentFlags().Bool(quietFlagName, quietFlagDefault, quietDescription)

	return nil
}

func retrieveOperationImageImageLoadImagesTarballFlag(m *image.ImageLoadParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("imagesTarball") {
		// warning: io.ReadCloser is not supported by go-swagger cli yet
	}
	return nil, retAdded
}
func retrieveOperationImageImageLoadQuietFlag(m *image.ImageLoadParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("quiet") {

		var quietFlagName string
		if cmdPrefix == "" {
			quietFlagName = "quiet"
		} else {
			quietFlagName = fmt.Sprintf("%v.quiet", cmdPrefix)
		}

		quietFlagValue, err := cmd.Flags().GetBool(quietFlagName)
		if err != nil {
			return err, false
		}
		m.Quiet = &quietFlagValue

	}
	return nil, retAdded
}

// parseOperationImageImageLoadResult parses request result and return the string content
func parseOperationImageImageLoadResult(resp0 *image.ImageLoadOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning imageLoadOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*image.ImageLoadInternalServerError)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response imageLoadOK is not supported by go-swagger cli yet.

	return "", nil
}
