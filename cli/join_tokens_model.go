// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for JoinTokens

// register flags to command
func registerModelJoinTokensFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerJoinTokensManager(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJoinTokensWorker(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerJoinTokensManager(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	managerDescription := `The token managers can use to join the swarm.
`

	var managerFlagName string
	if cmdPrefix == "" {
		managerFlagName = "Manager"
	} else {
		managerFlagName = fmt.Sprintf("%v.Manager", cmdPrefix)
	}

	var managerFlagDefault string

	_ = cmd.PersistentFlags().String(managerFlagName, managerFlagDefault, managerDescription)

	return nil
}

func registerJoinTokensWorker(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workerDescription := `The token workers can use to join the swarm.
`

	var workerFlagName string
	if cmdPrefix == "" {
		workerFlagName = "Worker"
	} else {
		workerFlagName = fmt.Sprintf("%v.Worker", cmdPrefix)
	}

	var workerFlagDefault string

	_ = cmd.PersistentFlags().String(workerFlagName, workerFlagDefault, workerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelJoinTokensFlags(depth int, m *models.JoinTokens, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, managerAdded := retrieveJoinTokensManagerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || managerAdded

	err, workerAdded := retrieveJoinTokensWorkerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workerAdded

	return nil, retAdded
}

func retrieveJoinTokensManagerFlags(depth int, m *models.JoinTokens, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	managerFlagName := fmt.Sprintf("%v.Manager", cmdPrefix)
	if cmd.Flags().Changed(managerFlagName) {

		var managerFlagName string
		if cmdPrefix == "" {
			managerFlagName = "Manager"
		} else {
			managerFlagName = fmt.Sprintf("%v.Manager", cmdPrefix)
		}

		managerFlagValue, err := cmd.Flags().GetString(managerFlagName)
		if err != nil {
			return err, false
		}
		m.Manager = managerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJoinTokensWorkerFlags(depth int, m *models.JoinTokens, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workerFlagName := fmt.Sprintf("%v.Worker", cmdPrefix)
	if cmd.Flags().Changed(workerFlagName) {

		var workerFlagName string
		if cmdPrefix == "" {
			workerFlagName = "Worker"
		} else {
			workerFlagName = fmt.Sprintf("%v.Worker", cmdPrefix)
		}

		workerFlagValue, err := cmd.Flags().GetString(workerFlagName)
		if err != nil {
			return err, false
		}
		m.Worker = workerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
