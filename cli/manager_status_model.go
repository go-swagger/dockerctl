// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ManagerStatus

// register flags to command
func registerModelManagerStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerManagerStatusAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerManagerStatusLeader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerManagerStatusReachability(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerManagerStatusAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addrDescription := `The IP address and port at which the manager is reachable.
`

	var addrFlagName string
	if cmdPrefix == "" {
		addrFlagName = "Addr"
	} else {
		addrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
	}

	var addrFlagDefault string

	_ = cmd.PersistentFlags().String(addrFlagName, addrFlagDefault, addrDescription)

	return nil
}

func registerManagerStatusLeader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	leaderDescription := ``

	var leaderFlagName string
	if cmdPrefix == "" {
		leaderFlagName = "Leader"
	} else {
		leaderFlagName = fmt.Sprintf("%v.Leader", cmdPrefix)
	}

	var leaderFlagDefault bool

	_ = cmd.PersistentFlags().Bool(leaderFlagName, leaderFlagDefault, leaderDescription)

	return nil
}

func registerManagerStatusReachability(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive Reachability Reachability is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelManagerStatusFlags(depth int, m *models.ManagerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addrAdded := retrieveManagerStatusAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addrAdded

	err, leaderAdded := retrieveManagerStatusLeaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || leaderAdded

	err, reachabilityAdded := retrieveManagerStatusReachabilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || reachabilityAdded

	return nil, retAdded
}

func retrieveManagerStatusAddrFlags(depth int, m *models.ManagerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addrFlagName := fmt.Sprintf("%v.Addr", cmdPrefix)
	if cmd.Flags().Changed(addrFlagName) {

		var addrFlagName string
		if cmdPrefix == "" {
			addrFlagName = "Addr"
		} else {
			addrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
		}

		addrFlagValue, err := cmd.Flags().GetString(addrFlagName)
		if err != nil {
			return err, false
		}
		m.Addr = addrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveManagerStatusLeaderFlags(depth int, m *models.ManagerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	leaderFlagName := fmt.Sprintf("%v.Leader", cmdPrefix)
	if cmd.Flags().Changed(leaderFlagName) {

		var leaderFlagName string
		if cmdPrefix == "" {
			leaderFlagName = "Leader"
		} else {
			leaderFlagName = fmt.Sprintf("%v.Leader", cmdPrefix)
		}

		leaderFlagValue, err := cmd.Flags().GetBool(leaderFlagName)
		if err != nil {
			return err, false
		}
		m.Leader = &leaderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveManagerStatusReachabilityFlags(depth int, m *models.ManagerStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	reachabilityFlagName := fmt.Sprintf("%v.Reachability", cmdPrefix)
	if cmd.Flags().Changed(reachabilityFlagName) {

		// warning: primitive Reachability Reachability is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}
