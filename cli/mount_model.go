// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelMountFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMountBindOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountConsistency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountReadOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountSource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountTarget(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountTmpfsOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMountVolumeOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMountBindOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var bindOptionsFlagName string
	if cmdPrefix == "" {
		bindOptionsFlagName = "BindOptions"
	} else {
		bindOptionsFlagName = fmt.Sprintf("%v.BindOptions", cmdPrefix)
	}

	registerModelMountFlags(depth+1, bindOptionsFlagName, cmd)

	return nil
}

func registerMountConsistency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	consistencyDescription := `The consistency requirement for the mount: ` + "`" + `default` + "`" + `, ` + "`" + `consistent` + "`" + `, ` + "`" + `cached` + "`" + `, or ` + "`" + `delegated` + "`" + `.`

	var consistencyFlagName string
	if cmdPrefix == "" {
		consistencyFlagName = "Consistency"
	} else {
		consistencyFlagName = fmt.Sprintf("%v.Consistency", cmdPrefix)
	}

	var consistencyFlagDefault string

	_ = cmd.PersistentFlags().String(consistencyFlagName, consistencyFlagDefault, consistencyDescription)

	return nil
}

func registerMountReadOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readOnlyDescription := `Whether the mount should be read-only.`

	var readOnlyFlagName string
	if cmdPrefix == "" {
		readOnlyFlagName = "ReadOnly"
	} else {
		readOnlyFlagName = fmt.Sprintf("%v.ReadOnly", cmdPrefix)
	}

	var readOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(readOnlyFlagName, readOnlyFlagDefault, readOnlyDescription)

	return nil
}

func registerMountSource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sourceDescription := `Mount source (e.g. a volume name, a host path).`

	var sourceFlagName string
	if cmdPrefix == "" {
		sourceFlagName = "Source"
	} else {
		sourceFlagName = fmt.Sprintf("%v.Source", cmdPrefix)
	}

	var sourceFlagDefault string

	_ = cmd.PersistentFlags().String(sourceFlagName, sourceFlagDefault, sourceDescription)

	return nil
}

func registerMountTarget(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	targetDescription := `Container path.`

	var targetFlagName string
	if cmdPrefix == "" {
		targetFlagName = "Target"
	} else {
		targetFlagName = fmt.Sprintf("%v.Target", cmdPrefix)
	}

	var targetFlagDefault string

	_ = cmd.PersistentFlags().String(targetFlagName, targetFlagDefault, targetDescription)

	return nil
}

func registerMountTmpfsOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tmpfsOptionsFlagName string
	if cmdPrefix == "" {
		tmpfsOptionsFlagName = "TmpfsOptions"
	} else {
		tmpfsOptionsFlagName = fmt.Sprintf("%v.TmpfsOptions", cmdPrefix)
	}

	registerModelMountFlags(depth+1, tmpfsOptionsFlagName, cmd)

	return nil
}

func registerMountType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `The mount type. Available types:

- ` + "`" + `bind` + "`" + ` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
- ` + "`" + `volume` + "`" + ` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
- ` + "`" + `tmpfs` + "`" + ` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
- ` + "`" + `npipe` + "`" + ` Mounts a named pipe from the host into the container. Must exist prior to creating the container.
`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerMountVolumeOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var volumeOptionsFlagName string
	if cmdPrefix == "" {
		volumeOptionsFlagName = "VolumeOptions"
	} else {
		volumeOptionsFlagName = fmt.Sprintf("%v.VolumeOptions", cmdPrefix)
	}

	registerModelMountFlags(depth+1, volumeOptionsFlagName, cmd)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMountFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, bindOptionsAdded := retrieveMountBindOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bindOptionsAdded

	err, consistencyAdded := retrieveMountConsistencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || consistencyAdded

	err, readOnlyAdded := retrieveMountReadOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAdded

	err, sourceAdded := retrieveMountSourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sourceAdded

	err, targetAdded := retrieveMountTargetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetAdded

	err, tmpfsOptionsAdded := retrieveMountTmpfsOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tmpfsOptionsAdded

	err, typeAdded := retrieveMountTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, volumeOptionsAdded := retrieveMountVolumeOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || volumeOptionsAdded

	return nil, retAdded
}

func retrieveMountBindOptionsFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	bindOptionsFlagName := fmt.Sprintf("%v.BindOptions", cmdPrefix)
	if cmd.Flags().Changed(bindOptionsFlagName) {

		bindOptionsFlagValue := &models.Mount{}
		err, added := retrieveModelMountFlags(depth+1, bindOptionsFlagValue, bindOptionsFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveMountConsistencyFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	consistencyFlagName := fmt.Sprintf("%v.Consistency", cmdPrefix)
	if cmd.Flags().Changed(consistencyFlagName) {

		var consistencyFlagName string
		if cmdPrefix == "" {
			consistencyFlagName = "Consistency"
		} else {
			consistencyFlagName = fmt.Sprintf("%v.Consistency", cmdPrefix)
		}

		consistencyFlagValue, err := cmd.Flags().GetString(consistencyFlagName)
		if err != nil {
			return err, false
		}
		m.Consistency = consistencyFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveMountReadOnlyFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	readOnlyFlagName := fmt.Sprintf("%v.ReadOnly", cmdPrefix)
	if cmd.Flags().Changed(readOnlyFlagName) {

		var readOnlyFlagName string
		if cmdPrefix == "" {
			readOnlyFlagName = "ReadOnly"
		} else {
			readOnlyFlagName = fmt.Sprintf("%v.ReadOnly", cmdPrefix)
		}

		readOnlyFlagValue, err := cmd.Flags().GetBool(readOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.ReadOnly = readOnlyFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveMountSourceFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	sourceFlagName := fmt.Sprintf("%v.Source", cmdPrefix)
	if cmd.Flags().Changed(sourceFlagName) {

		var sourceFlagName string
		if cmdPrefix == "" {
			sourceFlagName = "Source"
		} else {
			sourceFlagName = fmt.Sprintf("%v.Source", cmdPrefix)
		}

		sourceFlagValue, err := cmd.Flags().GetString(sourceFlagName)
		if err != nil {
			return err, false
		}
		m.Source = sourceFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveMountTargetFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	targetFlagName := fmt.Sprintf("%v.Target", cmdPrefix)
	if cmd.Flags().Changed(targetFlagName) {

		var targetFlagName string
		if cmdPrefix == "" {
			targetFlagName = "Target"
		} else {
			targetFlagName = fmt.Sprintf("%v.Target", cmdPrefix)
		}

		targetFlagValue, err := cmd.Flags().GetString(targetFlagName)
		if err != nil {
			return err, false
		}
		m.Target = targetFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveMountTmpfsOptionsFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	tmpfsOptionsFlagName := fmt.Sprintf("%v.TmpfsOptions", cmdPrefix)
	if cmd.Flags().Changed(tmpfsOptionsFlagName) {

		tmpfsOptionsFlagValue := &models.Mount{}
		err, added := retrieveModelMountFlags(depth+1, tmpfsOptionsFlagValue, tmpfsOptionsFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveMountTypeFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveMountVolumeOptionsFlags(depth int, m *models.Mount, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	volumeOptionsFlagName := fmt.Sprintf("%v.VolumeOptions", cmdPrefix)
	if cmd.Flags().Changed(volumeOptionsFlagName) {

		volumeOptionsFlagValue := &models.Mount{}
		err, added := retrieveModelMountFlags(depth+1, volumeOptionsFlagValue, volumeOptionsFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}
