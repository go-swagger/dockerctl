// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for NetworkAttachmentConfig

// register flags to command
func registerModelNetworkAttachmentConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNetworkAttachmentConfigAliases(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkAttachmentConfigDriverOpts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkAttachmentConfigTarget(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkAttachmentConfigAliases(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Aliases []string array type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkAttachmentConfigDriverOpts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: DriverOpts map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkAttachmentConfigTarget(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	targetDescription := `The target network for attachment. Must be a network name or ID.`

	var targetFlagName string
	if cmdPrefix == "" {
		targetFlagName = "Target"
	} else {
		targetFlagName = fmt.Sprintf("%v.Target", cmdPrefix)
	}

	var targetFlagDefault string

	_ = cmd.PersistentFlags().String(targetFlagName, targetFlagDefault, targetDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNetworkAttachmentConfigFlags(depth int, m *models.NetworkAttachmentConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, aliasesAdded := retrieveNetworkAttachmentConfigAliasesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aliasesAdded

	err, driverOptsAdded := retrieveNetworkAttachmentConfigDriverOptsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || driverOptsAdded

	err, targetAdded := retrieveNetworkAttachmentConfigTargetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetAdded

	return nil, retAdded
}

func retrieveNetworkAttachmentConfigAliasesFlags(depth int, m *models.NetworkAttachmentConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	aliasesFlagName := fmt.Sprintf("%v.Aliases", cmdPrefix)
	if cmd.Flags().Changed(aliasesFlagName) {
		// warning: Aliases array type []string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveNetworkAttachmentConfigDriverOptsFlags(depth int, m *models.NetworkAttachmentConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	driverOptsFlagName := fmt.Sprintf("%v.DriverOpts", cmdPrefix)
	if cmd.Flags().Changed(driverOptsFlagName) {
		// warning: DriverOpts map type map[string]string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveNetworkAttachmentConfigTargetFlags(depth int, m *models.NetworkAttachmentConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	targetFlagName := fmt.Sprintf("%v.Target", cmdPrefix)
	if cmd.Flags().Changed(targetFlagName) {

		var targetFlagName string
		if cmdPrefix == "" {
			targetFlagName = "Target"
		} else {
			targetFlagName = fmt.Sprintf("%v.Target", cmdPrefix)
		}

		targetFlagValue, err := cmd.Flags().GetString(targetFlagName)
		if err != nil {
			return err, false
		}
		m.Target = targetFlagValue

		retAdded = true
	}
	return nil, retAdded
}
