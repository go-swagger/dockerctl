// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for NetworkContainer

// register flags to command
func registerModelNetworkContainerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNetworkContainerEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkContainerIPV4Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkContainerIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkContainerMacAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkContainerName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkContainerEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointIdDescription := ``

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "EndpointID"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
	}

	var endpointIdFlagDefault string

	_ = cmd.PersistentFlags().String(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}

func registerNetworkContainerIPV4Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipv4AddressDescription := ``

	var ipv4AddressFlagName string
	if cmdPrefix == "" {
		ipv4AddressFlagName = "IPv4Address"
	} else {
		ipv4AddressFlagName = fmt.Sprintf("%v.IPv4Address", cmdPrefix)
	}

	var ipv4AddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipv4AddressFlagName, ipv4AddressFlagDefault, ipv4AddressDescription)

	return nil
}

func registerNetworkContainerIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipv6AddressDescription := ``

	var ipv6AddressFlagName string
	if cmdPrefix == "" {
		ipv6AddressFlagName = "IPv6Address"
	} else {
		ipv6AddressFlagName = fmt.Sprintf("%v.IPv6Address", cmdPrefix)
	}

	var ipv6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipv6AddressFlagName, ipv6AddressFlagDefault, ipv6AddressDescription)

	return nil
}

func registerNetworkContainerMacAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macAddressDescription := ``

	var macAddressFlagName string
	if cmdPrefix == "" {
		macAddressFlagName = "MacAddress"
	} else {
		macAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
	}

	var macAddressFlagDefault string

	_ = cmd.PersistentFlags().String(macAddressFlagName, macAddressFlagDefault, macAddressDescription)

	return nil
}

func registerNetworkContainerName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNetworkContainerFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endpointIdAdded := retrieveNetworkContainerEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointIdAdded

	err, ipv4AddressAdded := retrieveNetworkContainerIPV4AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipv4AddressAdded

	err, ipv6AddressAdded := retrieveNetworkContainerIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipv6AddressAdded

	err, macAddressAdded := retrieveNetworkContainerMacAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAddressAdded

	err, nameAdded := retrieveNetworkContainerNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveNetworkContainerEndpointIDFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointIdFlagName := fmt.Sprintf("%v.EndpointID", cmdPrefix)
	if cmd.Flags().Changed(endpointIdFlagName) {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "EndpointID"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetString(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkContainerIPV4AddressFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipv4AddressFlagName := fmt.Sprintf("%v.IPv4Address", cmdPrefix)
	if cmd.Flags().Changed(ipv4AddressFlagName) {

		var ipv4AddressFlagName string
		if cmdPrefix == "" {
			ipv4AddressFlagName = "IPv4Address"
		} else {
			ipv4AddressFlagName = fmt.Sprintf("%v.IPv4Address", cmdPrefix)
		}

		ipv4AddressFlagValue, err := cmd.Flags().GetString(ipv4AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4Address = ipv4AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkContainerIPV6AddressFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipv6AddressFlagName := fmt.Sprintf("%v.IPv6Address", cmdPrefix)
	if cmd.Flags().Changed(ipv6AddressFlagName) {

		var ipv6AddressFlagName string
		if cmdPrefix == "" {
			ipv6AddressFlagName = "IPv6Address"
		} else {
			ipv6AddressFlagName = fmt.Sprintf("%v.IPv6Address", cmdPrefix)
		}

		ipv6AddressFlagValue, err := cmd.Flags().GetString(ipv6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Address = ipv6AddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkContainerMacAddressFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	macAddressFlagName := fmt.Sprintf("%v.MacAddress", cmdPrefix)
	if cmd.Flags().Changed(macAddressFlagName) {

		var macAddressFlagName string
		if cmdPrefix == "" {
			macAddressFlagName = "MacAddress"
		} else {
			macAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
		}

		macAddressFlagValue, err := cmd.Flags().GetString(macAddressFlagName)
		if err != nil {
			return err, false
		}
		m.MacAddress = macAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNetworkContainerNameFlags(depth int, m *models.NetworkContainer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
