// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelNetworkSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNetworkSettingsBridge(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsEndpointID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsGateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsGlobalIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsGlobalIPV6PrefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsHairpinMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsIPAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsIPPrefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsIPV6Gateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsLinkLocalIPV6Address(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsLinkLocalIPV6PrefixLen(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsMacAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsNetworks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsSandboxID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsSandboxKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsSecondaryIPAddresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNetworkSettingsSecondaryIPV6Addresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNetworkSettingsBridge(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bridgeDescription := `Name of the network'a bridge (for example, ` + "`" + `docker0` + "`" + `).`

	var bridgeFlagName string
	if cmdPrefix == "" {
		bridgeFlagName = "Bridge"
	} else {
		bridgeFlagName = fmt.Sprintf("%v.Bridge", cmdPrefix)
	}

	var bridgeFlagDefault string

	_ = cmd.PersistentFlags().String(bridgeFlagName, bridgeFlagDefault, bridgeDescription)

	return nil
}

func registerNetworkSettingsEndpointID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointIdDescription := `EndpointID uniquely represents a service endpoint in a Sandbox.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var endpointIdFlagName string
	if cmdPrefix == "" {
		endpointIdFlagName = "EndpointID"
	} else {
		endpointIdFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
	}

	var endpointIdFlagDefault string

	_ = cmd.PersistentFlags().String(endpointIdFlagName, endpointIdFlagDefault, endpointIdDescription)

	return nil
}

func registerNetworkSettingsGateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gatewayDescription := `Gateway address for the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var gatewayFlagName string
	if cmdPrefix == "" {
		gatewayFlagName = "Gateway"
	} else {
		gatewayFlagName = fmt.Sprintf("%v.Gateway", cmdPrefix)
	}

	var gatewayFlagDefault string

	_ = cmd.PersistentFlags().String(gatewayFlagName, gatewayFlagDefault, gatewayDescription)

	return nil
}

func registerNetworkSettingsGlobalIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	globalIpv6AddressDescription := `Global IPv6 address for the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var globalIpv6AddressFlagName string
	if cmdPrefix == "" {
		globalIpv6AddressFlagName = "GlobalIPv6Address"
	} else {
		globalIpv6AddressFlagName = fmt.Sprintf("%v.GlobalIPv6Address", cmdPrefix)
	}

	var globalIpv6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(globalIpv6AddressFlagName, globalIpv6AddressFlagDefault, globalIpv6AddressDescription)

	return nil
}

func registerNetworkSettingsGlobalIPV6PrefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	globalIpv6PrefixLenDescription := `Mask length of the global IPv6 address.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var globalIpv6PrefixLenFlagName string
	if cmdPrefix == "" {
		globalIpv6PrefixLenFlagName = "GlobalIPv6PrefixLen"
	} else {
		globalIpv6PrefixLenFlagName = fmt.Sprintf("%v.GlobalIPv6PrefixLen", cmdPrefix)
	}

	var globalIpv6PrefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(globalIpv6PrefixLenFlagName, globalIpv6PrefixLenFlagDefault, globalIpv6PrefixLenDescription)

	return nil
}

func registerNetworkSettingsHairpinMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hairpinModeDescription := `Indicates if hairpin NAT should be enabled on the virtual interface.
`

	var hairpinModeFlagName string
	if cmdPrefix == "" {
		hairpinModeFlagName = "HairpinMode"
	} else {
		hairpinModeFlagName = fmt.Sprintf("%v.HairpinMode", cmdPrefix)
	}

	var hairpinModeFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hairpinModeFlagName, hairpinModeFlagDefault, hairpinModeDescription)

	return nil
}

func registerNetworkSettingsIPAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipAddressDescription := `IPv4 address for the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var ipAddressFlagName string
	if cmdPrefix == "" {
		ipAddressFlagName = "IPAddress"
	} else {
		ipAddressFlagName = fmt.Sprintf("%v.IPAddress", cmdPrefix)
	}

	var ipAddressFlagDefault string

	_ = cmd.PersistentFlags().String(ipAddressFlagName, ipAddressFlagDefault, ipAddressDescription)

	return nil
}

func registerNetworkSettingsIPPrefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipPrefixLenDescription := `Mask length of the IPv4 address.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var ipPrefixLenFlagName string
	if cmdPrefix == "" {
		ipPrefixLenFlagName = "IPPrefixLen"
	} else {
		ipPrefixLenFlagName = fmt.Sprintf("%v.IPPrefixLen", cmdPrefix)
	}

	var ipPrefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ipPrefixLenFlagName, ipPrefixLenFlagDefault, ipPrefixLenDescription)

	return nil
}

func registerNetworkSettingsIPV6Gateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipv6GatewayDescription := `IPv6 gateway address for this network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var ipv6GatewayFlagName string
	if cmdPrefix == "" {
		ipv6GatewayFlagName = "IPv6Gateway"
	} else {
		ipv6GatewayFlagName = fmt.Sprintf("%v.IPv6Gateway", cmdPrefix)
	}

	var ipv6GatewayFlagDefault string

	_ = cmd.PersistentFlags().String(ipv6GatewayFlagName, ipv6GatewayFlagDefault, ipv6GatewayDescription)

	return nil
}

func registerNetworkSettingsLinkLocalIPV6Address(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	linkLocalIpv6AddressDescription := `IPv6 unicast address using the link-local prefix.`

	var linkLocalIpv6AddressFlagName string
	if cmdPrefix == "" {
		linkLocalIpv6AddressFlagName = "LinkLocalIPv6Address"
	} else {
		linkLocalIpv6AddressFlagName = fmt.Sprintf("%v.LinkLocalIPv6Address", cmdPrefix)
	}

	var linkLocalIpv6AddressFlagDefault string

	_ = cmd.PersistentFlags().String(linkLocalIpv6AddressFlagName, linkLocalIpv6AddressFlagDefault, linkLocalIpv6AddressDescription)

	return nil
}

func registerNetworkSettingsLinkLocalIPV6PrefixLen(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	linkLocalIpv6PrefixLenDescription := `Prefix length of the IPv6 unicast address.`

	var linkLocalIpv6PrefixLenFlagName string
	if cmdPrefix == "" {
		linkLocalIpv6PrefixLenFlagName = "LinkLocalIPv6PrefixLen"
	} else {
		linkLocalIpv6PrefixLenFlagName = fmt.Sprintf("%v.LinkLocalIPv6PrefixLen", cmdPrefix)
	}

	var linkLocalIpv6PrefixLenFlagDefault int64

	_ = cmd.PersistentFlags().Int64(linkLocalIpv6PrefixLenFlagName, linkLocalIpv6PrefixLenFlagDefault, linkLocalIpv6PrefixLenDescription)

	return nil
}

func registerNetworkSettingsMacAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	macAddressDescription := `MAC address for the container on the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the ` + "`" + `Networks` + "`" + ` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
`

	var macAddressFlagName string
	if cmdPrefix == "" {
		macAddressFlagName = "MacAddress"
	} else {
		macAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
	}

	var macAddressFlagDefault string

	_ = cmd.PersistentFlags().String(macAddressFlagName, macAddressFlagDefault, macAddressDescription)

	return nil
}

func registerNetworkSettingsNetworks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Networks map[string]EndpointSettings map type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkSettingsPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Ports PortMap map type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkSettingsSandboxID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sandboxIdDescription := `SandboxID uniquely represents a container's network stack.`

	var sandboxIdFlagName string
	if cmdPrefix == "" {
		sandboxIdFlagName = "SandboxID"
	} else {
		sandboxIdFlagName = fmt.Sprintf("%v.SandboxID", cmdPrefix)
	}

	var sandboxIdFlagDefault string

	_ = cmd.PersistentFlags().String(sandboxIdFlagName, sandboxIdFlagDefault, sandboxIdDescription)

	return nil
}

func registerNetworkSettingsSandboxKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sandboxKeyDescription := `SandboxKey identifies the sandbox`

	var sandboxKeyFlagName string
	if cmdPrefix == "" {
		sandboxKeyFlagName = "SandboxKey"
	} else {
		sandboxKeyFlagName = fmt.Sprintf("%v.SandboxKey", cmdPrefix)
	}

	var sandboxKeyFlagDefault string

	_ = cmd.PersistentFlags().String(sandboxKeyFlagName, sandboxKeyFlagDefault, sandboxKeyDescription)

	return nil
}

func registerNetworkSettingsSecondaryIPAddresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: SecondaryIPAddresses []*Address array type is not supported by go-swagger cli yet

	return nil
}

func registerNetworkSettingsSecondaryIPV6Addresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: SecondaryIPv6Addresses []*Address array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNetworkSettingsFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, bridgeAdded := retrieveNetworkSettingsBridgeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bridgeAdded

	err, endpointIdAdded := retrieveNetworkSettingsEndpointIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointIdAdded

	err, gatewayAdded := retrieveNetworkSettingsGatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gatewayAdded

	err, globalIpv6AddressAdded := retrieveNetworkSettingsGlobalIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalIpv6AddressAdded

	err, globalIpv6PrefixLenAdded := retrieveNetworkSettingsGlobalIPV6PrefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || globalIpv6PrefixLenAdded

	err, hairpinModeAdded := retrieveNetworkSettingsHairpinModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hairpinModeAdded

	err, ipAddressAdded := retrieveNetworkSettingsIPAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAddressAdded

	err, ipPrefixLenAdded := retrieveNetworkSettingsIPPrefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipPrefixLenAdded

	err, ipv6GatewayAdded := retrieveNetworkSettingsIPV6GatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipv6GatewayAdded

	err, linkLocalIpv6AddressAdded := retrieveNetworkSettingsLinkLocalIPV6AddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linkLocalIpv6AddressAdded

	err, linkLocalIpv6PrefixLenAdded := retrieveNetworkSettingsLinkLocalIPV6PrefixLenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || linkLocalIpv6PrefixLenAdded

	err, macAddressAdded := retrieveNetworkSettingsMacAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || macAddressAdded

	err, networksAdded := retrieveNetworkSettingsNetworksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networksAdded

	err, portsAdded := retrieveNetworkSettingsPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portsAdded

	err, sandboxIdAdded := retrieveNetworkSettingsSandboxIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sandboxIdAdded

	err, sandboxKeyAdded := retrieveNetworkSettingsSandboxKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sandboxKeyAdded

	err, secondaryIpAddressesAdded := retrieveNetworkSettingsSecondaryIPAddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || secondaryIpAddressesAdded

	err, secondaryIpv6AddressesAdded := retrieveNetworkSettingsSecondaryIPV6AddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || secondaryIpv6AddressesAdded

	return nil, retAdded
}

func retrieveNetworkSettingsBridgeFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	bridgeFlagName := fmt.Sprintf("%v.Bridge", cmdPrefix)
	if cmd.Flags().Changed(bridgeFlagName) {

		var bridgeFlagName string
		if cmdPrefix == "" {
			bridgeFlagName = "Bridge"
		} else {
			bridgeFlagName = fmt.Sprintf("%v.Bridge", cmdPrefix)
		}

		bridgeFlagValue, err := cmd.Flags().GetString(bridgeFlagName)
		if err != nil {
			return err, false
		}
		m.Bridge = bridgeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsEndpointIDFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	endpointIdFlagName := fmt.Sprintf("%v.EndpointID", cmdPrefix)
	if cmd.Flags().Changed(endpointIdFlagName) {

		var endpointIdFlagName string
		if cmdPrefix == "" {
			endpointIdFlagName = "EndpointID"
		} else {
			endpointIdFlagName = fmt.Sprintf("%v.EndpointID", cmdPrefix)
		}

		endpointIdFlagValue, err := cmd.Flags().GetString(endpointIdFlagName)
		if err != nil {
			return err, false
		}
		m.EndpointID = endpointIdFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsGatewayFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	gatewayFlagName := fmt.Sprintf("%v.Gateway", cmdPrefix)
	if cmd.Flags().Changed(gatewayFlagName) {

		var gatewayFlagName string
		if cmdPrefix == "" {
			gatewayFlagName = "Gateway"
		} else {
			gatewayFlagName = fmt.Sprintf("%v.Gateway", cmdPrefix)
		}

		gatewayFlagValue, err := cmd.Flags().GetString(gatewayFlagName)
		if err != nil {
			return err, false
		}
		m.Gateway = gatewayFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsGlobalIPV6AddressFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	globalIpv6AddressFlagName := fmt.Sprintf("%v.GlobalIPv6Address", cmdPrefix)
	if cmd.Flags().Changed(globalIpv6AddressFlagName) {

		var globalIpv6AddressFlagName string
		if cmdPrefix == "" {
			globalIpv6AddressFlagName = "GlobalIPv6Address"
		} else {
			globalIpv6AddressFlagName = fmt.Sprintf("%v.GlobalIPv6Address", cmdPrefix)
		}

		globalIpv6AddressFlagValue, err := cmd.Flags().GetString(globalIpv6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.GlobalIPV6Address = globalIpv6AddressFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsGlobalIPV6PrefixLenFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	globalIpv6PrefixLenFlagName := fmt.Sprintf("%v.GlobalIPv6PrefixLen", cmdPrefix)
	if cmd.Flags().Changed(globalIpv6PrefixLenFlagName) {

		var globalIpv6PrefixLenFlagName string
		if cmdPrefix == "" {
			globalIpv6PrefixLenFlagName = "GlobalIPv6PrefixLen"
		} else {
			globalIpv6PrefixLenFlagName = fmt.Sprintf("%v.GlobalIPv6PrefixLen", cmdPrefix)
		}

		globalIpv6PrefixLenFlagValue, err := cmd.Flags().GetInt64(globalIpv6PrefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.GlobalIPV6PrefixLen = globalIpv6PrefixLenFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsHairpinModeFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	hairpinModeFlagName := fmt.Sprintf("%v.HairpinMode", cmdPrefix)
	if cmd.Flags().Changed(hairpinModeFlagName) {

		var hairpinModeFlagName string
		if cmdPrefix == "" {
			hairpinModeFlagName = "HairpinMode"
		} else {
			hairpinModeFlagName = fmt.Sprintf("%v.HairpinMode", cmdPrefix)
		}

		hairpinModeFlagValue, err := cmd.Flags().GetBool(hairpinModeFlagName)
		if err != nil {
			return err, false
		}
		m.HairpinMode = hairpinModeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsIPAddressFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	ipAddressFlagName := fmt.Sprintf("%v.IPAddress", cmdPrefix)
	if cmd.Flags().Changed(ipAddressFlagName) {

		var ipAddressFlagName string
		if cmdPrefix == "" {
			ipAddressFlagName = "IPAddress"
		} else {
			ipAddressFlagName = fmt.Sprintf("%v.IPAddress", cmdPrefix)
		}

		ipAddressFlagValue, err := cmd.Flags().GetString(ipAddressFlagName)
		if err != nil {
			return err, false
		}
		m.IPAddress = ipAddressFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsIPPrefixLenFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	ipPrefixLenFlagName := fmt.Sprintf("%v.IPPrefixLen", cmdPrefix)
	if cmd.Flags().Changed(ipPrefixLenFlagName) {

		var ipPrefixLenFlagName string
		if cmdPrefix == "" {
			ipPrefixLenFlagName = "IPPrefixLen"
		} else {
			ipPrefixLenFlagName = fmt.Sprintf("%v.IPPrefixLen", cmdPrefix)
		}

		ipPrefixLenFlagValue, err := cmd.Flags().GetInt64(ipPrefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.IPPrefixLen = ipPrefixLenFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsIPV6GatewayFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	ipv6GatewayFlagName := fmt.Sprintf("%v.IPv6Gateway", cmdPrefix)
	if cmd.Flags().Changed(ipv6GatewayFlagName) {

		var ipv6GatewayFlagName string
		if cmdPrefix == "" {
			ipv6GatewayFlagName = "IPv6Gateway"
		} else {
			ipv6GatewayFlagName = fmt.Sprintf("%v.IPv6Gateway", cmdPrefix)
		}

		ipv6GatewayFlagValue, err := cmd.Flags().GetString(ipv6GatewayFlagName)
		if err != nil {
			return err, false
		}
		m.IPV6Gateway = ipv6GatewayFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsLinkLocalIPV6AddressFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	linkLocalIpv6AddressFlagName := fmt.Sprintf("%v.LinkLocalIPv6Address", cmdPrefix)
	if cmd.Flags().Changed(linkLocalIpv6AddressFlagName) {

		var linkLocalIpv6AddressFlagName string
		if cmdPrefix == "" {
			linkLocalIpv6AddressFlagName = "LinkLocalIPv6Address"
		} else {
			linkLocalIpv6AddressFlagName = fmt.Sprintf("%v.LinkLocalIPv6Address", cmdPrefix)
		}

		linkLocalIpv6AddressFlagValue, err := cmd.Flags().GetString(linkLocalIpv6AddressFlagName)
		if err != nil {
			return err, false
		}
		m.LinkLocalIPV6Address = linkLocalIpv6AddressFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsLinkLocalIPV6PrefixLenFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	linkLocalIpv6PrefixLenFlagName := fmt.Sprintf("%v.LinkLocalIPv6PrefixLen", cmdPrefix)
	if cmd.Flags().Changed(linkLocalIpv6PrefixLenFlagName) {

		var linkLocalIpv6PrefixLenFlagName string
		if cmdPrefix == "" {
			linkLocalIpv6PrefixLenFlagName = "LinkLocalIPv6PrefixLen"
		} else {
			linkLocalIpv6PrefixLenFlagName = fmt.Sprintf("%v.LinkLocalIPv6PrefixLen", cmdPrefix)
		}

		linkLocalIpv6PrefixLenFlagValue, err := cmd.Flags().GetInt64(linkLocalIpv6PrefixLenFlagName)
		if err != nil {
			return err, false
		}
		m.LinkLocalIPV6PrefixLen = linkLocalIpv6PrefixLenFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsMacAddressFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	macAddressFlagName := fmt.Sprintf("%v.MacAddress", cmdPrefix)
	if cmd.Flags().Changed(macAddressFlagName) {

		var macAddressFlagName string
		if cmdPrefix == "" {
			macAddressFlagName = "MacAddress"
		} else {
			macAddressFlagName = fmt.Sprintf("%v.MacAddress", cmdPrefix)
		}

		macAddressFlagValue, err := cmd.Flags().GetString(macAddressFlagName)
		if err != nil {
			return err, false
		}
		m.MacAddress = macAddressFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsNetworksFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	networksFlagName := fmt.Sprintf("%v.Networks", cmdPrefix)
	if cmd.Flags().Changed(networksFlagName) {
		// warning: Networks map type map[string]EndpointSettings is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveNetworkSettingsPortsFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	portsFlagName := fmt.Sprintf("%v.Ports", cmdPrefix)
	if cmd.Flags().Changed(portsFlagName) {
		// warning: Ports map type PortMap is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveNetworkSettingsSandboxIDFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	sandboxIdFlagName := fmt.Sprintf("%v.SandboxID", cmdPrefix)
	if cmd.Flags().Changed(sandboxIdFlagName) {

		var sandboxIdFlagName string
		if cmdPrefix == "" {
			sandboxIdFlagName = "SandboxID"
		} else {
			sandboxIdFlagName = fmt.Sprintf("%v.SandboxID", cmdPrefix)
		}

		sandboxIdFlagValue, err := cmd.Flags().GetString(sandboxIdFlagName)
		if err != nil {
			return err, false
		}
		m.SandboxID = sandboxIdFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsSandboxKeyFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	sandboxKeyFlagName := fmt.Sprintf("%v.SandboxKey", cmdPrefix)
	if cmd.Flags().Changed(sandboxKeyFlagName) {

		var sandboxKeyFlagName string
		if cmdPrefix == "" {
			sandboxKeyFlagName = "SandboxKey"
		} else {
			sandboxKeyFlagName = fmt.Sprintf("%v.SandboxKey", cmdPrefix)
		}

		sandboxKeyFlagValue, err := cmd.Flags().GetString(sandboxKeyFlagName)
		if err != nil {
			return err, false
		}
		m.SandboxKey = sandboxKeyFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNetworkSettingsSecondaryIPAddressesFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	secondaryIpAddressesFlagName := fmt.Sprintf("%v.SecondaryIPAddresses", cmdPrefix)
	if cmd.Flags().Changed(secondaryIpAddressesFlagName) {
		// warning: SecondaryIPAddresses array type []*Address is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveNetworkSettingsSecondaryIPV6AddressesFlags(depth int, m *models.NetworkSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	secondaryIpv6AddressesFlagName := fmt.Sprintf("%v.SecondaryIPv6Addresses", cmdPrefix)
	if cmd.Flags().Changed(secondaryIpv6AddressesFlagName) {
		// warning: SecondaryIPv6Addresses array type []*Address is not supported by go-swagger cli yet
	}
	return nil, retAdded
}
