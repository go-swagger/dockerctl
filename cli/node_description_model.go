// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for NodeDescription

// register flags to command
func registerModelNodeDescriptionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNodeDescriptionEngine(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeDescriptionHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeDescriptionPlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeDescriptionResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeDescriptionTLSInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeDescriptionEngine(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var engineFlagName string
	if cmdPrefix == "" {
		engineFlagName = "Engine"
	} else {
		engineFlagName = fmt.Sprintf("%v.Engine", cmdPrefix)
	}

	if err := registerModelEngineDescriptionFlags(depth+1, engineFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeDescriptionHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := ``

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "Hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.Hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerNodeDescriptionPlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var platformFlagName string
	if cmdPrefix == "" {
		platformFlagName = "Platform"
	} else {
		platformFlagName = fmt.Sprintf("%v.Platform", cmdPrefix)
	}

	if err := registerModelPlatformFlags(depth+1, platformFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeDescriptionResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var resourcesFlagName string
	if cmdPrefix == "" {
		resourcesFlagName = "Resources"
	} else {
		resourcesFlagName = fmt.Sprintf("%v.Resources", cmdPrefix)
	}

	if err := registerModelResourceObjectFlags(depth+1, resourcesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeDescriptionTLSInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tlsInfoFlagName string
	if cmdPrefix == "" {
		tlsInfoFlagName = "TLSInfo"
	} else {
		tlsInfoFlagName = fmt.Sprintf("%v.TLSInfo", cmdPrefix)
	}

	if err := registerModelTLSInfoFlags(depth+1, tlsInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNodeDescriptionFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, engineAdded := retrieveNodeDescriptionEngineFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || engineAdded

	err, hostnameAdded := retrieveNodeDescriptionHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, platformAdded := retrieveNodeDescriptionPlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformAdded

	err, resourcesAdded := retrieveNodeDescriptionResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourcesAdded

	err, tlsInfoAdded := retrieveNodeDescriptionTLSInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsInfoAdded

	return nil, retAdded
}

func retrieveNodeDescriptionEngineFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	engineFlagName := fmt.Sprintf("%v.Engine", cmdPrefix)
	if cmd.Flags().Changed(engineFlagName) {
		// info: complex object Engine EngineDescription is retrieved outside this Changed() block
	}
	engineFlagValue := m.Engine
	if swag.IsZero(engineFlagValue) {
		engineFlagValue = &models.EngineDescription{}
	}

	err, engineAdded := retrieveModelEngineDescriptionFlags(depth+1, engineFlagValue, engineFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || engineAdded
	if engineAdded {
		m.Engine = engineFlagValue
	}

	return nil, retAdded
}

func retrieveNodeDescriptionHostnameFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.Hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "Hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.Hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNodeDescriptionPlatformFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	platformFlagName := fmt.Sprintf("%v.Platform", cmdPrefix)
	if cmd.Flags().Changed(platformFlagName) {
		// info: complex object Platform Platform is retrieved outside this Changed() block
	}
	platformFlagValue := m.Platform
	if swag.IsZero(platformFlagValue) {
		platformFlagValue = &models.Platform{}
	}

	err, platformAdded := retrieveModelPlatformFlags(depth+1, platformFlagValue, platformFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformAdded
	if platformAdded {
		m.Platform = platformFlagValue
	}

	return nil, retAdded
}

func retrieveNodeDescriptionResourcesFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourcesFlagName := fmt.Sprintf("%v.Resources", cmdPrefix)
	if cmd.Flags().Changed(resourcesFlagName) {
		// info: complex object Resources ResourceObject is retrieved outside this Changed() block
	}
	resourcesFlagValue := m.Resources
	if swag.IsZero(resourcesFlagValue) {
		resourcesFlagValue = &models.ResourceObject{}
	}

	err, resourcesAdded := retrieveModelResourceObjectFlags(depth+1, resourcesFlagValue, resourcesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourcesAdded
	if resourcesAdded {
		m.Resources = resourcesFlagValue
	}

	return nil, retAdded
}

func retrieveNodeDescriptionTLSInfoFlags(depth int, m *models.NodeDescription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tlsInfoFlagName := fmt.Sprintf("%v.TLSInfo", cmdPrefix)
	if cmd.Flags().Changed(tlsInfoFlagName) {
		// info: complex object TLSInfo TLSInfo is retrieved outside this Changed() block
	}
	tlsInfoFlagValue := m.TLSInfo
	if swag.IsZero(tlsInfoFlagValue) {
		tlsInfoFlagValue = &models.TLSInfo{}
	}

	err, tlsInfoAdded := retrieveModelTLSInfoFlags(depth+1, tlsInfoFlagValue, tlsInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tlsInfoAdded
	if tlsInfoAdded {
		m.TLSInfo = tlsInfoFlagValue
	}

	return nil, retAdded
}
