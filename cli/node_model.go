// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for Node

// register flags to command
func registerModelNodeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNodeCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeManagerStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := `Date and time at which the node was added to the swarm in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
`

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "CreatedAt"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerNodeDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "Description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.Description", cmdPrefix)
	}

	if err := registerModelNodeDescriptionFlags(depth+1, descriptionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "ID"
	} else {
		idFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerNodeManagerStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var managerStatusFlagName string
	if cmdPrefix == "" {
		managerStatusFlagName = "ManagerStatus"
	} else {
		managerStatusFlagName = fmt.Sprintf("%v.ManagerStatus", cmdPrefix)
	}

	if err := registerModelManagerStatusFlags(depth+1, managerStatusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var specFlagName string
	if cmdPrefix == "" {
		specFlagName = "Spec"
	} else {
		specFlagName = fmt.Sprintf("%v.Spec", cmdPrefix)
	}

	if err := registerModelNodeSpecFlags(depth+1, specFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "Status"
	} else {
		statusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
	}

	if err := registerModelNodeStatusFlags(depth+1, statusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := `Date and time at which the node was last updated in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
`

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "UpdatedAt"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	}

	var updatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(updatedAtFlagName, updatedAtFlagDefault, updatedAtDescription)

	return nil
}

func registerNodeVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "Version"
	} else {
		versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	if err := registerModelObjectVersionFlags(depth+1, versionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNodeFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAtAdded := retrieveNodeCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, descriptionAdded := retrieveNodeDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, idAdded := retrieveNodeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, managerStatusAdded := retrieveNodeManagerStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || managerStatusAdded

	err, specAdded := retrieveNodeSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specAdded

	err, statusAdded := retrieveNodeStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, updatedAtAdded := retrieveNodeUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	err, versionAdded := retrieveNodeVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveNodeCreatedAtFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "CreatedAt"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNodeDescriptionFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.Description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {
		// info: complex object Description NodeDescription is retrieved outside this Changed() block
	}

	descriptionFlagValue := models.NodeDescription{}
	err, descriptionAdded := retrieveModelNodeDescriptionFlags(depth+1, &descriptionFlagValue, descriptionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded
	if descriptionAdded {
		m.Description = &descriptionFlagValue
	}

	return nil, retAdded
}

func retrieveNodeIDFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "ID"
		} else {
			idFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNodeManagerStatusFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	managerStatusFlagName := fmt.Sprintf("%v.ManagerStatus", cmdPrefix)
	if cmd.Flags().Changed(managerStatusFlagName) {
		// info: complex object ManagerStatus ManagerStatus is retrieved outside this Changed() block
	}

	managerStatusFlagValue := models.ManagerStatus{}
	err, managerStatusAdded := retrieveModelManagerStatusFlags(depth+1, &managerStatusFlagValue, managerStatusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || managerStatusAdded
	if managerStatusAdded {
		m.ManagerStatus = &managerStatusFlagValue
	}

	return nil, retAdded
}

func retrieveNodeSpecFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	specFlagName := fmt.Sprintf("%v.Spec", cmdPrefix)
	if cmd.Flags().Changed(specFlagName) {
		// info: complex object Spec NodeSpec is retrieved outside this Changed() block
	}

	specFlagValue := models.NodeSpec{}
	err, specAdded := retrieveModelNodeSpecFlags(depth+1, &specFlagValue, specFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specAdded
	if specAdded {
		m.Spec = &specFlagValue
	}

	return nil, retAdded
}

func retrieveNodeStatusFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {
		// info: complex object Status NodeStatus is retrieved outside this Changed() block
	}

	statusFlagValue := models.NodeStatus{}
	err, statusAdded := retrieveModelNodeStatusFlags(depth+1, &statusFlagValue, statusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded
	if statusAdded {
		m.Status = &statusFlagValue
	}

	return nil, retAdded
}

func retrieveNodeUpdatedAtFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "UpdatedAt"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
		}

		updatedAtFlagValue, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNodeVersionFlags(depth int, m *models.Node, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {
		// info: complex object Version ObjectVersion is retrieved outside this Changed() block
	}

	versionFlagValue := models.ObjectVersion{}
	err, versionAdded := retrieveModelObjectVersionFlags(depth+1, &versionFlagValue, versionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded
	if versionAdded {
		m.Version = &versionFlagValue
	}

	return nil, retAdded
}
