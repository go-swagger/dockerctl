// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelNodeStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNodeStatusAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeStatusMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNodeStatusState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNodeStatusAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addrDescription := `IP address of the node.`

	var addrFlagName string
	if cmdPrefix == "" {
		addrFlagName = "Addr"
	} else {
		addrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
	}

	var addrFlagDefault string

	_ = cmd.PersistentFlags().String(addrFlagName, addrFlagDefault, addrDescription)

	return nil
}

func registerNodeStatusMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := ``

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "Message"
	} else {
		messageFlagName = fmt.Sprintf("%v.Message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerNodeStatusState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive State NodeState is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNodeStatusFlags(depth int, m *models.NodeStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addrAdded := retrieveNodeStatusAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addrAdded

	err, messageAdded := retrieveNodeStatusMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, stateAdded := retrieveNodeStatusStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stateAdded

	return nil, retAdded
}

func retrieveNodeStatusAddrFlags(depth int, m *models.NodeStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	addrFlagName := fmt.Sprintf("%v.Addr", cmdPrefix)
	if cmd.Flags().Changed(addrFlagName) {

		var addrFlagName string
		if cmdPrefix == "" {
			addrFlagName = "Addr"
		} else {
			addrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
		}

		addrFlagValue, err := cmd.Flags().GetString(addrFlagName)
		if err != nil {
			return err, false
		}
		m.Addr = addrFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNodeStatusMessageFlags(depth int, m *models.NodeStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	messageFlagName := fmt.Sprintf("%v.Message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "Message"
		} else {
			messageFlagName = fmt.Sprintf("%v.Message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = messageFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveNodeStatusStateFlags(depth int, m *models.NodeStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	stateFlagName := fmt.Sprintf("%v.State", cmdPrefix)
	if cmd.Flags().Changed(stateFlagName) {

		// warning: primitive State NodeState is not supported by go-swagger cli yet

		retAdded = true
	}
	return nil, retAdded
}
