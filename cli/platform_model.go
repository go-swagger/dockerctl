// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelPlatformFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlatformArchitecture(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlatformOS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlatformArchitecture(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	architectureDescription := `Architecture represents the hardware architecture (for example,
` + "`" + `x86_64` + "`" + `).
`

	var architectureFlagName string
	if cmdPrefix == "" {
		architectureFlagName = "Architecture"
	} else {
		architectureFlagName = fmt.Sprintf("%v.Architecture", cmdPrefix)
	}

	var architectureFlagDefault string

	_ = cmd.PersistentFlags().String(architectureFlagName, architectureFlagDefault, architectureDescription)

	return nil
}

func registerPlatformOS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oSDescription := `OS represents the Operating System (for example, ` + "`" + `linux` + "`" + ` or ` + "`" + `windows` + "`" + `).
`

	var oSFlagName string
	if cmdPrefix == "" {
		oSFlagName = "OS"
	} else {
		oSFlagName = fmt.Sprintf("%v.OS", cmdPrefix)
	}

	var oSFlagDefault string

	_ = cmd.PersistentFlags().String(oSFlagName, oSFlagDefault, oSDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlatformFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, architectureAdded := retrievePlatformArchitectureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || architectureAdded

	err, oSAdded := retrievePlatformOSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oSAdded

	return nil, retAdded
}

func retrievePlatformArchitectureFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	architectureFlagName := fmt.Sprintf("%v.Architecture", cmdPrefix)
	if cmd.Flags().Changed(architectureFlagName) {

		var architectureFlagName string
		if cmdPrefix == "" {
			architectureFlagName = "Architecture"
		} else {
			architectureFlagName = fmt.Sprintf("%v.Architecture", cmdPrefix)
		}

		architectureFlagValue, err := cmd.Flags().GetString(architectureFlagName)
		if err != nil {
			return err, false
		}
		m.Architecture = architectureFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrievePlatformOSFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	oSFlagName := fmt.Sprintf("%v.OS", cmdPrefix)
	if cmd.Flags().Changed(oSFlagName) {

		var oSFlagName string
		if cmdPrefix == "" {
			oSFlagName = "OS"
		} else {
			oSFlagName = fmt.Sprintf("%v.OS", cmdPrefix)
		}

		oSFlagValue, err := cmd.Flags().GetString(oSFlagName)
		if err != nil {
			return err, false
		}
		m.OS = oSFlagValue

		retAdded = true
	}
	return nil, retAdded
}
