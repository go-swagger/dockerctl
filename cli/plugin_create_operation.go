// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/dockerctl/client/plugin"

	"github.com/spf13/cobra"
)

// makeOperationPluginPluginCreateCmd returns a cmd to handle operation pluginCreate
func makeOperationPluginPluginCreateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "PluginCreate",
		Short: ``,
		RunE:  runOperationPluginPluginCreate,
	}

	if err := registerOperationPluginPluginCreateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPluginPluginCreate uses cmd flags to call endpoint api
func runOperationPluginPluginCreate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := plugin.NewPluginCreateParams()
	if err, _ := retrieveOperationPluginPluginCreateNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPluginPluginCreateTarContextFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationPluginPluginCreateResult(appCli.Plugin.PluginCreate(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationPluginPluginCreateNameFlag(m *plugin.PluginCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPluginPluginCreateTarContextFlag(m *plugin.PluginCreateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tarContext") {
		// warning: io.ReadCloser is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

// printOperationPluginPluginCreateResult prints output to stdout
func printOperationPluginPluginCreateResult(resp0 *plugin.PluginCreateNoContent, respErr error) error {
	if respErr != nil {
		return respErr
	}

	// warning: non schema response pluginCreateNoContent is not supported by go-swagger cli yet.

	return nil
}

// registerOperationPluginPluginCreateParamFlags registers all flags needed to fill params
func registerOperationPluginPluginCreateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPluginPluginCreateNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPluginPluginCreateTarContextParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPluginPluginCreateNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. The name of the plugin. The ` + "`" + `:latest` + "`" + ` tag is optional, and is the default if omitted.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}
func registerOperationPluginPluginCreateTarContextParamFlags(cmdPrefix string, cmd *cobra.Command) error {
	// warning: go type io.ReadCloser is not supported by go-swagger cli yet.
	return nil
}
