// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelPluginInterfaceTypeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginInterfaceTypeCapability(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginInterfaceTypePrefix(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginInterfaceTypeVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginInterfaceTypeCapability(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	capabilityDescription := `Required. `

	var capabilityFlagName string
	if cmdPrefix == "" {
		capabilityFlagName = "Capability"
	} else {
		capabilityFlagName = fmt.Sprintf("%v.Capability", cmdPrefix)
	}

	var capabilityFlagDefault string

	_ = cmd.PersistentFlags().String(capabilityFlagName, capabilityFlagDefault, capabilityDescription)

	return nil
}

func registerPluginInterfaceTypePrefix(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	prefixDescription := `Required. `

	var prefixFlagName string
	if cmdPrefix == "" {
		prefixFlagName = "Prefix"
	} else {
		prefixFlagName = fmt.Sprintf("%v.Prefix", cmdPrefix)
	}

	var prefixFlagDefault string

	_ = cmd.PersistentFlags().String(prefixFlagName, prefixFlagDefault, prefixDescription)

	return nil
}

func registerPluginInterfaceTypeVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `Required. `

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "Version"
	} else {
		versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginInterfaceTypeFlags(depth int, m *models.PluginInterfaceType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, capabilityAdded := retrievePluginInterfaceTypeCapabilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || capabilityAdded

	err, prefixAdded := retrievePluginInterfaceTypePrefixFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || prefixAdded

	err, versionAdded := retrievePluginInterfaceTypeVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrievePluginInterfaceTypeCapabilityFlags(depth int, m *models.PluginInterfaceType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	capabilityFlagName := fmt.Sprintf("%v.Capability", cmdPrefix)
	if cmd.Flags().Changed(capabilityFlagName) {

		var capabilityFlagName string
		if cmdPrefix == "" {
			capabilityFlagName = "Capability"
		} else {
			capabilityFlagName = fmt.Sprintf("%v.Capability", cmdPrefix)
		}

		capabilityFlagValue, err := cmd.Flags().GetString(capabilityFlagName)
		if err != nil {
			return err, false
		}
		m.Capability = capabilityFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrievePluginInterfaceTypePrefixFlags(depth int, m *models.PluginInterfaceType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	prefixFlagName := fmt.Sprintf("%v.Prefix", cmdPrefix)
	if cmd.Flags().Changed(prefixFlagName) {

		var prefixFlagName string
		if cmdPrefix == "" {
			prefixFlagName = "Prefix"
		} else {
			prefixFlagName = fmt.Sprintf("%v.Prefix", cmdPrefix)
		}

		prefixFlagValue, err := cmd.Flags().GetString(prefixFlagName)
		if err != nil {
			return err, false
		}
		m.Prefix = prefixFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrievePluginInterfaceTypeVersionFlags(depth int, m *models.PluginInterfaceType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	versionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "Version"
		} else {
			versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}
	return nil, retAdded
}
