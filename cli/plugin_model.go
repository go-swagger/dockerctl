// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelPluginFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPluginConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginPluginReference(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPluginSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPluginConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var configFlagName string
	if cmdPrefix == "" {
		configFlagName = "Config"
	} else {
		configFlagName = fmt.Sprintf("%v.Config", cmdPrefix)
	}

	registerModelPluginFlags(depth+1, configFlagName, cmd)

	if err := cmd.MarkPersistentFlagRequired(configFlagName); err != nil {
		return err
	}

	return nil
}

func registerPluginEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Required. True if the plugin is running. False if the plugin is not running, only installed.`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "Enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.Enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerPluginID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "Id"
	} else {
		idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPluginName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. `

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPluginPluginReference(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pluginReferenceDescription := `plugin remote reference used to push/pull the plugin`

	var pluginReferenceFlagName string
	if cmdPrefix == "" {
		pluginReferenceFlagName = "PluginReference"
	} else {
		pluginReferenceFlagName = fmt.Sprintf("%v.PluginReference", cmdPrefix)
	}

	var pluginReferenceFlagDefault string

	_ = cmd.PersistentFlags().String(pluginReferenceFlagName, pluginReferenceFlagDefault, pluginReferenceDescription)

	return nil
}

func registerPluginSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var settingsFlagName string
	if cmdPrefix == "" {
		settingsFlagName = "Settings"
	} else {
		settingsFlagName = fmt.Sprintf("%v.Settings", cmdPrefix)
	}

	registerModelPluginFlags(depth+1, settingsFlagName, cmd)

	if err := cmd.MarkPersistentFlagRequired(settingsFlagName); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPluginFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, configAdded := retrievePluginConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configAdded

	err, enabledAdded := retrievePluginEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, idAdded := retrievePluginIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrievePluginNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, pluginReferenceAdded := retrievePluginPluginReferenceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pluginReferenceAdded

	err, settingsAdded := retrievePluginSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || settingsAdded

	return nil, retAdded
}

func retrievePluginConfigFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	configFlagName := fmt.Sprintf("%v.Config", cmdPrefix)
	if cmd.Flags().Changed(configFlagName) {

		configFlagValue := &models.Plugin{}
		err, added := retrieveModelPluginFlags(depth+1, configFlagValue, configFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrievePluginEnabledFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	enabledFlagName := fmt.Sprintf("%v.Enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "Enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.Enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrievePluginIDFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	idFlagName := fmt.Sprintf("%v.Id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "Id"
		} else {
			idFlagName = fmt.Sprintf("%v.Id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrievePluginNameFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrievePluginPluginReferenceFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	pluginReferenceFlagName := fmt.Sprintf("%v.PluginReference", cmdPrefix)
	if cmd.Flags().Changed(pluginReferenceFlagName) {

		var pluginReferenceFlagName string
		if cmdPrefix == "" {
			pluginReferenceFlagName = "PluginReference"
		} else {
			pluginReferenceFlagName = fmt.Sprintf("%v.PluginReference", cmdPrefix)
		}

		pluginReferenceFlagValue, err := cmd.Flags().GetString(pluginReferenceFlagName)
		if err != nil {
			return err, false
		}
		m.PluginReference = pluginReferenceFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrievePluginSettingsFlags(depth int, m *models.Plugin, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	settingsFlagName := fmt.Sprintf("%v.Settings", cmdPrefix)
	if cmd.Flags().Changed(settingsFlagName) {

		settingsFlagValue := &models.Plugin{}
		err, added := retrieveModelPluginFlags(depth+1, settingsFlagValue, settingsFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}
