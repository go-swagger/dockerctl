// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for PortBinding

// register flags to command
func registerModelPortBindingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortBindingHostIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortBindingHostPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortBindingHostIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostIpDescription := `Host IP address that the container's port is mapped to.`

	var hostIpFlagName string
	if cmdPrefix == "" {
		hostIpFlagName = "HostIp"
	} else {
		hostIpFlagName = fmt.Sprintf("%v.HostIp", cmdPrefix)
	}

	var hostIpFlagDefault string

	_ = cmd.PersistentFlags().String(hostIpFlagName, hostIpFlagDefault, hostIpDescription)

	return nil
}

func registerPortBindingHostPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostPortDescription := `Host port number that the container's port is mapped to.`

	var hostPortFlagName string
	if cmdPrefix == "" {
		hostPortFlagName = "HostPort"
	} else {
		hostPortFlagName = fmt.Sprintf("%v.HostPort", cmdPrefix)
	}

	var hostPortFlagDefault string

	_ = cmd.PersistentFlags().String(hostPortFlagName, hostPortFlagDefault, hostPortDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortBindingFlags(depth int, m *models.PortBinding, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, hostIpAdded := retrievePortBindingHostIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostIpAdded

	err, hostPortAdded := retrievePortBindingHostPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostPortAdded

	return nil, retAdded
}

func retrievePortBindingHostIPFlags(depth int, m *models.PortBinding, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostIpFlagName := fmt.Sprintf("%v.HostIp", cmdPrefix)
	if cmd.Flags().Changed(hostIpFlagName) {

		var hostIpFlagName string
		if cmdPrefix == "" {
			hostIpFlagName = "HostIp"
		} else {
			hostIpFlagName = fmt.Sprintf("%v.HostIp", cmdPrefix)
		}

		hostIpFlagValue, err := cmd.Flags().GetString(hostIpFlagName)
		if err != nil {
			return err, false
		}
		m.HostIP = hostIpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePortBindingHostPortFlags(depth int, m *models.PortBinding, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostPortFlagName := fmt.Sprintf("%v.HostPort", cmdPrefix)
	if cmd.Flags().Changed(hostPortFlagName) {

		var hostPortFlagName string
		if cmdPrefix == "" {
			hostPortFlagName = "HostPort"
		} else {
			hostPortFlagName = fmt.Sprintf("%v.HostPort", cmdPrefix)
		}

		hostPortFlagValue, err := cmd.Flags().GetString(hostPortFlagName)
		if err != nil {
			return err, false
		}
		m.HostPort = hostPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}
