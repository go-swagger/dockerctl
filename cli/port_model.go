// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for Port

// register flags to command
func registerModelPortFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPortIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortPrivatePort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortPublicPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPortType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPortIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipDescription := `Host IP address that the container's port is mapped to`

	var ipFlagName string
	if cmdPrefix == "" {
		ipFlagName = "IP"
	} else {
		ipFlagName = fmt.Sprintf("%v.IP", cmdPrefix)
	}

	var ipFlagDefault string

	_ = cmd.PersistentFlags().String(ipFlagName, ipFlagDefault, ipDescription)

	return nil
}

func registerPortPrivatePort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive PrivatePort uint16 is not supported by go-swagger cli yet

	return nil
}

func registerPortPublicPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive PublicPort uint16 is not supported by go-swagger cli yet

	return nil
}

func registerPortType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Required. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "Type"
	} else {
		typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPortFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ipAdded := retrievePortIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAdded

	err, privatePortAdded := retrievePortPrivatePortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || privatePortAdded

	err, publicPortAdded := retrievePortPublicPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicPortAdded

	err, typeAdded := retrievePortTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePortIPFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	ipFlagName := fmt.Sprintf("%v.IP", cmdPrefix)
	if cmd.Flags().Changed(ipFlagName) {

		var ipFlagName string
		if cmdPrefix == "" {
			ipFlagName = "IP"
		} else {
			ipFlagName = fmt.Sprintf("%v.IP", cmdPrefix)
		}

		ipFlagValue, err := cmd.Flags().GetString(ipFlagName)
		if err != nil {
			return err, false
		}
		m.IP = ipFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrievePortPrivatePortFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	privatePortFlagName := fmt.Sprintf("%v.PrivatePort", cmdPrefix)
	if cmd.Flags().Changed(privatePortFlagName) {

		// warning: primitive PrivatePort uint16 is not supported by go-swagger cli yet

		retAdded = true
	}
	return nil, retAdded
}

func retrievePortPublicPortFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	publicPortFlagName := fmt.Sprintf("%v.PublicPort", cmdPrefix)
	if cmd.Flags().Changed(publicPortFlagName) {

		// warning: primitive PublicPort uint16 is not supported by go-swagger cli yet

		retAdded = true
	}
	return nil, retAdded
}

func retrievePortTypeFlags(depth int, m *models.Port, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	typeFlagName := fmt.Sprintf("%v.Type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "Type"
		} else {
			typeFlagName = fmt.Sprintf("%v.Type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}
	return nil, retAdded
}
