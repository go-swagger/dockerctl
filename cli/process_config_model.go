// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelProcessConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProcessConfigArguments(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessConfigEntrypoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessConfigPrivileged(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessConfigTty(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProcessConfigUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProcessConfigArguments(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: arguments []string array type is not supported by go-swagger cli yet

	return nil
}

func registerProcessConfigEntrypoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	entrypointDescription := ``

	var entrypointFlagName string
	if cmdPrefix == "" {
		entrypointFlagName = "entrypoint"
	} else {
		entrypointFlagName = fmt.Sprintf("%v.entrypoint", cmdPrefix)
	}

	var entrypointFlagDefault string

	_ = cmd.PersistentFlags().String(entrypointFlagName, entrypointFlagDefault, entrypointDescription)

	return nil
}

func registerProcessConfigPrivileged(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	privilegedDescription := ``

	var privilegedFlagName string
	if cmdPrefix == "" {
		privilegedFlagName = "privileged"
	} else {
		privilegedFlagName = fmt.Sprintf("%v.privileged", cmdPrefix)
	}

	var privilegedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(privilegedFlagName, privilegedFlagDefault, privilegedDescription)

	return nil
}

func registerProcessConfigTty(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ttyDescription := ``

	var ttyFlagName string
	if cmdPrefix == "" {
		ttyFlagName = "tty"
	} else {
		ttyFlagName = fmt.Sprintf("%v.tty", cmdPrefix)
	}

	var ttyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ttyFlagName, ttyFlagDefault, ttyDescription)

	return nil
}

func registerProcessConfigUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDescription := ``

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "user"
	} else {
		userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	var userFlagDefault string

	_ = cmd.PersistentFlags().String(userFlagName, userFlagDefault, userDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProcessConfigFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, argumentsAdded := retrieveProcessConfigArgumentsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || argumentsAdded

	err, entrypointAdded := retrieveProcessConfigEntrypointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || entrypointAdded

	err, privilegedAdded := retrieveProcessConfigPrivilegedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || privilegedAdded

	err, ttyAdded := retrieveProcessConfigTtyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ttyAdded

	err, userAdded := retrieveProcessConfigUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	return nil, retAdded
}

func retrieveProcessConfigArgumentsFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	argumentsFlagName := fmt.Sprintf("%v.arguments", cmdPrefix)
	if cmd.Flags().Changed(argumentsFlagName) {
		// warning: arguments array type []string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveProcessConfigEntrypointFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	entrypointFlagName := fmt.Sprintf("%v.entrypoint", cmdPrefix)
	if cmd.Flags().Changed(entrypointFlagName) {

		var entrypointFlagName string
		if cmdPrefix == "" {
			entrypointFlagName = "entrypoint"
		} else {
			entrypointFlagName = fmt.Sprintf("%v.entrypoint", cmdPrefix)
		}

		entrypointFlagValue, err := cmd.Flags().GetString(entrypointFlagName)
		if err != nil {
			return err, false
		}
		m.Entrypoint = entrypointFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveProcessConfigPrivilegedFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	privilegedFlagName := fmt.Sprintf("%v.privileged", cmdPrefix)
	if cmd.Flags().Changed(privilegedFlagName) {

		var privilegedFlagName string
		if cmdPrefix == "" {
			privilegedFlagName = "privileged"
		} else {
			privilegedFlagName = fmt.Sprintf("%v.privileged", cmdPrefix)
		}

		privilegedFlagValue, err := cmd.Flags().GetBool(privilegedFlagName)
		if err != nil {
			return err, false
		}
		m.Privileged = privilegedFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveProcessConfigTtyFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	ttyFlagName := fmt.Sprintf("%v.tty", cmdPrefix)
	if cmd.Flags().Changed(ttyFlagName) {

		var ttyFlagName string
		if cmdPrefix == "" {
			ttyFlagName = "tty"
		} else {
			ttyFlagName = fmt.Sprintf("%v.tty", cmdPrefix)
		}

		ttyFlagValue, err := cmd.Flags().GetBool(ttyFlagName)
		if err != nil {
			return err, false
		}
		m.Tty = ttyFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveProcessConfigUserFlags(depth int, m *models.ProcessConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	userFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {

		var userFlagName string
		if cmdPrefix == "" {
			userFlagName = "user"
		} else {
			userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
		}

		userFlagValue, err := cmd.Flags().GetString(userFlagName)
		if err != nil {
			return err, false
		}
		m.User = userFlagValue

		retAdded = true
	}
	return nil, retAdded
}
