// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelResourceObjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerResourceObjectGenericResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourceObjectMemoryBytes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourceObjectNanoCPUs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerResourceObjectGenericResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: GenericResources GenericResources array type is not supported by go-swagger cli yet

	return nil
}

func registerResourceObjectMemoryBytes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	memoryBytesDescription := ``

	var memoryBytesFlagName string
	if cmdPrefix == "" {
		memoryBytesFlagName = "MemoryBytes"
	} else {
		memoryBytesFlagName = fmt.Sprintf("%v.MemoryBytes", cmdPrefix)
	}

	var memoryBytesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(memoryBytesFlagName, memoryBytesFlagDefault, memoryBytesDescription)

	return nil
}

func registerResourceObjectNanoCPUs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nanoCPUsDescription := ``

	var nanoCPUsFlagName string
	if cmdPrefix == "" {
		nanoCPUsFlagName = "NanoCPUs"
	} else {
		nanoCPUsFlagName = fmt.Sprintf("%v.NanoCPUs", cmdPrefix)
	}

	var nanoCPUsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nanoCPUsFlagName, nanoCPUsFlagDefault, nanoCPUsDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelResourceObjectFlags(depth int, m *models.ResourceObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, genericResourcesAdded := retrieveResourceObjectGenericResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || genericResourcesAdded

	err, memoryBytesAdded := retrieveResourceObjectMemoryBytesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memoryBytesAdded

	err, nanoCPUsAdded := retrieveResourceObjectNanoCPUsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nanoCPUsAdded

	return nil, retAdded
}

func retrieveResourceObjectGenericResourcesFlags(depth int, m *models.ResourceObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	genericResourcesFlagName := fmt.Sprintf("%v.GenericResources", cmdPrefix)
	if cmd.Flags().Changed(genericResourcesFlagName) {
		// warning: GenericResources array type GenericResources is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveResourceObjectMemoryBytesFlags(depth int, m *models.ResourceObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	memoryBytesFlagName := fmt.Sprintf("%v.MemoryBytes", cmdPrefix)
	if cmd.Flags().Changed(memoryBytesFlagName) {

		var memoryBytesFlagName string
		if cmdPrefix == "" {
			memoryBytesFlagName = "MemoryBytes"
		} else {
			memoryBytesFlagName = fmt.Sprintf("%v.MemoryBytes", cmdPrefix)
		}

		memoryBytesFlagValue, err := cmd.Flags().GetInt64(memoryBytesFlagName)
		if err != nil {
			return err, false
		}
		m.MemoryBytes = memoryBytesFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourceObjectNanoCPUsFlags(depth int, m *models.ResourceObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nanoCPUsFlagName := fmt.Sprintf("%v.NanoCPUs", cmdPrefix)
	if cmd.Flags().Changed(nanoCPUsFlagName) {

		var nanoCPUsFlagName string
		if cmdPrefix == "" {
			nanoCPUsFlagName = "NanoCPUs"
		} else {
			nanoCPUsFlagName = fmt.Sprintf("%v.NanoCPUs", cmdPrefix)
		}

		nanoCPUsFlagValue, err := cmd.Flags().GetInt64(nanoCPUsFlagName)
		if err != nil {
			return err, false
		}
		m.NanoCPUs = nanoCPUsFlagValue

		retAdded = true
	}
	return nil, retAdded
}
