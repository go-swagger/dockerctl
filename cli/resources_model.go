// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelResourcesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerResourcesBlkioDeviceReadBps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioDeviceReadIOps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioDeviceWriteBps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioDeviceWriteIOps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioWeight(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesBlkioWeightDevice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCgroupParent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPUCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPUPercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPUPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPUQuota(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPURealtimePeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPURealtimeRuntime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCPUShares(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCpusetCpus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesCpusetMems(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesDeviceCgroupRules(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesDeviceRequests(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesDevices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesIOMaximumBandwidth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesIOMaximumIOps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesInit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesKernelMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesKernelMemoryTCP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesMemoryReservation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesMemorySwap(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesMemorySwappiness(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesNanoCPUs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesOomKillDisable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesPidsLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResourcesUlimits(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerResourcesBlkioDeviceReadBps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: BlkioDeviceReadBps []*ThrottleDevice array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesBlkioDeviceReadIOps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: BlkioDeviceReadIOps []*ThrottleDevice array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesBlkioDeviceWriteBps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: BlkioDeviceWriteBps []*ThrottleDevice array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesBlkioDeviceWriteIOps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: BlkioDeviceWriteIOps []*ThrottleDevice array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesBlkioWeight(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	blkioWeightDescription := `Block IO weight (relative weight).`

	var blkioWeightFlagName string
	if cmdPrefix == "" {
		blkioWeightFlagName = "BlkioWeight"
	} else {
		blkioWeightFlagName = fmt.Sprintf("%v.BlkioWeight", cmdPrefix)
	}

	var blkioWeightFlagDefault int64

	_ = cmd.PersistentFlags().Int64(blkioWeightFlagName, blkioWeightFlagDefault, blkioWeightDescription)

	return nil
}

func registerResourcesBlkioWeightDevice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: BlkioWeightDevice []*ResourcesBlkioWeightDeviceItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesCgroupParent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cgroupParentDescription := `Path to ` + "`" + `cgroups` + "`" + ` under which the container's ` + "`" + `cgroup` + "`" + ` is created. If the path is not absolute, the path is considered to be relative to the ` + "`" + `cgroups` + "`" + ` path of the init process. Cgroups are created if they do not already exist.`

	var cgroupParentFlagName string
	if cmdPrefix == "" {
		cgroupParentFlagName = "CgroupParent"
	} else {
		cgroupParentFlagName = fmt.Sprintf("%v.CgroupParent", cmdPrefix)
	}

	var cgroupParentFlagDefault string

	_ = cmd.PersistentFlags().String(cgroupParentFlagName, cgroupParentFlagDefault, cgroupParentDescription)

	return nil
}

func registerResourcesCPUCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuCountDescription := `The number of usable CPUs (Windows only).

On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is ` + "`" + `CPUCount` + "`" + ` first, then ` + "`" + `CPUShares` + "`" + `, and ` + "`" + `CPUPercent` + "`" + ` last.
`

	var cpuCountFlagName string
	if cmdPrefix == "" {
		cpuCountFlagName = "CpuCount"
	} else {
		cpuCountFlagName = fmt.Sprintf("%v.CpuCount", cmdPrefix)
	}

	var cpuCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cpuCountFlagName, cpuCountFlagDefault, cpuCountDescription)

	return nil
}

func registerResourcesCPUPercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuPercentDescription := `The usable percentage of the available CPUs (Windows only).

On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is ` + "`" + `CPUCount` + "`" + ` first, then ` + "`" + `CPUShares` + "`" + `, and ` + "`" + `CPUPercent` + "`" + ` last.
`

	var cpuPercentFlagName string
	if cmdPrefix == "" {
		cpuPercentFlagName = "CpuPercent"
	} else {
		cpuPercentFlagName = fmt.Sprintf("%v.CpuPercent", cmdPrefix)
	}

	var cpuPercentFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cpuPercentFlagName, cpuPercentFlagDefault, cpuPercentDescription)

	return nil
}

func registerResourcesCPUPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuPeriodDescription := `The length of a CPU period in microseconds.`

	var cpuPeriodFlagName string
	if cmdPrefix == "" {
		cpuPeriodFlagName = "CpuPeriod"
	} else {
		cpuPeriodFlagName = fmt.Sprintf("%v.CpuPeriod", cmdPrefix)
	}

	var cpuPeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cpuPeriodFlagName, cpuPeriodFlagDefault, cpuPeriodDescription)

	return nil
}

func registerResourcesCPUQuota(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuQuotaDescription := `Microseconds of CPU time that the container can get in a CPU period.`

	var cpuQuotaFlagName string
	if cmdPrefix == "" {
		cpuQuotaFlagName = "CpuQuota"
	} else {
		cpuQuotaFlagName = fmt.Sprintf("%v.CpuQuota", cmdPrefix)
	}

	var cpuQuotaFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cpuQuotaFlagName, cpuQuotaFlagDefault, cpuQuotaDescription)

	return nil
}

func registerResourcesCPURealtimePeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuRealtimePeriodDescription := `The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.`

	var cpuRealtimePeriodFlagName string
	if cmdPrefix == "" {
		cpuRealtimePeriodFlagName = "CpuRealtimePeriod"
	} else {
		cpuRealtimePeriodFlagName = fmt.Sprintf("%v.CpuRealtimePeriod", cmdPrefix)
	}

	var cpuRealtimePeriodFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cpuRealtimePeriodFlagName, cpuRealtimePeriodFlagDefault, cpuRealtimePeriodDescription)

	return nil
}

func registerResourcesCPURealtimeRuntime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuRealtimeRuntimeDescription := `The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.`

	var cpuRealtimeRuntimeFlagName string
	if cmdPrefix == "" {
		cpuRealtimeRuntimeFlagName = "CpuRealtimeRuntime"
	} else {
		cpuRealtimeRuntimeFlagName = fmt.Sprintf("%v.CpuRealtimeRuntime", cmdPrefix)
	}

	var cpuRealtimeRuntimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cpuRealtimeRuntimeFlagName, cpuRealtimeRuntimeFlagDefault, cpuRealtimeRuntimeDescription)

	return nil
}

func registerResourcesCPUShares(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuSharesDescription := `An integer value representing this container's relative CPU weight versus other containers.`

	var cpuSharesFlagName string
	if cmdPrefix == "" {
		cpuSharesFlagName = "CpuShares"
	} else {
		cpuSharesFlagName = fmt.Sprintf("%v.CpuShares", cmdPrefix)
	}

	var cpuSharesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cpuSharesFlagName, cpuSharesFlagDefault, cpuSharesDescription)

	return nil
}

func registerResourcesCpusetCpus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpusetCpusDescription := `CPUs in which to allow execution (e.g., ` + "`" + `0-3` + "`" + `, ` + "`" + `0,1` + "`" + `)`

	var cpusetCpusFlagName string
	if cmdPrefix == "" {
		cpusetCpusFlagName = "CpusetCpus"
	} else {
		cpusetCpusFlagName = fmt.Sprintf("%v.CpusetCpus", cmdPrefix)
	}

	var cpusetCpusFlagDefault string

	_ = cmd.PersistentFlags().String(cpusetCpusFlagName, cpusetCpusFlagDefault, cpusetCpusDescription)

	return nil
}

func registerResourcesCpusetMems(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpusetMemsDescription := `Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.`

	var cpusetMemsFlagName string
	if cmdPrefix == "" {
		cpusetMemsFlagName = "CpusetMems"
	} else {
		cpusetMemsFlagName = fmt.Sprintf("%v.CpusetMems", cmdPrefix)
	}

	var cpusetMemsFlagDefault string

	_ = cmd.PersistentFlags().String(cpusetMemsFlagName, cpusetMemsFlagDefault, cpusetMemsDescription)

	return nil
}

func registerResourcesDeviceCgroupRules(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: DeviceCgroupRules []string array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesDeviceRequests(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: DeviceRequests []*DeviceRequest array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesDevices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Devices []*DeviceMapping array type is not supported by go-swagger cli yet

	return nil
}

func registerResourcesIOMaximumBandwidth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	iOMaximumBandwidthDescription := `Maximum IO in bytes per second for the container system drive (Windows only)`

	var iOMaximumBandwidthFlagName string
	if cmdPrefix == "" {
		iOMaximumBandwidthFlagName = "IOMaximumBandwidth"
	} else {
		iOMaximumBandwidthFlagName = fmt.Sprintf("%v.IOMaximumBandwidth", cmdPrefix)
	}

	var iOMaximumBandwidthFlagDefault int64

	_ = cmd.PersistentFlags().Int64(iOMaximumBandwidthFlagName, iOMaximumBandwidthFlagDefault, iOMaximumBandwidthDescription)

	return nil
}

func registerResourcesIOMaximumIOps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	iOMaximumIOpsDescription := `Maximum IOps for the container system drive (Windows only)`

	var iOMaximumIOpsFlagName string
	if cmdPrefix == "" {
		iOMaximumIOpsFlagName = "IOMaximumIOps"
	} else {
		iOMaximumIOpsFlagName = fmt.Sprintf("%v.IOMaximumIOps", cmdPrefix)
	}

	var iOMaximumIOpsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(iOMaximumIOpsFlagName, iOMaximumIOpsFlagDefault, iOMaximumIOpsDescription)

	return nil
}

func registerResourcesInit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	initDescription := `Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.`

	var initFlagName string
	if cmdPrefix == "" {
		initFlagName = "Init"
	} else {
		initFlagName = fmt.Sprintf("%v.Init", cmdPrefix)
	}

	var initFlagDefault bool

	_ = cmd.PersistentFlags().Bool(initFlagName, initFlagDefault, initDescription)

	return nil
}

func registerResourcesKernelMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kernelMemoryDescription := `Kernel memory limit in bytes.`

	var kernelMemoryFlagName string
	if cmdPrefix == "" {
		kernelMemoryFlagName = "KernelMemory"
	} else {
		kernelMemoryFlagName = fmt.Sprintf("%v.KernelMemory", cmdPrefix)
	}

	var kernelMemoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(kernelMemoryFlagName, kernelMemoryFlagDefault, kernelMemoryDescription)

	return nil
}

func registerResourcesKernelMemoryTCP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kernelMemoryTcpDescription := `Hard limit for kernel TCP buffer memory (in bytes).`

	var kernelMemoryTcpFlagName string
	if cmdPrefix == "" {
		kernelMemoryTcpFlagName = "KernelMemoryTCP"
	} else {
		kernelMemoryTcpFlagName = fmt.Sprintf("%v.KernelMemoryTCP", cmdPrefix)
	}

	var kernelMemoryTcpFlagDefault int64

	_ = cmd.PersistentFlags().Int64(kernelMemoryTcpFlagName, kernelMemoryTcpFlagDefault, kernelMemoryTcpDescription)

	return nil
}

func registerResourcesMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	memoryDescription := `Memory limit in bytes.`

	var memoryFlagName string
	if cmdPrefix == "" {
		memoryFlagName = "Memory"
	} else {
		memoryFlagName = fmt.Sprintf("%v.Memory", cmdPrefix)
	}

	var memoryFlagDefault int64

	_ = cmd.PersistentFlags().Int64(memoryFlagName, memoryFlagDefault, memoryDescription)

	return nil
}

func registerResourcesMemoryReservation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	memoryReservationDescription := `Memory soft limit in bytes.`

	var memoryReservationFlagName string
	if cmdPrefix == "" {
		memoryReservationFlagName = "MemoryReservation"
	} else {
		memoryReservationFlagName = fmt.Sprintf("%v.MemoryReservation", cmdPrefix)
	}

	var memoryReservationFlagDefault int64

	_ = cmd.PersistentFlags().Int64(memoryReservationFlagName, memoryReservationFlagDefault, memoryReservationDescription)

	return nil
}

func registerResourcesMemorySwap(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	memorySwapDescription := `Total memory limit (memory + swap). Set as ` + "`" + `-1` + "`" + ` to enable unlimited swap.`

	var memorySwapFlagName string
	if cmdPrefix == "" {
		memorySwapFlagName = "MemorySwap"
	} else {
		memorySwapFlagName = fmt.Sprintf("%v.MemorySwap", cmdPrefix)
	}

	var memorySwapFlagDefault int64

	_ = cmd.PersistentFlags().Int64(memorySwapFlagName, memorySwapFlagDefault, memorySwapDescription)

	return nil
}

func registerResourcesMemorySwappiness(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	memorySwappinessDescription := `Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.`

	var memorySwappinessFlagName string
	if cmdPrefix == "" {
		memorySwappinessFlagName = "MemorySwappiness"
	} else {
		memorySwappinessFlagName = fmt.Sprintf("%v.MemorySwappiness", cmdPrefix)
	}

	var memorySwappinessFlagDefault int64

	_ = cmd.PersistentFlags().Int64(memorySwappinessFlagName, memorySwappinessFlagDefault, memorySwappinessDescription)

	return nil
}

func registerResourcesNanoCPUs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nanoCPUsDescription := `CPU quota in units of 10<sup>-9</sup> CPUs.`

	var nanoCPUsFlagName string
	if cmdPrefix == "" {
		nanoCPUsFlagName = "NanoCPUs"
	} else {
		nanoCPUsFlagName = fmt.Sprintf("%v.NanoCPUs", cmdPrefix)
	}

	var nanoCPUsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nanoCPUsFlagName, nanoCPUsFlagDefault, nanoCPUsDescription)

	return nil
}

func registerResourcesOomKillDisable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oomKillDisableDescription := `Disable OOM Killer for the container.`

	var oomKillDisableFlagName string
	if cmdPrefix == "" {
		oomKillDisableFlagName = "OomKillDisable"
	} else {
		oomKillDisableFlagName = fmt.Sprintf("%v.OomKillDisable", cmdPrefix)
	}

	var oomKillDisableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(oomKillDisableFlagName, oomKillDisableFlagDefault, oomKillDisableDescription)

	return nil
}

func registerResourcesPidsLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pidsLimitDescription := `Tune a container's PIDs limit. Set ` + "`" + `0` + "`" + ` or ` + "`" + `-1` + "`" + ` for unlimited, or ` + "`" + `null` + "`" + ` to not change.
`

	var pidsLimitFlagName string
	if cmdPrefix == "" {
		pidsLimitFlagName = "PidsLimit"
	} else {
		pidsLimitFlagName = fmt.Sprintf("%v.PidsLimit", cmdPrefix)
	}

	var pidsLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pidsLimitFlagName, pidsLimitFlagDefault, pidsLimitDescription)

	return nil
}

func registerResourcesUlimits(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Ulimits []*ResourcesUlimitsItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelResourcesFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, blkioDeviceReadBpsAdded := retrieveResourcesBlkioDeviceReadBpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blkioDeviceReadBpsAdded

	err, blkioDeviceReadIOpsAdded := retrieveResourcesBlkioDeviceReadIOpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blkioDeviceReadIOpsAdded

	err, blkioDeviceWriteBpsAdded := retrieveResourcesBlkioDeviceWriteBpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blkioDeviceWriteBpsAdded

	err, blkioDeviceWriteIOpsAdded := retrieveResourcesBlkioDeviceWriteIOpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blkioDeviceWriteIOpsAdded

	err, blkioWeightAdded := retrieveResourcesBlkioWeightFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blkioWeightAdded

	err, blkioWeightDeviceAdded := retrieveResourcesBlkioWeightDeviceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || blkioWeightDeviceAdded

	err, cgroupParentAdded := retrieveResourcesCgroupParentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cgroupParentAdded

	err, cpuCountAdded := retrieveResourcesCPUCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuCountAdded

	err, cpuPercentAdded := retrieveResourcesCPUPercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuPercentAdded

	err, cpuPeriodAdded := retrieveResourcesCPUPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuPeriodAdded

	err, cpuQuotaAdded := retrieveResourcesCPUQuotaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuQuotaAdded

	err, cpuRealtimePeriodAdded := retrieveResourcesCPURealtimePeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuRealtimePeriodAdded

	err, cpuRealtimeRuntimeAdded := retrieveResourcesCPURealtimeRuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuRealtimeRuntimeAdded

	err, cpuSharesAdded := retrieveResourcesCPUSharesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuSharesAdded

	err, cpusetCpusAdded := retrieveResourcesCpusetCpusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpusetCpusAdded

	err, cpusetMemsAdded := retrieveResourcesCpusetMemsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpusetMemsAdded

	err, deviceCgroupRulesAdded := retrieveResourcesDeviceCgroupRulesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceCgroupRulesAdded

	err, deviceRequestsAdded := retrieveResourcesDeviceRequestsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deviceRequestsAdded

	err, devicesAdded := retrieveResourcesDevicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || devicesAdded

	err, iOMaximumBandwidthAdded := retrieveResourcesIOMaximumBandwidthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || iOMaximumBandwidthAdded

	err, iOMaximumIOpsAdded := retrieveResourcesIOMaximumIOpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || iOMaximumIOpsAdded

	err, initAdded := retrieveResourcesInitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || initAdded

	err, kernelMemoryAdded := retrieveResourcesKernelMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kernelMemoryAdded

	err, kernelMemoryTcpAdded := retrieveResourcesKernelMemoryTCPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kernelMemoryTcpAdded

	err, memoryAdded := retrieveResourcesMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memoryAdded

	err, memoryReservationAdded := retrieveResourcesMemoryReservationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memoryReservationAdded

	err, memorySwapAdded := retrieveResourcesMemorySwapFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memorySwapAdded

	err, memorySwappinessAdded := retrieveResourcesMemorySwappinessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memorySwappinessAdded

	err, nanoCPUsAdded := retrieveResourcesNanoCPUsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nanoCPUsAdded

	err, oomKillDisableAdded := retrieveResourcesOomKillDisableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oomKillDisableAdded

	err, pidsLimitAdded := retrieveResourcesPidsLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pidsLimitAdded

	err, ulimitsAdded := retrieveResourcesUlimitsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ulimitsAdded

	return nil, retAdded
}

func retrieveResourcesBlkioDeviceReadBpsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	blkioDeviceReadBpsFlagName := fmt.Sprintf("%v.BlkioDeviceReadBps", cmdPrefix)
	if cmd.Flags().Changed(blkioDeviceReadBpsFlagName) {
		// warning: BlkioDeviceReadBps array type []*ThrottleDevice is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveResourcesBlkioDeviceReadIOpsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	blkioDeviceReadIOpsFlagName := fmt.Sprintf("%v.BlkioDeviceReadIOps", cmdPrefix)
	if cmd.Flags().Changed(blkioDeviceReadIOpsFlagName) {
		// warning: BlkioDeviceReadIOps array type []*ThrottleDevice is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveResourcesBlkioDeviceWriteBpsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	blkioDeviceWriteBpsFlagName := fmt.Sprintf("%v.BlkioDeviceWriteBps", cmdPrefix)
	if cmd.Flags().Changed(blkioDeviceWriteBpsFlagName) {
		// warning: BlkioDeviceWriteBps array type []*ThrottleDevice is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveResourcesBlkioDeviceWriteIOpsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	blkioDeviceWriteIOpsFlagName := fmt.Sprintf("%v.BlkioDeviceWriteIOps", cmdPrefix)
	if cmd.Flags().Changed(blkioDeviceWriteIOpsFlagName) {
		// warning: BlkioDeviceWriteIOps array type []*ThrottleDevice is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveResourcesBlkioWeightFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	blkioWeightFlagName := fmt.Sprintf("%v.BlkioWeight", cmdPrefix)
	if cmd.Flags().Changed(blkioWeightFlagName) {

		var blkioWeightFlagName string
		if cmdPrefix == "" {
			blkioWeightFlagName = "BlkioWeight"
		} else {
			blkioWeightFlagName = fmt.Sprintf("%v.BlkioWeight", cmdPrefix)
		}

		blkioWeightFlagValue, err := cmd.Flags().GetInt64(blkioWeightFlagName)
		if err != nil {
			return err, false
		}
		m.BlkioWeight = &blkioWeightFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesBlkioWeightDeviceFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	blkioWeightDeviceFlagName := fmt.Sprintf("%v.BlkioWeightDevice", cmdPrefix)
	if cmd.Flags().Changed(blkioWeightDeviceFlagName) {
		// warning: BlkioWeightDevice array type []*ResourcesBlkioWeightDeviceItems0 is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveResourcesCgroupParentFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cgroupParentFlagName := fmt.Sprintf("%v.CgroupParent", cmdPrefix)
	if cmd.Flags().Changed(cgroupParentFlagName) {

		var cgroupParentFlagName string
		if cmdPrefix == "" {
			cgroupParentFlagName = "CgroupParent"
		} else {
			cgroupParentFlagName = fmt.Sprintf("%v.CgroupParent", cmdPrefix)
		}

		cgroupParentFlagValue, err := cmd.Flags().GetString(cgroupParentFlagName)
		if err != nil {
			return err, false
		}
		m.CgroupParent = cgroupParentFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesCPUCountFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cpuCountFlagName := fmt.Sprintf("%v.CpuCount", cmdPrefix)
	if cmd.Flags().Changed(cpuCountFlagName) {

		var cpuCountFlagName string
		if cmdPrefix == "" {
			cpuCountFlagName = "CpuCount"
		} else {
			cpuCountFlagName = fmt.Sprintf("%v.CpuCount", cmdPrefix)
		}

		cpuCountFlagValue, err := cmd.Flags().GetInt64(cpuCountFlagName)
		if err != nil {
			return err, false
		}
		m.CPUCount = cpuCountFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesCPUPercentFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cpuPercentFlagName := fmt.Sprintf("%v.CpuPercent", cmdPrefix)
	if cmd.Flags().Changed(cpuPercentFlagName) {

		var cpuPercentFlagName string
		if cmdPrefix == "" {
			cpuPercentFlagName = "CpuPercent"
		} else {
			cpuPercentFlagName = fmt.Sprintf("%v.CpuPercent", cmdPrefix)
		}

		cpuPercentFlagValue, err := cmd.Flags().GetInt64(cpuPercentFlagName)
		if err != nil {
			return err, false
		}
		m.CPUPercent = cpuPercentFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesCPUPeriodFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cpuPeriodFlagName := fmt.Sprintf("%v.CpuPeriod", cmdPrefix)
	if cmd.Flags().Changed(cpuPeriodFlagName) {

		var cpuPeriodFlagName string
		if cmdPrefix == "" {
			cpuPeriodFlagName = "CpuPeriod"
		} else {
			cpuPeriodFlagName = fmt.Sprintf("%v.CpuPeriod", cmdPrefix)
		}

		cpuPeriodFlagValue, err := cmd.Flags().GetInt64(cpuPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.CPUPeriod = cpuPeriodFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesCPUQuotaFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cpuQuotaFlagName := fmt.Sprintf("%v.CpuQuota", cmdPrefix)
	if cmd.Flags().Changed(cpuQuotaFlagName) {

		var cpuQuotaFlagName string
		if cmdPrefix == "" {
			cpuQuotaFlagName = "CpuQuota"
		} else {
			cpuQuotaFlagName = fmt.Sprintf("%v.CpuQuota", cmdPrefix)
		}

		cpuQuotaFlagValue, err := cmd.Flags().GetInt64(cpuQuotaFlagName)
		if err != nil {
			return err, false
		}
		m.CPUQuota = cpuQuotaFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesCPURealtimePeriodFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cpuRealtimePeriodFlagName := fmt.Sprintf("%v.CpuRealtimePeriod", cmdPrefix)
	if cmd.Flags().Changed(cpuRealtimePeriodFlagName) {

		var cpuRealtimePeriodFlagName string
		if cmdPrefix == "" {
			cpuRealtimePeriodFlagName = "CpuRealtimePeriod"
		} else {
			cpuRealtimePeriodFlagName = fmt.Sprintf("%v.CpuRealtimePeriod", cmdPrefix)
		}

		cpuRealtimePeriodFlagValue, err := cmd.Flags().GetInt64(cpuRealtimePeriodFlagName)
		if err != nil {
			return err, false
		}
		m.CPURealtimePeriod = cpuRealtimePeriodFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesCPURealtimeRuntimeFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cpuRealtimeRuntimeFlagName := fmt.Sprintf("%v.CpuRealtimeRuntime", cmdPrefix)
	if cmd.Flags().Changed(cpuRealtimeRuntimeFlagName) {

		var cpuRealtimeRuntimeFlagName string
		if cmdPrefix == "" {
			cpuRealtimeRuntimeFlagName = "CpuRealtimeRuntime"
		} else {
			cpuRealtimeRuntimeFlagName = fmt.Sprintf("%v.CpuRealtimeRuntime", cmdPrefix)
		}

		cpuRealtimeRuntimeFlagValue, err := cmd.Flags().GetInt64(cpuRealtimeRuntimeFlagName)
		if err != nil {
			return err, false
		}
		m.CPURealtimeRuntime = cpuRealtimeRuntimeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesCPUSharesFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cpuSharesFlagName := fmt.Sprintf("%v.CpuShares", cmdPrefix)
	if cmd.Flags().Changed(cpuSharesFlagName) {

		var cpuSharesFlagName string
		if cmdPrefix == "" {
			cpuSharesFlagName = "CpuShares"
		} else {
			cpuSharesFlagName = fmt.Sprintf("%v.CpuShares", cmdPrefix)
		}

		cpuSharesFlagValue, err := cmd.Flags().GetInt64(cpuSharesFlagName)
		if err != nil {
			return err, false
		}
		m.CPUShares = cpuSharesFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesCpusetCpusFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cpusetCpusFlagName := fmt.Sprintf("%v.CpusetCpus", cmdPrefix)
	if cmd.Flags().Changed(cpusetCpusFlagName) {

		var cpusetCpusFlagName string
		if cmdPrefix == "" {
			cpusetCpusFlagName = "CpusetCpus"
		} else {
			cpusetCpusFlagName = fmt.Sprintf("%v.CpusetCpus", cmdPrefix)
		}

		cpusetCpusFlagValue, err := cmd.Flags().GetString(cpusetCpusFlagName)
		if err != nil {
			return err, false
		}
		m.CpusetCpus = cpusetCpusFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesCpusetMemsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cpusetMemsFlagName := fmt.Sprintf("%v.CpusetMems", cmdPrefix)
	if cmd.Flags().Changed(cpusetMemsFlagName) {

		var cpusetMemsFlagName string
		if cmdPrefix == "" {
			cpusetMemsFlagName = "CpusetMems"
		} else {
			cpusetMemsFlagName = fmt.Sprintf("%v.CpusetMems", cmdPrefix)
		}

		cpusetMemsFlagValue, err := cmd.Flags().GetString(cpusetMemsFlagName)
		if err != nil {
			return err, false
		}
		m.CpusetMems = cpusetMemsFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesDeviceCgroupRulesFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	deviceCgroupRulesFlagName := fmt.Sprintf("%v.DeviceCgroupRules", cmdPrefix)
	if cmd.Flags().Changed(deviceCgroupRulesFlagName) {
		// warning: DeviceCgroupRules array type []string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveResourcesDeviceRequestsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	deviceRequestsFlagName := fmt.Sprintf("%v.DeviceRequests", cmdPrefix)
	if cmd.Flags().Changed(deviceRequestsFlagName) {
		// warning: DeviceRequests array type []*DeviceRequest is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveResourcesDevicesFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	devicesFlagName := fmt.Sprintf("%v.Devices", cmdPrefix)
	if cmd.Flags().Changed(devicesFlagName) {
		// warning: Devices array type []*DeviceMapping is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveResourcesIOMaximumBandwidthFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	iOMaximumBandwidthFlagName := fmt.Sprintf("%v.IOMaximumBandwidth", cmdPrefix)
	if cmd.Flags().Changed(iOMaximumBandwidthFlagName) {

		var iOMaximumBandwidthFlagName string
		if cmdPrefix == "" {
			iOMaximumBandwidthFlagName = "IOMaximumBandwidth"
		} else {
			iOMaximumBandwidthFlagName = fmt.Sprintf("%v.IOMaximumBandwidth", cmdPrefix)
		}

		iOMaximumBandwidthFlagValue, err := cmd.Flags().GetInt64(iOMaximumBandwidthFlagName)
		if err != nil {
			return err, false
		}
		m.IOMaximumBandwidth = iOMaximumBandwidthFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesIOMaximumIOpsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	iOMaximumIOpsFlagName := fmt.Sprintf("%v.IOMaximumIOps", cmdPrefix)
	if cmd.Flags().Changed(iOMaximumIOpsFlagName) {

		var iOMaximumIOpsFlagName string
		if cmdPrefix == "" {
			iOMaximumIOpsFlagName = "IOMaximumIOps"
		} else {
			iOMaximumIOpsFlagName = fmt.Sprintf("%v.IOMaximumIOps", cmdPrefix)
		}

		iOMaximumIOpsFlagValue, err := cmd.Flags().GetInt64(iOMaximumIOpsFlagName)
		if err != nil {
			return err, false
		}
		m.IOMaximumIOps = iOMaximumIOpsFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesInitFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	initFlagName := fmt.Sprintf("%v.Init", cmdPrefix)
	if cmd.Flags().Changed(initFlagName) {

		var initFlagName string
		if cmdPrefix == "" {
			initFlagName = "Init"
		} else {
			initFlagName = fmt.Sprintf("%v.Init", cmdPrefix)
		}

		initFlagValue, err := cmd.Flags().GetBool(initFlagName)
		if err != nil {
			return err, false
		}
		m.Init = &initFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesKernelMemoryFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	kernelMemoryFlagName := fmt.Sprintf("%v.KernelMemory", cmdPrefix)
	if cmd.Flags().Changed(kernelMemoryFlagName) {

		var kernelMemoryFlagName string
		if cmdPrefix == "" {
			kernelMemoryFlagName = "KernelMemory"
		} else {
			kernelMemoryFlagName = fmt.Sprintf("%v.KernelMemory", cmdPrefix)
		}

		kernelMemoryFlagValue, err := cmd.Flags().GetInt64(kernelMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.KernelMemory = kernelMemoryFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesKernelMemoryTCPFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	kernelMemoryTcpFlagName := fmt.Sprintf("%v.KernelMemoryTCP", cmdPrefix)
	if cmd.Flags().Changed(kernelMemoryTcpFlagName) {

		var kernelMemoryTcpFlagName string
		if cmdPrefix == "" {
			kernelMemoryTcpFlagName = "KernelMemoryTCP"
		} else {
			kernelMemoryTcpFlagName = fmt.Sprintf("%v.KernelMemoryTCP", cmdPrefix)
		}

		kernelMemoryTcpFlagValue, err := cmd.Flags().GetInt64(kernelMemoryTcpFlagName)
		if err != nil {
			return err, false
		}
		m.KernelMemoryTCP = kernelMemoryTcpFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesMemoryFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	memoryFlagName := fmt.Sprintf("%v.Memory", cmdPrefix)
	if cmd.Flags().Changed(memoryFlagName) {

		var memoryFlagName string
		if cmdPrefix == "" {
			memoryFlagName = "Memory"
		} else {
			memoryFlagName = fmt.Sprintf("%v.Memory", cmdPrefix)
		}

		memoryFlagValue, err := cmd.Flags().GetInt64(memoryFlagName)
		if err != nil {
			return err, false
		}
		m.Memory = memoryFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesMemoryReservationFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	memoryReservationFlagName := fmt.Sprintf("%v.MemoryReservation", cmdPrefix)
	if cmd.Flags().Changed(memoryReservationFlagName) {

		var memoryReservationFlagName string
		if cmdPrefix == "" {
			memoryReservationFlagName = "MemoryReservation"
		} else {
			memoryReservationFlagName = fmt.Sprintf("%v.MemoryReservation", cmdPrefix)
		}

		memoryReservationFlagValue, err := cmd.Flags().GetInt64(memoryReservationFlagName)
		if err != nil {
			return err, false
		}
		m.MemoryReservation = memoryReservationFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesMemorySwapFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	memorySwapFlagName := fmt.Sprintf("%v.MemorySwap", cmdPrefix)
	if cmd.Flags().Changed(memorySwapFlagName) {

		var memorySwapFlagName string
		if cmdPrefix == "" {
			memorySwapFlagName = "MemorySwap"
		} else {
			memorySwapFlagName = fmt.Sprintf("%v.MemorySwap", cmdPrefix)
		}

		memorySwapFlagValue, err := cmd.Flags().GetInt64(memorySwapFlagName)
		if err != nil {
			return err, false
		}
		m.MemorySwap = memorySwapFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesMemorySwappinessFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	memorySwappinessFlagName := fmt.Sprintf("%v.MemorySwappiness", cmdPrefix)
	if cmd.Flags().Changed(memorySwappinessFlagName) {

		var memorySwappinessFlagName string
		if cmdPrefix == "" {
			memorySwappinessFlagName = "MemorySwappiness"
		} else {
			memorySwappinessFlagName = fmt.Sprintf("%v.MemorySwappiness", cmdPrefix)
		}

		memorySwappinessFlagValue, err := cmd.Flags().GetInt64(memorySwappinessFlagName)
		if err != nil {
			return err, false
		}
		m.MemorySwappiness = &memorySwappinessFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesNanoCPUsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nanoCPUsFlagName := fmt.Sprintf("%v.NanoCPUs", cmdPrefix)
	if cmd.Flags().Changed(nanoCPUsFlagName) {

		var nanoCPUsFlagName string
		if cmdPrefix == "" {
			nanoCPUsFlagName = "NanoCPUs"
		} else {
			nanoCPUsFlagName = fmt.Sprintf("%v.NanoCPUs", cmdPrefix)
		}

		nanoCPUsFlagValue, err := cmd.Flags().GetInt64(nanoCPUsFlagName)
		if err != nil {
			return err, false
		}
		m.NanoCPUs = nanoCPUsFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesOomKillDisableFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	oomKillDisableFlagName := fmt.Sprintf("%v.OomKillDisable", cmdPrefix)
	if cmd.Flags().Changed(oomKillDisableFlagName) {

		var oomKillDisableFlagName string
		if cmdPrefix == "" {
			oomKillDisableFlagName = "OomKillDisable"
		} else {
			oomKillDisableFlagName = fmt.Sprintf("%v.OomKillDisable", cmdPrefix)
		}

		oomKillDisableFlagValue, err := cmd.Flags().GetBool(oomKillDisableFlagName)
		if err != nil {
			return err, false
		}
		m.OomKillDisable = oomKillDisableFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesPidsLimitFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	pidsLimitFlagName := fmt.Sprintf("%v.PidsLimit", cmdPrefix)
	if cmd.Flags().Changed(pidsLimitFlagName) {

		var pidsLimitFlagName string
		if cmdPrefix == "" {
			pidsLimitFlagName = "PidsLimit"
		} else {
			pidsLimitFlagName = fmt.Sprintf("%v.PidsLimit", cmdPrefix)
		}

		pidsLimitFlagValue, err := cmd.Flags().GetInt64(pidsLimitFlagName)
		if err != nil {
			return err, false
		}
		m.PidsLimit = &pidsLimitFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveResourcesUlimitsFlags(depth int, m *models.Resources, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	ulimitsFlagName := fmt.Sprintf("%v.Ulimits", cmdPrefix)
	if cmd.Flags().Changed(ulimitsFlagName) {
		// warning: Ulimits array type []*ResourcesUlimitsItems0 is not supported by go-swagger cli yet
	}
	return nil, retAdded
}
