// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelRestartPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRestartPolicyMaximumRetryCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRestartPolicyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRestartPolicyMaximumRetryCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maximumRetryCountDescription := `If ` + "`" + `on-failure` + "`" + ` is used, the number of times to retry before giving up`

	var maximumRetryCountFlagName string
	if cmdPrefix == "" {
		maximumRetryCountFlagName = "MaximumRetryCount"
	} else {
		maximumRetryCountFlagName = fmt.Sprintf("%v.MaximumRetryCount", cmdPrefix)
	}

	var maximumRetryCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maximumRetryCountFlagName, maximumRetryCountFlagDefault, maximumRetryCountDescription)

	return nil
}

func registerRestartPolicyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `- Empty string means not to restart
- ` + "`" + `always` + "`" + ` Always restart
- ` + "`" + `unless-stopped` + "`" + ` Restart always except when the user has manually stopped the container
- ` + "`" + `on-failure` + "`" + ` Restart only when the container exit code is non-zero
`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRestartPolicyFlags(depth int, m *models.RestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, maximumRetryCountAdded := retrieveRestartPolicyMaximumRetryCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maximumRetryCountAdded

	err, nameAdded := retrieveRestartPolicyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveRestartPolicyMaximumRetryCountFlags(depth int, m *models.RestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	maximumRetryCountFlagName := fmt.Sprintf("%v.MaximumRetryCount", cmdPrefix)
	if cmd.Flags().Changed(maximumRetryCountFlagName) {

		var maximumRetryCountFlagName string
		if cmdPrefix == "" {
			maximumRetryCountFlagName = "MaximumRetryCount"
		} else {
			maximumRetryCountFlagName = fmt.Sprintf("%v.MaximumRetryCount", cmdPrefix)
		}

		maximumRetryCountFlagValue, err := cmd.Flags().GetInt64(maximumRetryCountFlagName)
		if err != nil {
			return err, false
		}
		m.MaximumRetryCount = maximumRetryCountFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveRestartPolicyNameFlags(depth int, m *models.RestartPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}
	return nil, retAdded
}
