// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelSecretSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSecretSpecData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSecretSpecDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSecretSpecLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSecretSpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSecretSpecTemplating(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSecretSpecData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataDescription := `Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-3.2))
data to store as secret.

This field is only used to _create_ a secret, and is not returned by
other endpoints.
`

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "Data"
	} else {
		dataFlagName = fmt.Sprintf("%v.Data", cmdPrefix)
	}

	var dataFlagDefault string

	_ = cmd.PersistentFlags().String(dataFlagName, dataFlagDefault, dataDescription)

	return nil
}

func registerSecretSpecDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var driverFlagName string
	if cmdPrefix == "" {
		driverFlagName = "Driver"
	} else {
		driverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
	}

	registerModelSecretSpecFlags(depth+1, driverFlagName, cmd)

	return nil
}

func registerSecretSpecLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerSecretSpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `User-defined name of the secret.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerSecretSpecTemplating(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var templatingFlagName string
	if cmdPrefix == "" {
		templatingFlagName = "Templating"
	} else {
		templatingFlagName = fmt.Sprintf("%v.Templating", cmdPrefix)
	}

	registerModelSecretSpecFlags(depth+1, templatingFlagName, cmd)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSecretSpecFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveSecretSpecDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	err, driverAdded := retrieveSecretSpecDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || driverAdded

	err, labelsAdded := retrieveSecretSpecLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	err, nameAdded := retrieveSecretSpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, templatingAdded := retrieveSecretSpecTemplatingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || templatingAdded

	return nil, retAdded
}

func retrieveSecretSpecDataFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	dataFlagName := fmt.Sprintf("%v.Data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {

		var dataFlagName string
		if cmdPrefix == "" {
			dataFlagName = "Data"
		} else {
			dataFlagName = fmt.Sprintf("%v.Data", cmdPrefix)
		}

		dataFlagValue, err := cmd.Flags().GetString(dataFlagName)
		if err != nil {
			return err, false
		}
		m.Data = dataFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveSecretSpecDriverFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	driverFlagName := fmt.Sprintf("%v.Driver", cmdPrefix)
	if cmd.Flags().Changed(driverFlagName) {

		driverFlagValue := &models.SecretSpec{}
		err, added := retrieveModelSecretSpecFlags(depth+1, driverFlagValue, driverFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveSecretSpecLabelsFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	labelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveSecretSpecNameFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveSecretSpecTemplatingFlags(depth int, m *models.SecretSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	templatingFlagName := fmt.Sprintf("%v.Templating", cmdPrefix)
	if cmd.Flags().Changed(templatingFlagName) {

		templatingFlagValue := &models.SecretSpec{}
		err, added := retrieveModelSecretSpecFlags(depth+1, templatingFlagValue, templatingFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}
