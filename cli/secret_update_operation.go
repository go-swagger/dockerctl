// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/dockerctl/client/secret"
	"github.com/go-openapi/dockerctl/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSecretSecretUpdateCmd returns a cmd to handle operation secretUpdate
func makeOperationSecretSecretUpdateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "SecretUpdate",
		Short: ``,
		RunE:  runOperationSecretSecretUpdate,
	}

	if err := registerOperationSecretSecretUpdateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSecretSecretUpdate uses cmd flags to call endpoint api
func runOperationSecretSecretUpdate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := secret.NewSecretUpdateParams()
	if err, _ := retrieveOperationSecretSecretUpdateBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSecretSecretUpdateIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSecretSecretUpdateVersionFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationSecretSecretUpdateResult(appCli.Secret.SecretUpdate(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationSecretSecretUpdateBodyFlag(m *secret.SecretUpdateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.SecretSpec{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.SecretSpec: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.SecretSpec{}
	}
	err, added := retrieveModelSecretSpecFlags(0, bodyValueModel, "secretSpec", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	bodyValueDebugBytes, err := json.Marshal(m.Body)
	if err != nil {
		return err, false
	}
	logDebugf("Body payload: %v", string(bodyValueDebugBytes))
	return nil, retAdded
}
func retrieveOperationSecretSecretUpdateIDFlag(m *secret.SecretUpdateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSecretSecretUpdateVersionFlag(m *secret.SecretUpdateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

	}
	return nil, retAdded
}

// printOperationSecretSecretUpdateResult prints output to stdout
func printOperationSecretSecretUpdateResult(resp0 *secret.SecretUpdateOK, respErr error) error {
	if respErr != nil {
		return respErr
	}

	// warning: non schema response secretUpdateOK is not supported by go-swagger cli yet.

	return nil
}

// registerOperationSecretSecretUpdateParamFlags registers all flags needed to fill params
func registerOperationSecretSecretUpdateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSecretSecretUpdateBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSecretSecretUpdateIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSecretSecretUpdateVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSecretSecretUpdateBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	exampleBodyStr := "go-swagger TODO"
	_ = cmd.PersistentFlags().String(bodyFlagName, "", fmt.Sprintf("Optional json string for [body] of form %v.The spec of the secret to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [SecretInspect endpoint](#operation/SecretInspect) response values.", string(exampleBodyStr)))

	// add flags for body
	if err := registerModelSecretSpecFlags(0, "secretSpec", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationSecretSecretUpdateIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. The ID or name of the secret`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationSecretSecretUpdateVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Required. The version number of the secret object being updated. This is required to avoid conflicting writes.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}
