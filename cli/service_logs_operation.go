// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/dockerctl/client/service"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationServiceServiceLogsCmd returns a cmd to handle operation serviceLogs
func makeOperationServiceServiceLogsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "ServiceLogs",
		Short: `Get ` + "`" + `stdout` + "`" + ` and ` + "`" + `stderr` + "`" + ` logs from a service. See also [` + "`" + `/containers/{id}/logs` + "`" + `](#operation/ContainerLogs).

**Note**: This endpoint works only for services with the ` + "`" + `local` + "`" + `, ` + "`" + `json-file` + "`" + ` or ` + "`" + `journald` + "`" + ` logging drivers.
`,
		RunE: runOperationServiceServiceLogs,
	}

	if err := registerOperationServiceServiceLogsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationServiceServiceLogs uses cmd flags to call endpoint api
func runOperationServiceServiceLogs(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := service.NewServiceLogsParams()
	if err, _ := retrieveOperationServiceServiceLogsDetailsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServiceServiceLogsFollowFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServiceServiceLogsIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServiceServiceLogsSinceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServiceServiceLogsStderrFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServiceServiceLogsStdoutFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServiceServiceLogsTailFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServiceServiceLogsTimestampsFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationServiceServiceLogsResult(appCli.Service.ServiceLogs(params, &bytes.Buffer{})); err != nil {
		return err
	}
	return nil
}

func retrieveOperationServiceServiceLogsDetailsFlag(m *service.ServiceLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("details") {

		var detailsFlagName string
		if cmdPrefix == "" {
			detailsFlagName = "details"
		} else {
			detailsFlagName = fmt.Sprintf("%v.details", cmdPrefix)
		}

		detailsFlagValue, err := cmd.Flags().GetBool(detailsFlagName)
		if err != nil {
			return err, false
		}
		m.Details = &detailsFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServiceServiceLogsFollowFlag(m *service.ServiceLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("follow") {

		var followFlagName string
		if cmdPrefix == "" {
			followFlagName = "follow"
		} else {
			followFlagName = fmt.Sprintf("%v.follow", cmdPrefix)
		}

		followFlagValue, err := cmd.Flags().GetBool(followFlagName)
		if err != nil {
			return err, false
		}
		m.Follow = &followFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServiceServiceLogsIDFlag(m *service.ServiceLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServiceServiceLogsSinceFlag(m *service.ServiceLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("since") {

		var sinceFlagName string
		if cmdPrefix == "" {
			sinceFlagName = "since"
		} else {
			sinceFlagName = fmt.Sprintf("%v.since", cmdPrefix)
		}

		sinceFlagValue, err := cmd.Flags().GetInt64(sinceFlagName)
		if err != nil {
			return err, false
		}
		m.Since = &sinceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServiceServiceLogsStderrFlag(m *service.ServiceLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stderr") {

		var stderrFlagName string
		if cmdPrefix == "" {
			stderrFlagName = "stderr"
		} else {
			stderrFlagName = fmt.Sprintf("%v.stderr", cmdPrefix)
		}

		stderrFlagValue, err := cmd.Flags().GetBool(stderrFlagName)
		if err != nil {
			return err, false
		}
		m.Stderr = &stderrFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServiceServiceLogsStdoutFlag(m *service.ServiceLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stdout") {

		var stdoutFlagName string
		if cmdPrefix == "" {
			stdoutFlagName = "stdout"
		} else {
			stdoutFlagName = fmt.Sprintf("%v.stdout", cmdPrefix)
		}

		stdoutFlagValue, err := cmd.Flags().GetBool(stdoutFlagName)
		if err != nil {
			return err, false
		}
		m.Stdout = &stdoutFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServiceServiceLogsTailFlag(m *service.ServiceLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("tail") {

		var tailFlagName string
		if cmdPrefix == "" {
			tailFlagName = "tail"
		} else {
			tailFlagName = fmt.Sprintf("%v.tail", cmdPrefix)
		}

		tailFlagValue, err := cmd.Flags().GetString(tailFlagName)
		if err != nil {
			return err, false
		}
		m.Tail = &tailFlagValue

	}
	return nil, retAdded
}
func retrieveOperationServiceServiceLogsTimestampsFlag(m *service.ServiceLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("timestamps") {

		var timestampsFlagName string
		if cmdPrefix == "" {
			timestampsFlagName = "timestamps"
		} else {
			timestampsFlagName = fmt.Sprintf("%v.timestamps", cmdPrefix)
		}

		timestampsFlagValue, err := cmd.Flags().GetBool(timestampsFlagName)
		if err != nil {
			return err, false
		}
		m.Timestamps = &timestampsFlagValue

	}
	return nil, retAdded
}

// printOperationServiceServiceLogsResult prints output to stdout
func printOperationServiceServiceLogsResult(resp0 *service.ServiceLogsOK, respErr error) error {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*service.ServiceLogsOK)
		if ok {
			if !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*service.ServiceLogsNotFound)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*service.ServiceLogsInternalServerError)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*service.ServiceLogsServiceUnavailable)
		if ok {
			if !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		return respErr
	}

	if !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		fmt.Println(string(msgStr))
	}

	return nil
}

// registerOperationServiceServiceLogsParamFlags registers all flags needed to fill params
func registerOperationServiceServiceLogsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationServiceServiceLogsDetailsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServiceServiceLogsFollowParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServiceServiceLogsIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServiceServiceLogsSinceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServiceServiceLogsStderrParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServiceServiceLogsStdoutParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServiceServiceLogsTailParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServiceServiceLogsTimestampsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationServiceServiceLogsDetailsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	detailsDescription := `Show service context and extra details provided to logs.`

	var detailsFlagName string
	if cmdPrefix == "" {
		detailsFlagName = "details"
	} else {
		detailsFlagName = fmt.Sprintf("%v.details", cmdPrefix)
	}

	var detailsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(detailsFlagName, detailsFlagDefault, detailsDescription)

	return nil
}
func registerOperationServiceServiceLogsFollowParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	followDescription := `Keep connection after returning logs.`

	var followFlagName string
	if cmdPrefix == "" {
		followFlagName = "follow"
	} else {
		followFlagName = fmt.Sprintf("%v.follow", cmdPrefix)
	}

	var followFlagDefault bool

	_ = cmd.PersistentFlags().Bool(followFlagName, followFlagDefault, followDescription)

	return nil
}
func registerOperationServiceServiceLogsIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID or name of the service`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationServiceServiceLogsSinceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sinceDescription := `Only return logs since this time, as a UNIX timestamp`

	var sinceFlagName string
	if cmdPrefix == "" {
		sinceFlagName = "since"
	} else {
		sinceFlagName = fmt.Sprintf("%v.since", cmdPrefix)
	}

	var sinceFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sinceFlagName, sinceFlagDefault, sinceDescription)

	return nil
}
func registerOperationServiceServiceLogsStderrParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	stderrDescription := `Return logs from ` + "`" + `stderr` + "`" + ``

	var stderrFlagName string
	if cmdPrefix == "" {
		stderrFlagName = "stderr"
	} else {
		stderrFlagName = fmt.Sprintf("%v.stderr", cmdPrefix)
	}

	var stderrFlagDefault bool

	_ = cmd.PersistentFlags().Bool(stderrFlagName, stderrFlagDefault, stderrDescription)

	return nil
}
func registerOperationServiceServiceLogsStdoutParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	stdoutDescription := `Return logs from ` + "`" + `stdout` + "`" + ``

	var stdoutFlagName string
	if cmdPrefix == "" {
		stdoutFlagName = "stdout"
	} else {
		stdoutFlagName = fmt.Sprintf("%v.stdout", cmdPrefix)
	}

	var stdoutFlagDefault bool

	_ = cmd.PersistentFlags().Bool(stdoutFlagName, stdoutFlagDefault, stdoutDescription)

	return nil
}
func registerOperationServiceServiceLogsTailParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	tailDescription := `Only return this number of log lines from the end of the logs. Specify as an integer or ` + "`" + `all` + "`" + ` to output all log lines.`

	var tailFlagName string
	if cmdPrefix == "" {
		tailFlagName = "tail"
	} else {
		tailFlagName = fmt.Sprintf("%v.tail", cmdPrefix)
	}

	var tailFlagDefault string = "all"

	_ = cmd.PersistentFlags().String(tailFlagName, tailFlagDefault, tailDescription)

	return nil
}
func registerOperationServiceServiceLogsTimestampsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	timestampsDescription := `Add timestamps to every log line`

	var timestampsFlagName string
	if cmdPrefix == "" {
		timestampsFlagName = "timestamps"
	} else {
		timestampsFlagName = fmt.Sprintf("%v.timestamps", cmdPrefix)
	}

	var timestampsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(timestampsFlagName, timestampsFlagDefault, timestampsDescription)

	return nil
}
