// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/dockerctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for Service

// register flags to command
func registerModelServiceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServiceStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceUpdateStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := ``

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "CreatedAt"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerServiceEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var endpointFlagName string
	if cmdPrefix == "" {
		endpointFlagName = "Endpoint"
	} else {
		endpointFlagName = fmt.Sprintf("%v.Endpoint", cmdPrefix)
	}

	if err := registerModelServiceEndpointFlags(depth+1, endpointFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "ID"
	} else {
		idFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerServiceServiceStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var serviceStatusFlagName string
	if cmdPrefix == "" {
		serviceStatusFlagName = "ServiceStatus"
	} else {
		serviceStatusFlagName = fmt.Sprintf("%v.ServiceStatus", cmdPrefix)
	}

	if err := registerModelServiceServiceStatusFlags(depth+1, serviceStatusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var specFlagName string
	if cmdPrefix == "" {
		specFlagName = "Spec"
	} else {
		specFlagName = fmt.Sprintf("%v.Spec", cmdPrefix)
	}

	if err := registerModelServiceSpecFlags(depth+1, specFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceUpdateStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var updateStatusFlagName string
	if cmdPrefix == "" {
		updateStatusFlagName = "UpdateStatus"
	} else {
		updateStatusFlagName = fmt.Sprintf("%v.UpdateStatus", cmdPrefix)
	}

	if err := registerModelServiceUpdateStatusFlags(depth+1, updateStatusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := ``

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "UpdatedAt"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	}

	var updatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(updatedAtFlagName, updatedAtFlagDefault, updatedAtDescription)

	return nil
}

func registerServiceVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "Version"
	} else {
		versionFlagName = fmt.Sprintf("%v.Version", cmdPrefix)
	}

	if err := registerModelObjectVersionFlags(depth+1, versionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAtAdded := retrieveServiceCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, endpointAdded := retrieveServiceEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointAdded

	err, idAdded := retrieveServiceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, serviceStatusAdded := retrieveServiceServiceStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceStatusAdded

	err, specAdded := retrieveServiceSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specAdded

	err, updateStatusAdded := retrieveServiceUpdateStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateStatusAdded

	err, updatedAtAdded := retrieveServiceUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	err, versionAdded := retrieveServiceVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveServiceCreatedAtFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.CreatedAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "CreatedAt"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.CreatedAt", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceEndpointFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointFlagName := fmt.Sprintf("%v.Endpoint", cmdPrefix)
	if cmd.Flags().Changed(endpointFlagName) {
		// info: complex object Endpoint ServiceEndpoint is retrieved outside this Changed() block
	}
	endpointFlagValue := m.Endpoint
	if swag.IsZero(endpointFlagValue) {
		endpointFlagValue = &models.ServiceEndpoint{}
	}

	err, endpointAdded := retrieveModelServiceEndpointFlags(depth+1, endpointFlagValue, endpointFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointAdded
	if endpointAdded {
		m.Endpoint = endpointFlagValue
	}

	return nil, retAdded
}

func retrieveServiceIDFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "ID"
		} else {
			idFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServiceStatusFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serviceStatusFlagName := fmt.Sprintf("%v.ServiceStatus", cmdPrefix)
	if cmd.Flags().Changed(serviceStatusFlagName) {
		// info: complex object ServiceStatus ServiceServiceStatus is retrieved outside this Changed() block
	}
	serviceStatusFlagValue := m.ServiceStatus
	if swag.IsZero(serviceStatusFlagValue) {
		serviceStatusFlagValue = &models.ServiceServiceStatus{}
	}

	err, serviceStatusAdded := retrieveModelServiceServiceStatusFlags(depth+1, serviceStatusFlagValue, serviceStatusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serviceStatusAdded
	if serviceStatusAdded {
		m.ServiceStatus = serviceStatusFlagValue
	}

	return nil, retAdded
}

func retrieveServiceSpecFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	specFlagName := fmt.Sprintf("%v.Spec", cmdPrefix)
	if cmd.Flags().Changed(specFlagName) {
		// info: complex object Spec ServiceSpec is retrieved outside this Changed() block
	}
	specFlagValue := m.Spec
	if swag.IsZero(specFlagValue) {
		specFlagValue = &models.ServiceSpec{}
	}

	err, specAdded := retrieveModelServiceSpecFlags(depth+1, specFlagValue, specFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specAdded
	if specAdded {
		m.Spec = specFlagValue
	}

	return nil, retAdded
}

func retrieveServiceUpdateStatusFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateStatusFlagName := fmt.Sprintf("%v.UpdateStatus", cmdPrefix)
	if cmd.Flags().Changed(updateStatusFlagName) {
		// info: complex object UpdateStatus ServiceUpdateStatus is retrieved outside this Changed() block
	}
	updateStatusFlagValue := m.UpdateStatus
	if swag.IsZero(updateStatusFlagValue) {
		updateStatusFlagValue = &models.ServiceUpdateStatus{}
	}

	err, updateStatusAdded := retrieveModelServiceUpdateStatusFlags(depth+1, updateStatusFlagValue, updateStatusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateStatusAdded
	if updateStatusAdded {
		m.UpdateStatus = updateStatusFlagValue
	}

	return nil, retAdded
}

func retrieveServiceUpdatedAtFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "UpdatedAt"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.UpdatedAt", cmdPrefix)
		}

		updatedAtFlagValue, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceVersionFlags(depth int, m *models.Service, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.Version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {
		// info: complex object Version ObjectVersion is retrieved outside this Changed() block
	}
	versionFlagValue := m.Version
	if swag.IsZero(versionFlagValue) {
		versionFlagValue = &models.ObjectVersion{}
	}

	err, versionAdded := retrieveModelObjectVersionFlags(depth+1, versionFlagValue, versionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded
	if versionAdded {
		m.Version = versionFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for ServiceEndpoint

// register flags to command
func registerModelServiceEndpointFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceEndpointPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceEndpointSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceEndpointVirtualIPs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceEndpointPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Ports []*EndpointPortConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerServiceEndpointSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var specFlagName string
	if cmdPrefix == "" {
		specFlagName = "Spec"
	} else {
		specFlagName = fmt.Sprintf("%v.Spec", cmdPrefix)
	}

	if err := registerModelEndpointSpecFlags(depth+1, specFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceEndpointVirtualIPs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: VirtualIPs []*ServiceEndpointVirtualIPsItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceEndpointFlags(depth int, m *models.ServiceEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, portsAdded := retrieveServiceEndpointPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portsAdded

	err, specAdded := retrieveServiceEndpointSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specAdded

	err, virtualIPsAdded := retrieveServiceEndpointVirtualIPsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || virtualIPsAdded

	return nil, retAdded
}

func retrieveServiceEndpointPortsFlags(depth int, m *models.ServiceEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portsFlagName := fmt.Sprintf("%v.Ports", cmdPrefix)
	if cmd.Flags().Changed(portsFlagName) {
		// warning: Ports array type []*EndpointPortConfig is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceEndpointSpecFlags(depth int, m *models.ServiceEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	specFlagName := fmt.Sprintf("%v.Spec", cmdPrefix)
	if cmd.Flags().Changed(specFlagName) {
		// info: complex object Spec EndpointSpec is retrieved outside this Changed() block
	}
	specFlagValue := m.Spec
	if swag.IsZero(specFlagValue) {
		specFlagValue = &models.EndpointSpec{}
	}

	err, specAdded := retrieveModelEndpointSpecFlags(depth+1, specFlagValue, specFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specAdded
	if specAdded {
		m.Spec = specFlagValue
	}

	return nil, retAdded
}

func retrieveServiceEndpointVirtualIPsFlags(depth int, m *models.ServiceEndpoint, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	virtualIPsFlagName := fmt.Sprintf("%v.VirtualIPs", cmdPrefix)
	if cmd.Flags().Changed(virtualIPsFlagName) {
		// warning: VirtualIPs array type []*ServiceEndpointVirtualIPsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for ServiceEndpointVirtualIPsItems0

// register flags to command
func registerModelServiceEndpointVirtualIPsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceEndpointVirtualIPsItems0Addr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceEndpointVirtualIPsItems0NetworkID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceEndpointVirtualIPsItems0Addr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addrDescription := ``

	var addrFlagName string
	if cmdPrefix == "" {
		addrFlagName = "Addr"
	} else {
		addrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
	}

	var addrFlagDefault string

	_ = cmd.PersistentFlags().String(addrFlagName, addrFlagDefault, addrDescription)

	return nil
}

func registerServiceEndpointVirtualIPsItems0NetworkID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	networkIdDescription := ``

	var networkIdFlagName string
	if cmdPrefix == "" {
		networkIdFlagName = "NetworkID"
	} else {
		networkIdFlagName = fmt.Sprintf("%v.NetworkID", cmdPrefix)
	}

	var networkIdFlagDefault string

	_ = cmd.PersistentFlags().String(networkIdFlagName, networkIdFlagDefault, networkIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceEndpointVirtualIPsItems0Flags(depth int, m *models.ServiceEndpointVirtualIPsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addrAdded := retrieveServiceEndpointVirtualIPsItems0AddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addrAdded

	err, networkIdAdded := retrieveServiceEndpointVirtualIPsItems0NetworkIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networkIdAdded

	return nil, retAdded
}

func retrieveServiceEndpointVirtualIPsItems0AddrFlags(depth int, m *models.ServiceEndpointVirtualIPsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addrFlagName := fmt.Sprintf("%v.Addr", cmdPrefix)
	if cmd.Flags().Changed(addrFlagName) {

		var addrFlagName string
		if cmdPrefix == "" {
			addrFlagName = "Addr"
		} else {
			addrFlagName = fmt.Sprintf("%v.Addr", cmdPrefix)
		}

		addrFlagValue, err := cmd.Flags().GetString(addrFlagName)
		if err != nil {
			return err, false
		}
		m.Addr = addrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceEndpointVirtualIPsItems0NetworkIDFlags(depth int, m *models.ServiceEndpointVirtualIPsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	networkIdFlagName := fmt.Sprintf("%v.NetworkID", cmdPrefix)
	if cmd.Flags().Changed(networkIdFlagName) {

		var networkIdFlagName string
		if cmdPrefix == "" {
			networkIdFlagName = "NetworkID"
		} else {
			networkIdFlagName = fmt.Sprintf("%v.NetworkID", cmdPrefix)
		}

		networkIdFlagValue, err := cmd.Flags().GetString(networkIdFlagName)
		if err != nil {
			return err, false
		}
		m.NetworkID = networkIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ServiceServiceStatus

// register flags to command
func registerModelServiceServiceStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceServiceStatusDesiredTasks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServiceStatusRunningTasks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceServiceStatusDesiredTasks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive DesiredTasks uint64 is not supported by go-swagger cli yet

	return nil
}

func registerServiceServiceStatusRunningTasks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive RunningTasks uint64 is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceServiceStatusFlags(depth int, m *models.ServiceServiceStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, desiredTasksAdded := retrieveServiceServiceStatusDesiredTasksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || desiredTasksAdded

	err, runningTasksAdded := retrieveServiceServiceStatusRunningTasksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runningTasksAdded

	return nil, retAdded
}

func retrieveServiceServiceStatusDesiredTasksFlags(depth int, m *models.ServiceServiceStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	desiredTasksFlagName := fmt.Sprintf("%v.DesiredTasks", cmdPrefix)
	if cmd.Flags().Changed(desiredTasksFlagName) {

		// warning: primitive DesiredTasks uint64 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServiceStatusRunningTasksFlags(depth int, m *models.ServiceServiceStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runningTasksFlagName := fmt.Sprintf("%v.RunningTasks", cmdPrefix)
	if cmd.Flags().Changed(runningTasksFlagName) {

		// warning: primitive RunningTasks uint64 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ServiceUpdateStatus

// register flags to command
func registerModelServiceUpdateStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceUpdateStatusCompletedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceUpdateStatusMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceUpdateStatusStartedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceUpdateStatusState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceUpdateStatusCompletedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	completedAtDescription := ``

	var completedAtFlagName string
	if cmdPrefix == "" {
		completedAtFlagName = "CompletedAt"
	} else {
		completedAtFlagName = fmt.Sprintf("%v.CompletedAt", cmdPrefix)
	}

	var completedAtFlagDefault string

	_ = cmd.PersistentFlags().String(completedAtFlagName, completedAtFlagDefault, completedAtDescription)

	return nil
}

func registerServiceUpdateStatusMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := ``

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "Message"
	} else {
		messageFlagName = fmt.Sprintf("%v.Message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerServiceUpdateStatusStartedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startedAtDescription := ``

	var startedAtFlagName string
	if cmdPrefix == "" {
		startedAtFlagName = "StartedAt"
	} else {
		startedAtFlagName = fmt.Sprintf("%v.StartedAt", cmdPrefix)
	}

	var startedAtFlagDefault string

	_ = cmd.PersistentFlags().String(startedAtFlagName, startedAtFlagDefault, startedAtDescription)

	return nil
}

func registerServiceUpdateStatusState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stateDescription := ``

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "State"
	} else {
		stateFlagName = fmt.Sprintf("%v.State", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceUpdateStatusFlags(depth int, m *models.ServiceUpdateStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, completedAtAdded := retrieveServiceUpdateStatusCompletedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || completedAtAdded

	err, messageAdded := retrieveServiceUpdateStatusMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, startedAtAdded := retrieveServiceUpdateStatusStartedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startedAtAdded

	err, stateAdded := retrieveServiceUpdateStatusStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stateAdded

	return nil, retAdded
}

func retrieveServiceUpdateStatusCompletedAtFlags(depth int, m *models.ServiceUpdateStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	completedAtFlagName := fmt.Sprintf("%v.CompletedAt", cmdPrefix)
	if cmd.Flags().Changed(completedAtFlagName) {

		var completedAtFlagName string
		if cmdPrefix == "" {
			completedAtFlagName = "CompletedAt"
		} else {
			completedAtFlagName = fmt.Sprintf("%v.CompletedAt", cmdPrefix)
		}

		completedAtFlagValue, err := cmd.Flags().GetString(completedAtFlagName)
		if err != nil {
			return err, false
		}
		m.CompletedAt = completedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceUpdateStatusMessageFlags(depth int, m *models.ServiceUpdateStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.Message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "Message"
		} else {
			messageFlagName = fmt.Sprintf("%v.Message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceUpdateStatusStartedAtFlags(depth int, m *models.ServiceUpdateStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startedAtFlagName := fmt.Sprintf("%v.StartedAt", cmdPrefix)
	if cmd.Flags().Changed(startedAtFlagName) {

		var startedAtFlagName string
		if cmdPrefix == "" {
			startedAtFlagName = "StartedAt"
		} else {
			startedAtFlagName = fmt.Sprintf("%v.StartedAt", cmdPrefix)
		}

		startedAtFlagValue, err := cmd.Flags().GetString(startedAtFlagName)
		if err != nil {
			return err, false
		}
		m.StartedAt = startedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceUpdateStatusStateFlags(depth int, m *models.ServiceUpdateStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stateFlagName := fmt.Sprintf("%v.State", cmdPrefix)
	if cmd.Flags().Changed(stateFlagName) {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "State"
		} else {
			stateFlagName = fmt.Sprintf("%v.State", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = stateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
