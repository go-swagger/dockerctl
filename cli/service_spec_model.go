// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelServiceSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceSpecEndpointSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecNetworks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecRollbackConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecTaskTemplate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceSpecUpdateConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceSpecEndpointSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var endpointSpecFlagName string
	if cmdPrefix == "" {
		endpointSpecFlagName = "EndpointSpec"
	} else {
		endpointSpecFlagName = fmt.Sprintf("%v.EndpointSpec", cmdPrefix)
	}

	registerModelServiceSpecFlags(depth+1, endpointSpecFlagName, cmd)

	return nil
}

func registerServiceSpecLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerServiceSpecMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var modeFlagName string
	if cmdPrefix == "" {
		modeFlagName = "Mode"
	} else {
		modeFlagName = fmt.Sprintf("%v.Mode", cmdPrefix)
	}

	registerModelServiceSpecFlags(depth+1, modeFlagName, cmd)

	return nil
}

func registerServiceSpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name of the service.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerServiceSpecNetworks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Networks []*NetworkAttachmentConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerServiceSpecRollbackConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var rollbackConfigFlagName string
	if cmdPrefix == "" {
		rollbackConfigFlagName = "RollbackConfig"
	} else {
		rollbackConfigFlagName = fmt.Sprintf("%v.RollbackConfig", cmdPrefix)
	}

	registerModelServiceSpecFlags(depth+1, rollbackConfigFlagName, cmd)

	return nil
}

func registerServiceSpecTaskTemplate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var taskTemplateFlagName string
	if cmdPrefix == "" {
		taskTemplateFlagName = "TaskTemplate"
	} else {
		taskTemplateFlagName = fmt.Sprintf("%v.TaskTemplate", cmdPrefix)
	}

	registerModelServiceSpecFlags(depth+1, taskTemplateFlagName, cmd)

	return nil
}

func registerServiceSpecUpdateConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var updateConfigFlagName string
	if cmdPrefix == "" {
		updateConfigFlagName = "UpdateConfig"
	} else {
		updateConfigFlagName = fmt.Sprintf("%v.UpdateConfig", cmdPrefix)
	}

	registerModelServiceSpecFlags(depth+1, updateConfigFlagName, cmd)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceSpecFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endpointSpecAdded := retrieveServiceSpecEndpointSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointSpecAdded

	err, labelsAdded := retrieveServiceSpecLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	err, modeAdded := retrieveServiceSpecModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modeAdded

	err, nameAdded := retrieveServiceSpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, networksAdded := retrieveServiceSpecNetworksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networksAdded

	err, rollbackConfigAdded := retrieveServiceSpecRollbackConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rollbackConfigAdded

	err, taskTemplateAdded := retrieveServiceSpecTaskTemplateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskTemplateAdded

	err, updateConfigAdded := retrieveServiceSpecUpdateConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateConfigAdded

	return nil, retAdded
}

func retrieveServiceSpecEndpointSpecFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	endpointSpecFlagName := fmt.Sprintf("%v.EndpointSpec", cmdPrefix)
	if cmd.Flags().Changed(endpointSpecFlagName) {

		endpointSpecFlagValue := &models.ServiceSpec{}
		err, added := retrieveModelServiceSpecFlags(depth+1, endpointSpecFlagValue, endpointSpecFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveServiceSpecLabelsFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	labelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveServiceSpecModeFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	modeFlagName := fmt.Sprintf("%v.Mode", cmdPrefix)
	if cmd.Flags().Changed(modeFlagName) {

		modeFlagValue := &models.ServiceSpec{}
		err, added := retrieveModelServiceSpecFlags(depth+1, modeFlagValue, modeFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveServiceSpecNameFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveServiceSpecNetworksFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	networksFlagName := fmt.Sprintf("%v.Networks", cmdPrefix)
	if cmd.Flags().Changed(networksFlagName) {
		// warning: Networks array type []*NetworkAttachmentConfig is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveServiceSpecRollbackConfigFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	rollbackConfigFlagName := fmt.Sprintf("%v.RollbackConfig", cmdPrefix)
	if cmd.Flags().Changed(rollbackConfigFlagName) {

		rollbackConfigFlagValue := &models.ServiceSpec{}
		err, added := retrieveModelServiceSpecFlags(depth+1, rollbackConfigFlagValue, rollbackConfigFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveServiceSpecTaskTemplateFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	taskTemplateFlagName := fmt.Sprintf("%v.TaskTemplate", cmdPrefix)
	if cmd.Flags().Changed(taskTemplateFlagName) {

		taskTemplateFlagValue := &models.ServiceSpec{}
		err, added := retrieveModelServiceSpecFlags(depth+1, taskTemplateFlagValue, taskTemplateFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveServiceSpecUpdateConfigFlags(depth int, m *models.ServiceSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	updateConfigFlagName := fmt.Sprintf("%v.UpdateConfig", cmdPrefix)
	if cmd.Flags().Changed(updateConfigFlagName) {

		updateConfigFlagValue := &models.ServiceSpec{}
		err, added := retrieveModelServiceSpecFlags(depth+1, updateConfigFlagValue, updateConfigFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}
