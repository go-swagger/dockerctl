// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/session"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSessionSessionCmd returns a cmd to handle operation session
func makeOperationSessionSessionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "Session",
		Short: `Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.

### Hijacking

This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.

For example, the client sends this request to upgrade the connection:

` + "`" + `` + "`" + `` + "`" + `
POST /session HTTP/1.1
Upgrade: h2c
Connection: Upgrade
` + "`" + `` + "`" + `` + "`" + `

The Docker daemon will respond with a ` + "`" + `101 UPGRADED` + "`" + ` response follow with the raw stream:

` + "`" + `` + "`" + `` + "`" + `
HTTP/1.1 101 UPGRADED
Connection: Upgrade
Upgrade: h2c
` + "`" + `` + "`" + `` + "`" + `
`,
		RunE: runOperationSessionSession,
	}

	if err := registerOperationSessionSessionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSessionSession uses cmd flags to call endpoint api
func runOperationSessionSession(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := session.NewSessionParams()
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSessionSessionResult(appCli.Session.Session(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSessionSessionParamFlags registers all flags needed to fill params
func registerOperationSessionSessionParamFlags(cmd *cobra.Command) error {
	return nil
}

// parseOperationSessionSessionResult parses request result and return the string content
func parseOperationSessionSessionResult(respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning sessionSwitchingProtocols is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*session.SessionBadRequest)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*session.SessionInternalServerError)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}
	return "", nil
}
