// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/swarm"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSwarmSwarmInitCmd returns a cmd to handle operation swarmInit
func makeOperationSwarmSwarmInitCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "SwarmInit",
		Short: ``,
		RunE:  runOperationSwarmSwarmInit,
	}

	if err := registerOperationSwarmSwarmInitParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSwarmSwarmInit uses cmd flags to call endpoint api
func runOperationSwarmSwarmInit(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := swarm.NewSwarmInitParams()
	if err, _ := retrieveOperationSwarmSwarmInitBodyFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationSwarmSwarmInitResult(appCli.Swarm.SwarmInit(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationSwarmSwarmInitBodyFlag(m *swarm.SwarmInitParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := swarm.SwarmInitBody{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in SwarmInitBody: %v", err), false
		}
		m.Body = bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = swarm.SwarmInitBody{}
	}
	err, added := retrieveModelSwarmInitBodyFlags(0, &bodyValueModel, "swarmInitBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	bodyValueDebugBytes, err := json.Marshal(m.Body)
	if err != nil {
		return err, false
	}
	logDebugf("Body payload: %v", string(bodyValueDebugBytes))
	return nil, retAdded
}

// printOperationSwarmSwarmInitResult prints output to stdout
func printOperationSwarmSwarmInitResult(resp0 *swarm.SwarmInitOK, respErr error) error {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*swarm.SwarmInitOK)
		if ok {
			if !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*swarm.SwarmInitBadRequest)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*swarm.SwarmInitInternalServerError)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*swarm.SwarmInitServiceUnavailable)
		if ok {
			if !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		return respErr
	}

	if !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		fmt.Println(string(msgStr))
	}

	return nil
}

// registerOperationSwarmSwarmInitParamFlags registers all flags needed to fill params
func registerOperationSwarmSwarmInitParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSwarmSwarmInitBodyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSwarmSwarmInitBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	exampleBodyStr := "go-swagger TODO"
	_ = cmd.PersistentFlags().String(bodyFlagName, "", fmt.Sprintf("Optional json string for [body] of form %v.", string(exampleBodyStr)))

	// add flags for body
	if err := registerModelSwarmInitBodyFlags(0, "swarmInitBody", cmd); err != nil {
		return err
	}

	return nil
}

// register flags to command
func registerModelSwarmInitBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmInitBodyAdvertiseAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInitBodyDataPathAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInitBodyDataPathPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInitBodyDefaultAddrPool(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInitBodyForceNewCluster(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInitBodyListenAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInitBodySpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmInitBodySubnetSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmInitBodyAdvertiseAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	advertiseAddrDescription := `Externally reachable address advertised to other nodes. This can either be an address/port combination in the form ` + "`" + `192.168.1.1:4567` + "`" + `, or an interface followed by a port number, like ` + "`" + `eth0:4567` + "`" + `. If the port number is omitted, the port number from the listen address is used. If ` + "`" + `AdvertiseAddr` + "`" + ` is not specified, it will be automatically detected when possible.`

	var advertiseAddrFlagName string
	if cmdPrefix == "" {
		advertiseAddrFlagName = "AdvertiseAddr"
	} else {
		advertiseAddrFlagName = fmt.Sprintf("%v.AdvertiseAddr", cmdPrefix)
	}

	var advertiseAddrFlagDefault string

	_ = cmd.PersistentFlags().String(advertiseAddrFlagName, advertiseAddrFlagDefault, advertiseAddrDescription)

	return nil
}

func registerSwarmInitBodyDataPathAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dataPathAddrDescription := `Address or interface to use for data path traffic (format: ` + "`" + `<ip|interface>` + "`" + `), for example,  ` + "`" + `192.168.1.1` + "`" + `,
or an interface, like ` + "`" + `eth0` + "`" + `. If ` + "`" + `DataPathAddr` + "`" + ` is unspecified, the same address as ` + "`" + `AdvertiseAddr` + "`" + `
is used.

The ` + "`" + `DataPathAddr` + "`" + ` specifies the address that global scope network drivers will publish towards other
nodes in order to reach the containers running on this node. Using this parameter it is possible to
separate the container data traffic from the management traffic of the cluster.
`

	var dataPathAddrFlagName string
	if cmdPrefix == "" {
		dataPathAddrFlagName = "DataPathAddr"
	} else {
		dataPathAddrFlagName = fmt.Sprintf("%v.DataPathAddr", cmdPrefix)
	}

	var dataPathAddrFlagDefault string

	_ = cmd.PersistentFlags().String(dataPathAddrFlagName, dataPathAddrFlagDefault, dataPathAddrDescription)

	return nil
}

func registerSwarmInitBodyDataPathPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive DataPathPort uint32 is not supported by go-swagger cli yet

	return nil
}

func registerSwarmInitBodyDefaultAddrPool(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: DefaultAddrPool []string array type is not supported by go-swagger cli yet

	return nil
}

func registerSwarmInitBodyForceNewCluster(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceNewClusterDescription := `Force creation of a new swarm.`

	var forceNewClusterFlagName string
	if cmdPrefix == "" {
		forceNewClusterFlagName = "ForceNewCluster"
	} else {
		forceNewClusterFlagName = fmt.Sprintf("%v.ForceNewCluster", cmdPrefix)
	}

	var forceNewClusterFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceNewClusterFlagName, forceNewClusterFlagDefault, forceNewClusterDescription)

	return nil
}

func registerSwarmInitBodyListenAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	listenAddrDescription := `Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form ` + "`" + `192.168.1.1:4567` + "`" + `, or an interface followed by a port number, like ` + "`" + `eth0:4567` + "`" + `. If the port number is omitted, the default swarm listening port is used.`

	var listenAddrFlagName string
	if cmdPrefix == "" {
		listenAddrFlagName = "ListenAddr"
	} else {
		listenAddrFlagName = fmt.Sprintf("%v.ListenAddr", cmdPrefix)
	}

	var listenAddrFlagDefault string

	_ = cmd.PersistentFlags().String(listenAddrFlagName, listenAddrFlagDefault, listenAddrDescription)

	return nil
}

func registerSwarmInitBodySpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var specFlagName string
	if cmdPrefix == "" {
		specFlagName = "Spec"
	} else {
		specFlagName = fmt.Sprintf("%v.Spec", cmdPrefix)
	}

	registerModelSwarmInitBodyFlags(depth+1, specFlagName, cmd)

	return nil
}

func registerSwarmInitBodySubnetSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive SubnetSize uint32 is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmInitBodyFlags(depth int, m *swarm.SwarmInitBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, advertiseAddrAdded := retrieveSwarmInitBodyAdvertiseAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || advertiseAddrAdded

	err, dataPathAddrAdded := retrieveSwarmInitBodyDataPathAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataPathAddrAdded

	err, dataPathPortAdded := retrieveSwarmInitBodyDataPathPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataPathPortAdded

	err, defaultAddrPoolAdded := retrieveSwarmInitBodyDefaultAddrPoolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultAddrPoolAdded

	err, forceNewClusterAdded := retrieveSwarmInitBodyForceNewClusterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceNewClusterAdded

	err, listenAddrAdded := retrieveSwarmInitBodyListenAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || listenAddrAdded

	err, specAdded := retrieveSwarmInitBodySpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specAdded

	err, subnetSizeAdded := retrieveSwarmInitBodySubnetSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subnetSizeAdded

	return nil, retAdded
}

func retrieveSwarmInitBodyAdvertiseAddrFlags(depth int, m *swarm.SwarmInitBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	advertiseAddrFlagName := fmt.Sprintf("%v.AdvertiseAddr", cmdPrefix)
	if cmd.Flags().Changed(advertiseAddrFlagName) {

		var advertiseAddrFlagName string
		if cmdPrefix == "" {
			advertiseAddrFlagName = "AdvertiseAddr"
		} else {
			advertiseAddrFlagName = fmt.Sprintf("%v.AdvertiseAddr", cmdPrefix)
		}

		advertiseAddrFlagValue, err := cmd.Flags().GetString(advertiseAddrFlagName)
		if err != nil {
			return err, false
		}
		m.AdvertiseAddr = advertiseAddrFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveSwarmInitBodyDataPathAddrFlags(depth int, m *swarm.SwarmInitBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	dataPathAddrFlagName := fmt.Sprintf("%v.DataPathAddr", cmdPrefix)
	if cmd.Flags().Changed(dataPathAddrFlagName) {

		var dataPathAddrFlagName string
		if cmdPrefix == "" {
			dataPathAddrFlagName = "DataPathAddr"
		} else {
			dataPathAddrFlagName = fmt.Sprintf("%v.DataPathAddr", cmdPrefix)
		}

		dataPathAddrFlagValue, err := cmd.Flags().GetString(dataPathAddrFlagName)
		if err != nil {
			return err, false
		}
		m.DataPathAddr = dataPathAddrFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveSwarmInitBodyDataPathPortFlags(depth int, m *swarm.SwarmInitBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	dataPathPortFlagName := fmt.Sprintf("%v.DataPathPort", cmdPrefix)
	if cmd.Flags().Changed(dataPathPortFlagName) {

		// warning: primitive DataPathPort uint32 is not supported by go-swagger cli yet

		retAdded = true
	}
	return nil, retAdded
}

func retrieveSwarmInitBodyDefaultAddrPoolFlags(depth int, m *swarm.SwarmInitBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	defaultAddrPoolFlagName := fmt.Sprintf("%v.DefaultAddrPool", cmdPrefix)
	if cmd.Flags().Changed(defaultAddrPoolFlagName) {
		// warning: DefaultAddrPool array type []string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveSwarmInitBodyForceNewClusterFlags(depth int, m *swarm.SwarmInitBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	forceNewClusterFlagName := fmt.Sprintf("%v.ForceNewCluster", cmdPrefix)
	if cmd.Flags().Changed(forceNewClusterFlagName) {

		var forceNewClusterFlagName string
		if cmdPrefix == "" {
			forceNewClusterFlagName = "ForceNewCluster"
		} else {
			forceNewClusterFlagName = fmt.Sprintf("%v.ForceNewCluster", cmdPrefix)
		}

		forceNewClusterFlagValue, err := cmd.Flags().GetBool(forceNewClusterFlagName)
		if err != nil {
			return err, false
		}
		m.ForceNewCluster = forceNewClusterFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveSwarmInitBodyListenAddrFlags(depth int, m *swarm.SwarmInitBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	listenAddrFlagName := fmt.Sprintf("%v.ListenAddr", cmdPrefix)
	if cmd.Flags().Changed(listenAddrFlagName) {

		var listenAddrFlagName string
		if cmdPrefix == "" {
			listenAddrFlagName = "ListenAddr"
		} else {
			listenAddrFlagName = fmt.Sprintf("%v.ListenAddr", cmdPrefix)
		}

		listenAddrFlagValue, err := cmd.Flags().GetString(listenAddrFlagName)
		if err != nil {
			return err, false
		}
		m.ListenAddr = listenAddrFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveSwarmInitBodySpecFlags(depth int, m *swarm.SwarmInitBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	specFlagName := fmt.Sprintf("%v.Spec", cmdPrefix)
	if cmd.Flags().Changed(specFlagName) {

		specFlagValue := &swarm.SwarmInitBody{}
		err, added := retrieveModelSwarmInitBodyFlags(depth+1, specFlagValue, specFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveSwarmInitBodySubnetSizeFlags(depth int, m *swarm.SwarmInitBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	subnetSizeFlagName := fmt.Sprintf("%v.SubnetSize", cmdPrefix)
	if cmd.Flags().Changed(subnetSizeFlagName) {

		// warning: primitive SubnetSize uint32 is not supported by go-swagger cli yet

		retAdded = true
	}
	return nil, retAdded
}
