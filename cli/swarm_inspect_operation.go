// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/dockerctl/client/swarm"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSwarmSwarmInspectCmd returns a cmd to handle operation swarmInspect
func makeOperationSwarmSwarmInspectCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "SwarmInspect",
		Short: ``,
		RunE:  runOperationSwarmSwarmInspect,
	}

	if err := registerOperationSwarmSwarmInspectParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSwarmSwarmInspect uses cmd flags to call endpoint api
func runOperationSwarmSwarmInspect(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := swarm.NewSwarmInspectParams()
	// make request and then print result
	if err := printOperationSwarmSwarmInspectResult(appCli.Swarm.SwarmInspect(params)); err != nil {
		return err
	}
	return nil
}

// printOperationSwarmSwarmInspectResult prints output to stdout
func printOperationSwarmSwarmInspectResult(resp0 *swarm.SwarmInspectOK, respErr error) error {
	if respErr != nil {
		return respErr
	}

	if !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return err
		}
		fmt.Println(string(msgStr))
	}

	return nil
}

// registerOperationSwarmSwarmInspectParamFlags registers all flags needed to fill params
func registerOperationSwarmSwarmInspectParamFlags(cmd *cobra.Command) error {
	return nil
}
