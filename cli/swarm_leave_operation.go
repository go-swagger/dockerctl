// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/dockerctl/client/swarm"

	"github.com/spf13/cobra"
)

// makeOperationSwarmSwarmLeaveCmd returns a cmd to handle operation swarmLeave
func makeOperationSwarmSwarmLeaveCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "SwarmLeave",
		Short: ``,
		RunE:  runOperationSwarmSwarmLeave,
	}

	if err := registerOperationSwarmSwarmLeaveParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSwarmSwarmLeave uses cmd flags to call endpoint api
func runOperationSwarmSwarmLeave(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := swarm.NewSwarmLeaveParams()
	if err, _ := retrieveOperationSwarmSwarmLeaveForceFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationSwarmSwarmLeaveResult(appCli.Swarm.SwarmLeave(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationSwarmSwarmLeaveForceFlag(m *swarm.SwarmLeaveParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("force") {

		var forceFlagName string
		if cmdPrefix == "" {
			forceFlagName = "force"
		} else {
			forceFlagName = fmt.Sprintf("%v.force", cmdPrefix)
		}

		forceFlagValue, err := cmd.Flags().GetBool(forceFlagName)
		if err != nil {
			return err, false
		}
		m.Force = &forceFlagValue

	}
	return nil, retAdded
}

// printOperationSwarmSwarmLeaveResult prints output to stdout
func printOperationSwarmSwarmLeaveResult(resp0 *swarm.SwarmLeaveOK, respErr error) error {
	if respErr != nil {
		return respErr
	}

	// warning: non schema response swarmLeaveOK is not supported by go-swagger cli yet.

	return nil
}

// registerOperationSwarmSwarmLeaveParamFlags registers all flags needed to fill params
func registerOperationSwarmSwarmLeaveParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSwarmSwarmLeaveForceParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSwarmSwarmLeaveForceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	forceDescription := `Force leave swarm, even if this is the last manager or that it will break the cluster.`

	var forceFlagName string
	if cmdPrefix == "" {
		forceFlagName = "force"
	} else {
		forceFlagName = fmt.Sprintf("%v.force", cmdPrefix)
	}

	var forceFlagDefault bool

	_ = cmd.PersistentFlags().Bool(forceFlagName, forceFlagDefault, forceDescription)

	return nil
}
