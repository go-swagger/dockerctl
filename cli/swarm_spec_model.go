// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelSwarmSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmSpecCAConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecDispatcher(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecEncryptionConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecOrchestration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecRaft(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSwarmSpecTaskDefaults(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmSpecCAConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cAConfigFlagName string
	if cmdPrefix == "" {
		cAConfigFlagName = "CAConfig"
	} else {
		cAConfigFlagName = fmt.Sprintf("%v.CAConfig", cmdPrefix)
	}

	registerModelSwarmSpecFlags(depth+1, cAConfigFlagName, cmd)

	return nil
}

func registerSwarmSpecDispatcher(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dispatcherFlagName string
	if cmdPrefix == "" {
		dispatcherFlagName = "Dispatcher"
	} else {
		dispatcherFlagName = fmt.Sprintf("%v.Dispatcher", cmdPrefix)
	}

	registerModelSwarmSpecFlags(depth+1, dispatcherFlagName, cmd)

	return nil
}

func registerSwarmSpecEncryptionConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var encryptionConfigFlagName string
	if cmdPrefix == "" {
		encryptionConfigFlagName = "EncryptionConfig"
	} else {
		encryptionConfigFlagName = fmt.Sprintf("%v.EncryptionConfig", cmdPrefix)
	}

	registerModelSwarmSpecFlags(depth+1, encryptionConfigFlagName, cmd)

	return nil
}

func registerSwarmSpecLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Labels map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerSwarmSpecName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name of the swarm.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerSwarmSpecOrchestration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var orchestrationFlagName string
	if cmdPrefix == "" {
		orchestrationFlagName = "Orchestration"
	} else {
		orchestrationFlagName = fmt.Sprintf("%v.Orchestration", cmdPrefix)
	}

	registerModelSwarmSpecFlags(depth+1, orchestrationFlagName, cmd)

	return nil
}

func registerSwarmSpecRaft(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var raftFlagName string
	if cmdPrefix == "" {
		raftFlagName = "Raft"
	} else {
		raftFlagName = fmt.Sprintf("%v.Raft", cmdPrefix)
	}

	registerModelSwarmSpecFlags(depth+1, raftFlagName, cmd)

	return nil
}

func registerSwarmSpecTaskDefaults(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var taskDefaultsFlagName string
	if cmdPrefix == "" {
		taskDefaultsFlagName = "TaskDefaults"
	} else {
		taskDefaultsFlagName = fmt.Sprintf("%v.TaskDefaults", cmdPrefix)
	}

	registerModelSwarmSpecFlags(depth+1, taskDefaultsFlagName, cmd)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmSpecFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cAConfigAdded := retrieveSwarmSpecCAConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cAConfigAdded

	err, dispatcherAdded := retrieveSwarmSpecDispatcherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dispatcherAdded

	err, encryptionConfigAdded := retrieveSwarmSpecEncryptionConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || encryptionConfigAdded

	err, labelsAdded := retrieveSwarmSpecLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	err, nameAdded := retrieveSwarmSpecNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, orchestrationAdded := retrieveSwarmSpecOrchestrationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || orchestrationAdded

	err, raftAdded := retrieveSwarmSpecRaftFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || raftAdded

	err, taskDefaultsAdded := retrieveSwarmSpecTaskDefaultsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskDefaultsAdded

	return nil, retAdded
}

func retrieveSwarmSpecCAConfigFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	cAConfigFlagName := fmt.Sprintf("%v.CAConfig", cmdPrefix)
	if cmd.Flags().Changed(cAConfigFlagName) {

		cAConfigFlagValue := &models.SwarmSpec{}
		err, added := retrieveModelSwarmSpecFlags(depth+1, cAConfigFlagValue, cAConfigFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveSwarmSpecDispatcherFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	dispatcherFlagName := fmt.Sprintf("%v.Dispatcher", cmdPrefix)
	if cmd.Flags().Changed(dispatcherFlagName) {

		dispatcherFlagValue := &models.SwarmSpec{}
		err, added := retrieveModelSwarmSpecFlags(depth+1, dispatcherFlagValue, dispatcherFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveSwarmSpecEncryptionConfigFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	encryptionConfigFlagName := fmt.Sprintf("%v.EncryptionConfig", cmdPrefix)
	if cmd.Flags().Changed(encryptionConfigFlagName) {

		encryptionConfigFlagValue := &models.SwarmSpec{}
		err, added := retrieveModelSwarmSpecFlags(depth+1, encryptionConfigFlagValue, encryptionConfigFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveSwarmSpecLabelsFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	labelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: Labels map type map[string]string is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveSwarmSpecNameFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveSwarmSpecOrchestrationFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	orchestrationFlagName := fmt.Sprintf("%v.Orchestration", cmdPrefix)
	if cmd.Flags().Changed(orchestrationFlagName) {

		orchestrationFlagValue := &models.SwarmSpec{}
		err, added := retrieveModelSwarmSpecFlags(depth+1, orchestrationFlagValue, orchestrationFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveSwarmSpecRaftFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	raftFlagName := fmt.Sprintf("%v.Raft", cmdPrefix)
	if cmd.Flags().Changed(raftFlagName) {

		raftFlagValue := &models.SwarmSpec{}
		err, added := retrieveModelSwarmSpecFlags(depth+1, raftFlagValue, raftFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveSwarmSpecTaskDefaultsFlags(depth int, m *models.SwarmSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	taskDefaultsFlagName := fmt.Sprintf("%v.TaskDefaults", cmdPrefix)
	if cmd.Flags().Changed(taskDefaultsFlagName) {

		taskDefaultsFlagValue := &models.SwarmSpec{}
		err, added := retrieveModelSwarmSpecFlags(depth+1, taskDefaultsFlagValue, taskDefaultsFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}
