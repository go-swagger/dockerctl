// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/swarm"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSwarmSwarmUnlockCmd returns a cmd to handle operation swarmUnlock
func makeOperationSwarmSwarmUnlockCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "SwarmUnlock",
		Short: ``,
		RunE:  runOperationSwarmSwarmUnlock,
	}

	if err := registerOperationSwarmSwarmUnlockParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSwarmSwarmUnlock uses cmd flags to call endpoint api
func runOperationSwarmSwarmUnlock(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := swarm.NewSwarmUnlockParams()
	if err, _ := retrieveOperationSwarmSwarmUnlockBodyFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationSwarmSwarmUnlockResult(appCli.Swarm.SwarmUnlock(params)); err != nil {
		return err
	}
	return nil
}

// registerOperationSwarmSwarmUnlockParamFlags registers all flags needed to fill params
func registerOperationSwarmSwarmUnlockParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSwarmSwarmUnlockBodyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSwarmSwarmUnlockBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	exampleBodyStr := "go-swagger TODO"
	_ = cmd.PersistentFlags().String(bodyFlagName, "", fmt.Sprintf("Optional json string for [body] of form %v.", string(exampleBodyStr)))

	// add flags for body
	if err := registerModelSwarmUnlockBodyFlags(0, "swarmUnlockBody", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationSwarmSwarmUnlockBodyFlag(m *swarm.SwarmUnlockParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := swarm.SwarmUnlockBody{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in SwarmUnlockBody: %v", err), false
		}
		m.Body = bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = swarm.SwarmUnlockBody{}
	}
	err, added := retrieveModelSwarmUnlockBodyFlags(0, &bodyValueModel, "swarmUnlockBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	bodyValueDebugBytes, err := json.Marshal(m.Body)
	if err != nil {
		return err, false
	}
	logDebugf("Body payload: %v", string(bodyValueDebugBytes))
	return nil, retAdded
}

// printOperationSwarmSwarmUnlockResult prints output to stdout
func printOperationSwarmSwarmUnlockResult(resp0 *swarm.SwarmUnlockOK, respErr error) error {
	if respErr != nil {

		// Non schema case: warning swarmUnlockOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*swarm.SwarmUnlockInternalServerError)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*swarm.SwarmUnlockServiceUnavailable)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return err
				}
				fmt.Println(string(msgStr))
				return nil
			}
		}

		return respErr
	}

	// warning: non schema response swarmUnlockOK is not supported by go-swagger cli yet.

	return nil
}

// register flags to command
func registerModelSwarmUnlockBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSwarmUnlockBodyUnlockKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSwarmUnlockBodyUnlockKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unlockKeyDescription := `The swarm's unlock key.`

	var unlockKeyFlagName string
	if cmdPrefix == "" {
		unlockKeyFlagName = "UnlockKey"
	} else {
		unlockKeyFlagName = fmt.Sprintf("%v.UnlockKey", cmdPrefix)
	}

	var unlockKeyFlagDefault string

	_ = cmd.PersistentFlags().String(unlockKeyFlagName, unlockKeyFlagDefault, unlockKeyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSwarmUnlockBodyFlags(depth int, m *swarm.SwarmUnlockBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, unlockKeyAdded := retrieveSwarmUnlockBodyUnlockKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unlockKeyAdded

	return nil, retAdded
}

func retrieveSwarmUnlockBodyUnlockKeyFlags(depth int, m *swarm.SwarmUnlockBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unlockKeyFlagName := fmt.Sprintf("%v.UnlockKey", cmdPrefix)
	if cmd.Flags().Changed(unlockKeyFlagName) {

		var unlockKeyFlagName string
		if cmdPrefix == "" {
			unlockKeyFlagName = "UnlockKey"
		} else {
			unlockKeyFlagName = fmt.Sprintf("%v.UnlockKey", cmdPrefix)
		}

		unlockKeyFlagValue, err := cmd.Flags().GetString(unlockKeyFlagName)
		if err != nil {
			return err, false
		}
		m.UnlockKey = unlockKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}
