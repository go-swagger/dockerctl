// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/dockerctl/client/swarm"
	"github.com/go-swagger/dockerctl/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSwarmSwarmUpdateCmd returns a cmd to handle operation swarmUpdate
func makeOperationSwarmSwarmUpdateCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "SwarmUpdate",
		Short: ``,
		RunE:  runOperationSwarmSwarmUpdate,
	}

	if err := registerOperationSwarmSwarmUpdateParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSwarmSwarmUpdate uses cmd flags to call endpoint api
func runOperationSwarmSwarmUpdate(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := swarm.NewSwarmUpdateParams()
	if err, _ := retrieveOperationSwarmSwarmUpdateBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSwarmSwarmUpdateRotateManagerTokenFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSwarmSwarmUpdateRotateManagerUnlockKeyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSwarmSwarmUpdateRotateWorkerTokenFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationSwarmSwarmUpdateVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSwarmSwarmUpdateResult(appCli.Swarm.SwarmUpdate(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationSwarmSwarmUpdateParamFlags registers all flags needed to fill params
func registerOperationSwarmSwarmUpdateParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSwarmSwarmUpdateBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSwarmSwarmUpdateRotateManagerTokenParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSwarmSwarmUpdateRotateManagerUnlockKeyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSwarmSwarmUpdateRotateWorkerTokenParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSwarmSwarmUpdateVersionParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSwarmSwarmUpdateBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelSwarmSpecFlags(0, "swarmSpec", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationSwarmSwarmUpdateRotateManagerTokenParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	rotateManagerTokenDescription := `Rotate the manager join token.`

	var rotateManagerTokenFlagName string
	if cmdPrefix == "" {
		rotateManagerTokenFlagName = "rotateManagerToken"
	} else {
		rotateManagerTokenFlagName = fmt.Sprintf("%v.rotateManagerToken", cmdPrefix)
	}

	var rotateManagerTokenFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rotateManagerTokenFlagName, rotateManagerTokenFlagDefault, rotateManagerTokenDescription)

	return nil
}
func registerOperationSwarmSwarmUpdateRotateManagerUnlockKeyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	rotateManagerUnlockKeyDescription := `Rotate the manager unlock key.`

	var rotateManagerUnlockKeyFlagName string
	if cmdPrefix == "" {
		rotateManagerUnlockKeyFlagName = "rotateManagerUnlockKey"
	} else {
		rotateManagerUnlockKeyFlagName = fmt.Sprintf("%v.rotateManagerUnlockKey", cmdPrefix)
	}

	var rotateManagerUnlockKeyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rotateManagerUnlockKeyFlagName, rotateManagerUnlockKeyFlagDefault, rotateManagerUnlockKeyDescription)

	return nil
}
func registerOperationSwarmSwarmUpdateRotateWorkerTokenParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	rotateWorkerTokenDescription := `Rotate the worker join token.`

	var rotateWorkerTokenFlagName string
	if cmdPrefix == "" {
		rotateWorkerTokenFlagName = "rotateWorkerToken"
	} else {
		rotateWorkerTokenFlagName = fmt.Sprintf("%v.rotateWorkerToken", cmdPrefix)
	}

	var rotateWorkerTokenFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rotateWorkerTokenFlagName, rotateWorkerTokenFlagDefault, rotateWorkerTokenDescription)

	return nil
}
func registerOperationSwarmSwarmUpdateVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	versionDescription := `Required. The version number of the swarm object being updated. This is required to avoid conflicting writes.`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func retrieveOperationSwarmSwarmUpdateBodyFlag(m *swarm.SwarmUpdateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.SwarmSpec{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.SwarmSpec: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.SwarmSpec{}
	}
	err, added := retrieveModelSwarmSpecFlags(0, bodyValueModel, "swarmSpec", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationSwarmSwarmUpdateRotateManagerTokenFlag(m *swarm.SwarmUpdateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rotateManagerToken") {

		var rotateManagerTokenFlagName string
		if cmdPrefix == "" {
			rotateManagerTokenFlagName = "rotateManagerToken"
		} else {
			rotateManagerTokenFlagName = fmt.Sprintf("%v.rotateManagerToken", cmdPrefix)
		}

		rotateManagerTokenFlagValue, err := cmd.Flags().GetBool(rotateManagerTokenFlagName)
		if err != nil {
			return err, false
		}
		m.RotateManagerToken = &rotateManagerTokenFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSwarmSwarmUpdateRotateManagerUnlockKeyFlag(m *swarm.SwarmUpdateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rotateManagerUnlockKey") {

		var rotateManagerUnlockKeyFlagName string
		if cmdPrefix == "" {
			rotateManagerUnlockKeyFlagName = "rotateManagerUnlockKey"
		} else {
			rotateManagerUnlockKeyFlagName = fmt.Sprintf("%v.rotateManagerUnlockKey", cmdPrefix)
		}

		rotateManagerUnlockKeyFlagValue, err := cmd.Flags().GetBool(rotateManagerUnlockKeyFlagName)
		if err != nil {
			return err, false
		}
		m.RotateManagerUnlockKey = &rotateManagerUnlockKeyFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSwarmSwarmUpdateRotateWorkerTokenFlag(m *swarm.SwarmUpdateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("rotateWorkerToken") {

		var rotateWorkerTokenFlagName string
		if cmdPrefix == "" {
			rotateWorkerTokenFlagName = "rotateWorkerToken"
		} else {
			rotateWorkerTokenFlagName = fmt.Sprintf("%v.rotateWorkerToken", cmdPrefix)
		}

		rotateWorkerTokenFlagValue, err := cmd.Flags().GetBool(rotateWorkerTokenFlagName)
		if err != nil {
			return err, false
		}
		m.RotateWorkerToken = &rotateWorkerTokenFlagValue

	}
	return nil, retAdded
}
func retrieveOperationSwarmSwarmUpdateVersionFlag(m *swarm.SwarmUpdateParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("version") {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetInt64(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

	}
	return nil, retAdded
}

// parseOperationSwarmSwarmUpdateResult parses request result and return the string content
func parseOperationSwarmSwarmUpdateResult(resp0 *swarm.SwarmUpdateOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning swarmUpdateOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*swarm.SwarmUpdateBadRequest)
		if ok {
			if !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*swarm.SwarmUpdateInternalServerError)
		if ok {
			if !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*swarm.SwarmUpdateServiceUnavailable)
		if ok {
			if !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response swarmUpdateOK is not supported by go-swagger cli yet.

	return "", nil
}
