// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/dockerctl/client/system"
	"github.com/go-openapi/dockerctl/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSystemSystemAuthCmd returns a cmd to handle operation systemAuth
func makeOperationSystemSystemAuthCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "SystemAuth",
		Short: `Validate credentials for a registry and, if available, get an identity token for accessing the registry without password.`,
		RunE:  runOperationSystemSystemAuth,
	}

	if err := registerOperationSystemSystemAuthParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSystemSystemAuth uses cmd flags to call endpoint api
func runOperationSystemSystemAuth(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := system.NewSystemAuthParams()
	if err, _ := retrieveOperationSystemSystemAuthAuthConfigFlag(params, "", cmd); err != nil {
		return err
	}
	// make request and then print result
	if err := printOperationSystemSystemAuthResult(appCli.System.SystemAuth(params)); err != nil {
		return err
	}
	return nil
}

func retrieveOperationSystemSystemAuthAuthConfigFlag(m *system.SystemAuthParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("authConfig") {
		// Read authConfig string from cmd and unmarshal
		authConfigValueStr, err := cmd.Flags().GetString("authConfig")
		if err != nil {
			return err, false
		}

		authConfigValue := models.AuthConfig{}
		if err := json.Unmarshal([]byte(authConfigValueStr), &authConfigValue); err != nil {
			return fmt.Errorf("cannot unmarshal authConfig string in models.AuthConfig: %v", err), false
		}
		m.AuthConfig = &authConfigValue
	}
	authConfigValueModel := m.AuthConfig
	if swag.IsZero(authConfigValueModel) {
		authConfigValueModel = &models.AuthConfig{}
	}
	err, added := retrieveModelAuthConfigFlags(0, authConfigValueModel, "authConfig", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.AuthConfig = authConfigValueModel
	}
	authConfigValueDebugBytes, err := json.Marshal(m.AuthConfig)
	if err != nil {
		return err, false
	}
	logDebugf("AuthConfig payload: %v", string(authConfigValueDebugBytes))
	return nil, retAdded
}

// printOperationSystemSystemAuthResult prints output to stdout
func printOperationSystemSystemAuthResult(resp0 *system.SystemAuthOK, resp1 *system.SystemAuthNoContent, respErr error) error {
	if respErr != nil {
		return respErr
	}

	if !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return err
		}
		fmt.Println(string(msgStr))
	}

	// warning: non schema response systemAuthNoContent is not supported by go-swagger cli yet.

	return nil
}

// registerOperationSystemSystemAuthParamFlags registers all flags needed to fill params
func registerOperationSystemSystemAuthParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSystemSystemAuthAuthConfigParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSystemSystemAuthAuthConfigParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var authConfigFlagName string
	if cmdPrefix == "" {
		authConfigFlagName = "authConfig"
	} else {
		authConfigFlagName = fmt.Sprintf("%v.authConfig", cmdPrefix)
	}

	exampleAuthConfigStr := "go-swagger TODO"
	_ = cmd.PersistentFlags().String(authConfigFlagName, "", fmt.Sprintf("Optional json string for [authConfig] of form %v.Authentication to check", string(exampleAuthConfigStr)))

	// add flags for body
	if err := registerModelAuthConfigFlags(0, "authConfig", cmd); err != nil {
		return err
	}

	return nil
}

// register flags to command
func registerModelSystemAuthOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSystemAuthOKBodyIdentityToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemAuthOKBodyStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemAuthOKBodyIdentityToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	identityTokenDescription := `An opaque token used to authenticate a user after a successful login`

	var identityTokenFlagName string
	if cmdPrefix == "" {
		identityTokenFlagName = "IdentityToken"
	} else {
		identityTokenFlagName = fmt.Sprintf("%v.IdentityToken", cmdPrefix)
	}

	var identityTokenFlagDefault string

	_ = cmd.PersistentFlags().String(identityTokenFlagName, identityTokenFlagDefault, identityTokenDescription)

	return nil
}

func registerSystemAuthOKBodyStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Required. The status of the authentication`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "Status"
	} else {
		statusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSystemAuthOKBodyFlags(depth int, m *system.SystemAuthOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, identityTokenAdded := retrieveSystemAuthOKBodyIdentityTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || identityTokenAdded

	err, statusAdded := retrieveSystemAuthOKBodyStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveSystemAuthOKBodyIdentityTokenFlags(depth int, m *system.SystemAuthOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	identityTokenFlagName := fmt.Sprintf("%v.IdentityToken", cmdPrefix)
	if cmd.Flags().Changed(identityTokenFlagName) {

		var identityTokenFlagName string
		if cmdPrefix == "" {
			identityTokenFlagName = "IdentityToken"
		} else {
			identityTokenFlagName = fmt.Sprintf("%v.IdentityToken", cmdPrefix)
		}

		identityTokenFlagValue, err := cmd.Flags().GetString(identityTokenFlagName)
		if err != nil {
			return err, false
		}
		m.IdentityToken = identityTokenFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveSystemAuthOKBodyStatusFlags(depth int, m *system.SystemAuthOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	statusFlagName := fmt.Sprintf("%v.Status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "Status"
		} else {
			statusFlagName = fmt.Sprintf("%v.Status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}
	return nil, retAdded
}
