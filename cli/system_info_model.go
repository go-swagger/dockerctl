// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for SystemInfo

// register flags to command
func registerModelSystemInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSystemInfoArchitecture(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoBridgeNfIp6tables(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoBridgeNfIptables(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoCPUSet(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoCPUShares(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoCgroupDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoClusterAdvertise(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoClusterStore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoContainerdCommit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoContainers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoContainersPaused(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoContainersRunning(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoContainersStopped(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoCPUCfsPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoCPUCfsQuota(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoDebug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoDefaultRuntime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoDockerRootDir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoDriverStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoExperimentalBuild(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoGenericResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoHTTPProxy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoHTTPSProxy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoIPV4Forwarding(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoImages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoIndexServerAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoInitBinary(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoInitCommit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoIsolation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoKernelMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoKernelVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoLiveRestoreEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoLoggingDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoMemTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoMemoryLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoNCPU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoNEventsListener(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoNFd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoNGoroutines(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoNoProxy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoOSType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoOSVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoOomKillDisable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoOperatingSystem(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoPidsLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoPlugins(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoProductLicense(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoRegistryConfig(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoRuncCommit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoRuntimes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoSecurityOptions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoServerVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoSwapLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoSwarm(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoSystemStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoSystemTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSystemInfoWarnings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemInfoArchitecture(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	architectureDescription := `Hardware architecture of the host, as returned by the Go runtime
(` + "`" + `GOARCH` + "`" + `).

A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
`

	var architectureFlagName string
	if cmdPrefix == "" {
		architectureFlagName = "Architecture"
	} else {
		architectureFlagName = fmt.Sprintf("%v.Architecture", cmdPrefix)
	}

	var architectureFlagDefault string

	_ = cmd.PersistentFlags().String(architectureFlagName, architectureFlagDefault, architectureDescription)

	return nil
}

func registerSystemInfoBridgeNfIp6tables(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bridgeNfIp6tablesDescription := `Indicates if ` + "`" + `bridge-nf-call-ip6tables` + "`" + ` is available on the host.`

	var bridgeNfIp6tablesFlagName string
	if cmdPrefix == "" {
		bridgeNfIp6tablesFlagName = "BridgeNfIp6tables"
	} else {
		bridgeNfIp6tablesFlagName = fmt.Sprintf("%v.BridgeNfIp6tables", cmdPrefix)
	}

	var bridgeNfIp6tablesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(bridgeNfIp6tablesFlagName, bridgeNfIp6tablesFlagDefault, bridgeNfIp6tablesDescription)

	return nil
}

func registerSystemInfoBridgeNfIptables(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bridgeNfIptablesDescription := `Indicates if ` + "`" + `bridge-nf-call-iptables` + "`" + ` is available on the host.`

	var bridgeNfIptablesFlagName string
	if cmdPrefix == "" {
		bridgeNfIptablesFlagName = "BridgeNfIptables"
	} else {
		bridgeNfIptablesFlagName = fmt.Sprintf("%v.BridgeNfIptables", cmdPrefix)
	}

	var bridgeNfIptablesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(bridgeNfIptablesFlagName, bridgeNfIptablesFlagDefault, bridgeNfIptablesDescription)

	return nil
}

func registerSystemInfoCPUSet(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuSetDescription := `Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.

See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
`

	var cpuSetFlagName string
	if cmdPrefix == "" {
		cpuSetFlagName = "CPUSet"
	} else {
		cpuSetFlagName = fmt.Sprintf("%v.CPUSet", cmdPrefix)
	}

	var cpuSetFlagDefault bool

	_ = cmd.PersistentFlags().Bool(cpuSetFlagName, cpuSetFlagDefault, cpuSetDescription)

	return nil
}

func registerSystemInfoCPUShares(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuSharesDescription := `Indicates if CPU Shares limiting is supported by the host.`

	var cpuSharesFlagName string
	if cmdPrefix == "" {
		cpuSharesFlagName = "CPUShares"
	} else {
		cpuSharesFlagName = fmt.Sprintf("%v.CPUShares", cmdPrefix)
	}

	var cpuSharesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(cpuSharesFlagName, cpuSharesFlagDefault, cpuSharesDescription)

	return nil
}

func registerSystemInfoCgroupDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cgroupDriverDescription := `The driver to use for managing cgroups.
`

	var cgroupDriverFlagName string
	if cmdPrefix == "" {
		cgroupDriverFlagName = "CgroupDriver"
	} else {
		cgroupDriverFlagName = fmt.Sprintf("%v.CgroupDriver", cmdPrefix)
	}

	var cgroupDriverFlagDefault string = "cgroupfs"

	_ = cmd.PersistentFlags().String(cgroupDriverFlagName, cgroupDriverFlagDefault, cgroupDriverDescription)

	return nil
}

func registerSystemInfoClusterAdvertise(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clusterAdvertiseDescription := `The network endpoint that the Engine advertises for the purpose of
node discovery. ClusterAdvertise is a ` + "`" + `host:port` + "`" + ` combination on which
the daemon is reachable by other hosts.

<p><br /></p>

> **Note**: This field is only propagated when using standalone Swarm
> mode, and overlay networking using an external k/v store. Overlay
> networks with Swarm mode enabled use the built-in raft store, and
> this field will be empty.
`

	var clusterAdvertiseFlagName string
	if cmdPrefix == "" {
		clusterAdvertiseFlagName = "ClusterAdvertise"
	} else {
		clusterAdvertiseFlagName = fmt.Sprintf("%v.ClusterAdvertise", cmdPrefix)
	}

	var clusterAdvertiseFlagDefault string

	_ = cmd.PersistentFlags().String(clusterAdvertiseFlagName, clusterAdvertiseFlagDefault, clusterAdvertiseDescription)

	return nil
}

func registerSystemInfoClusterStore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clusterStoreDescription := `URL of the distributed storage backend.


The storage backend is used for multihost networking (to store
network and endpoint information) and by the node discovery mechanism.

<p><br /></p>

> **Note**: This field is only propagated when using standalone Swarm
> mode, and overlay networking using an external k/v store. Overlay
> networks with Swarm mode enabled use the built-in raft store, and
> this field will be empty.
`

	var clusterStoreFlagName string
	if cmdPrefix == "" {
		clusterStoreFlagName = "ClusterStore"
	} else {
		clusterStoreFlagName = fmt.Sprintf("%v.ClusterStore", cmdPrefix)
	}

	var clusterStoreFlagDefault string

	_ = cmd.PersistentFlags().String(clusterStoreFlagName, clusterStoreFlagDefault, clusterStoreDescription)

	return nil
}

func registerSystemInfoContainerdCommit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var containerdCommitFlagName string
	if cmdPrefix == "" {
		containerdCommitFlagName = "ContainerdCommit"
	} else {
		containerdCommitFlagName = fmt.Sprintf("%v.ContainerdCommit", cmdPrefix)
	}

	if err := registerModelCommitFlags(depth+1, containerdCommitFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemInfoContainers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	containersDescription := `Total number of containers on the host.`

	var containersFlagName string
	if cmdPrefix == "" {
		containersFlagName = "Containers"
	} else {
		containersFlagName = fmt.Sprintf("%v.Containers", cmdPrefix)
	}

	var containersFlagDefault int64

	_ = cmd.PersistentFlags().Int64(containersFlagName, containersFlagDefault, containersDescription)

	return nil
}

func registerSystemInfoContainersPaused(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	containersPausedDescription := `Number of containers with status ` + "`" + `"paused"` + "`" + `.
`

	var containersPausedFlagName string
	if cmdPrefix == "" {
		containersPausedFlagName = "ContainersPaused"
	} else {
		containersPausedFlagName = fmt.Sprintf("%v.ContainersPaused", cmdPrefix)
	}

	var containersPausedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(containersPausedFlagName, containersPausedFlagDefault, containersPausedDescription)

	return nil
}

func registerSystemInfoContainersRunning(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	containersRunningDescription := `Number of containers with status ` + "`" + `"running"` + "`" + `.
`

	var containersRunningFlagName string
	if cmdPrefix == "" {
		containersRunningFlagName = "ContainersRunning"
	} else {
		containersRunningFlagName = fmt.Sprintf("%v.ContainersRunning", cmdPrefix)
	}

	var containersRunningFlagDefault int64

	_ = cmd.PersistentFlags().Int64(containersRunningFlagName, containersRunningFlagDefault, containersRunningDescription)

	return nil
}

func registerSystemInfoContainersStopped(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	containersStoppedDescription := `Number of containers with status ` + "`" + `"stopped"` + "`" + `.
`

	var containersStoppedFlagName string
	if cmdPrefix == "" {
		containersStoppedFlagName = "ContainersStopped"
	} else {
		containersStoppedFlagName = fmt.Sprintf("%v.ContainersStopped", cmdPrefix)
	}

	var containersStoppedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(containersStoppedFlagName, containersStoppedFlagDefault, containersStoppedDescription)

	return nil
}

func registerSystemInfoCPUCfsPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuCfsPeriodDescription := `Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.`

	var cpuCfsPeriodFlagName string
	if cmdPrefix == "" {
		cpuCfsPeriodFlagName = "CpuCfsPeriod"
	} else {
		cpuCfsPeriodFlagName = fmt.Sprintf("%v.CpuCfsPeriod", cmdPrefix)
	}

	var cpuCfsPeriodFlagDefault bool

	_ = cmd.PersistentFlags().Bool(cpuCfsPeriodFlagName, cpuCfsPeriodFlagDefault, cpuCfsPeriodDescription)

	return nil
}

func registerSystemInfoCPUCfsQuota(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuCfsQuotaDescription := `Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.`

	var cpuCfsQuotaFlagName string
	if cmdPrefix == "" {
		cpuCfsQuotaFlagName = "CpuCfsQuota"
	} else {
		cpuCfsQuotaFlagName = fmt.Sprintf("%v.CpuCfsQuota", cmdPrefix)
	}

	var cpuCfsQuotaFlagDefault bool

	_ = cmd.PersistentFlags().Bool(cpuCfsQuotaFlagName, cpuCfsQuotaFlagDefault, cpuCfsQuotaDescription)

	return nil
}

func registerSystemInfoDebug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	debugDescription := `Indicates if the daemon is running in debug-mode / with debug-level logging enabled.`

	var debugFlagName string
	if cmdPrefix == "" {
		debugFlagName = "Debug"
	} else {
		debugFlagName = fmt.Sprintf("%v.Debug", cmdPrefix)
	}

	var debugFlagDefault bool

	_ = cmd.PersistentFlags().Bool(debugFlagName, debugFlagDefault, debugDescription)

	return nil
}

func registerSystemInfoDefaultRuntime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultRuntimeDescription := `Name of the default OCI runtime that is used when starting containers.

The default can be overridden per-container at create time.
`

	var defaultRuntimeFlagName string
	if cmdPrefix == "" {
		defaultRuntimeFlagName = "DefaultRuntime"
	} else {
		defaultRuntimeFlagName = fmt.Sprintf("%v.DefaultRuntime", cmdPrefix)
	}

	var defaultRuntimeFlagDefault string = "runc"

	_ = cmd.PersistentFlags().String(defaultRuntimeFlagName, defaultRuntimeFlagDefault, defaultRuntimeDescription)

	return nil
}

func registerSystemInfoDockerRootDir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dockerRootDirDescription := `Root directory of persistent Docker state.

Defaults to ` + "`" + `/var/lib/docker` + "`" + ` on Linux, and ` + "`" + `C:\ProgramData\docker` + "`" + `
on Windows.
`

	var dockerRootDirFlagName string
	if cmdPrefix == "" {
		dockerRootDirFlagName = "DockerRootDir"
	} else {
		dockerRootDirFlagName = fmt.Sprintf("%v.DockerRootDir", cmdPrefix)
	}

	var dockerRootDirFlagDefault string

	_ = cmd.PersistentFlags().String(dockerRootDirFlagName, dockerRootDirFlagDefault, dockerRootDirDescription)

	return nil
}

func registerSystemInfoDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	driverDescription := `Name of the storage driver in use.`

	var driverFlagName string
	if cmdPrefix == "" {
		driverFlagName = "Driver"
	} else {
		driverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
	}

	var driverFlagDefault string

	_ = cmd.PersistentFlags().String(driverFlagName, driverFlagDefault, driverDescription)

	return nil
}

func registerSystemInfoDriverStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: DriverStatus [][]string array type is not supported by go-swagger cli yet

	return nil
}

func registerSystemInfoExperimentalBuild(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	experimentalBuildDescription := `Indicates if experimental features are enabled on the daemon.
`

	var experimentalBuildFlagName string
	if cmdPrefix == "" {
		experimentalBuildFlagName = "ExperimentalBuild"
	} else {
		experimentalBuildFlagName = fmt.Sprintf("%v.ExperimentalBuild", cmdPrefix)
	}

	var experimentalBuildFlagDefault bool

	_ = cmd.PersistentFlags().Bool(experimentalBuildFlagName, experimentalBuildFlagDefault, experimentalBuildDescription)

	return nil
}

func registerSystemInfoGenericResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: GenericResources GenericResources array type is not supported by go-swagger cli yet

	return nil
}

func registerSystemInfoHTTPProxy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpProxyDescription := `HTTP-proxy configured for the daemon. This value is obtained from the
[` + "`" + `HTTP_PROXY` + "`" + `](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
are masked in the API response.

Containers do not automatically inherit this configuration.
`

	var httpProxyFlagName string
	if cmdPrefix == "" {
		httpProxyFlagName = "HttpProxy"
	} else {
		httpProxyFlagName = fmt.Sprintf("%v.HttpProxy", cmdPrefix)
	}

	var httpProxyFlagDefault string

	_ = cmd.PersistentFlags().String(httpProxyFlagName, httpProxyFlagDefault, httpProxyDescription)

	return nil
}

func registerSystemInfoHTTPSProxy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpsProxyDescription := `HTTPS-proxy configured for the daemon. This value is obtained from the
[` + "`" + `HTTPS_PROXY` + "`" + `](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
are masked in the API response.

Containers do not automatically inherit this configuration.
`

	var httpsProxyFlagName string
	if cmdPrefix == "" {
		httpsProxyFlagName = "HttpsProxy"
	} else {
		httpsProxyFlagName = fmt.Sprintf("%v.HttpsProxy", cmdPrefix)
	}

	var httpsProxyFlagDefault string

	_ = cmd.PersistentFlags().String(httpsProxyFlagName, httpsProxyFlagDefault, httpsProxyDescription)

	return nil
}

func registerSystemInfoID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Unique identifier of the daemon.

<p><br /></p>

> **Note**: The format of the ID itself is not part of the API, and
> should not be considered stable.
`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "ID"
	} else {
		idFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerSystemInfoIPV4Forwarding(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipv4ForwardingDescription := `Indicates IPv4 forwarding is enabled.`

	var ipv4ForwardingFlagName string
	if cmdPrefix == "" {
		ipv4ForwardingFlagName = "IPv4Forwarding"
	} else {
		ipv4ForwardingFlagName = fmt.Sprintf("%v.IPv4Forwarding", cmdPrefix)
	}

	var ipv4ForwardingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ipv4ForwardingFlagName, ipv4ForwardingFlagDefault, ipv4ForwardingDescription)

	return nil
}

func registerSystemInfoImages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	imagesDescription := `Total number of images on the host.

Both _tagged_ and _untagged_ (dangling) images are counted.
`

	var imagesFlagName string
	if cmdPrefix == "" {
		imagesFlagName = "Images"
	} else {
		imagesFlagName = fmt.Sprintf("%v.Images", cmdPrefix)
	}

	var imagesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(imagesFlagName, imagesFlagDefault, imagesDescription)

	return nil
}

func registerSystemInfoIndexServerAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	indexServerAddressDescription := `Address / URL of the index server that is used for image search,
and as a default for user authentication for Docker Hub and Docker Cloud.
`

	var indexServerAddressFlagName string
	if cmdPrefix == "" {
		indexServerAddressFlagName = "IndexServerAddress"
	} else {
		indexServerAddressFlagName = fmt.Sprintf("%v.IndexServerAddress", cmdPrefix)
	}

	var indexServerAddressFlagDefault string = "https://index.docker.io/v1/"

	_ = cmd.PersistentFlags().String(indexServerAddressFlagName, indexServerAddressFlagDefault, indexServerAddressDescription)

	return nil
}

func registerSystemInfoInitBinary(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	initBinaryDescription := `Name and, optional, path of the ` + "`" + `docker-init` + "`" + ` binary.

If the path is omitted, the daemon searches the host's ` + "`" + `$PATH` + "`" + ` for the
binary and uses the first result.
`

	var initBinaryFlagName string
	if cmdPrefix == "" {
		initBinaryFlagName = "InitBinary"
	} else {
		initBinaryFlagName = fmt.Sprintf("%v.InitBinary", cmdPrefix)
	}

	var initBinaryFlagDefault string

	_ = cmd.PersistentFlags().String(initBinaryFlagName, initBinaryFlagDefault, initBinaryDescription)

	return nil
}

func registerSystemInfoInitCommit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var initCommitFlagName string
	if cmdPrefix == "" {
		initCommitFlagName = "InitCommit"
	} else {
		initCommitFlagName = fmt.Sprintf("%v.InitCommit", cmdPrefix)
	}

	if err := registerModelCommitFlags(depth+1, initCommitFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemInfoIsolation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isolationDescription := `Represents the isolation technology to use as a default for containers.
The supported values are platform-specific.

If no isolation value is specified on daemon start, on Windows client,
the default is ` + "`" + `hyperv` + "`" + `, and on Windows server, the default is ` + "`" + `process` + "`" + `.

This option is currently not used on other platforms.
`

	var isolationFlagName string
	if cmdPrefix == "" {
		isolationFlagName = "Isolation"
	} else {
		isolationFlagName = fmt.Sprintf("%v.Isolation", cmdPrefix)
	}

	var isolationFlagDefault string = "default"

	_ = cmd.PersistentFlags().String(isolationFlagName, isolationFlagDefault, isolationDescription)

	return nil
}

func registerSystemInfoKernelMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kernelMemoryDescription := `Indicates if the host has kernel memory limit support enabled.`

	var kernelMemoryFlagName string
	if cmdPrefix == "" {
		kernelMemoryFlagName = "KernelMemory"
	} else {
		kernelMemoryFlagName = fmt.Sprintf("%v.KernelMemory", cmdPrefix)
	}

	var kernelMemoryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(kernelMemoryFlagName, kernelMemoryFlagDefault, kernelMemoryDescription)

	return nil
}

func registerSystemInfoKernelVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kernelVersionDescription := `Kernel version of the host.

On Linux, this information obtained from ` + "`" + `uname` + "`" + `. On Windows this
information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\</kbd>
registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.
`

	var kernelVersionFlagName string
	if cmdPrefix == "" {
		kernelVersionFlagName = "KernelVersion"
	} else {
		kernelVersionFlagName = fmt.Sprintf("%v.KernelVersion", cmdPrefix)
	}

	var kernelVersionFlagDefault string

	_ = cmd.PersistentFlags().String(kernelVersionFlagName, kernelVersionFlagDefault, kernelVersionDescription)

	return nil
}

func registerSystemInfoLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Labels []string array type is not supported by go-swagger cli yet

	return nil
}

func registerSystemInfoLiveRestoreEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	liveRestoreEnabledDescription := `Indicates if live restore is enabled.

If enabled, containers are kept running when the daemon is shutdown
or upon daemon start if running containers are detected.
`

	var liveRestoreEnabledFlagName string
	if cmdPrefix == "" {
		liveRestoreEnabledFlagName = "LiveRestoreEnabled"
	} else {
		liveRestoreEnabledFlagName = fmt.Sprintf("%v.LiveRestoreEnabled", cmdPrefix)
	}

	var liveRestoreEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(liveRestoreEnabledFlagName, liveRestoreEnabledFlagDefault, liveRestoreEnabledDescription)

	return nil
}

func registerSystemInfoLoggingDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	loggingDriverDescription := `The logging driver to use as a default for new containers.
`

	var loggingDriverFlagName string
	if cmdPrefix == "" {
		loggingDriverFlagName = "LoggingDriver"
	} else {
		loggingDriverFlagName = fmt.Sprintf("%v.LoggingDriver", cmdPrefix)
	}

	var loggingDriverFlagDefault string

	_ = cmd.PersistentFlags().String(loggingDriverFlagName, loggingDriverFlagDefault, loggingDriverDescription)

	return nil
}

func registerSystemInfoMemTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	memTotalDescription := `Total amount of physical memory available on the host, in kilobytes (kB).
`

	var memTotalFlagName string
	if cmdPrefix == "" {
		memTotalFlagName = "MemTotal"
	} else {
		memTotalFlagName = fmt.Sprintf("%v.MemTotal", cmdPrefix)
	}

	var memTotalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(memTotalFlagName, memTotalFlagDefault, memTotalDescription)

	return nil
}

func registerSystemInfoMemoryLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	memoryLimitDescription := `Indicates if the host has memory limit support enabled.`

	var memoryLimitFlagName string
	if cmdPrefix == "" {
		memoryLimitFlagName = "MemoryLimit"
	} else {
		memoryLimitFlagName = fmt.Sprintf("%v.MemoryLimit", cmdPrefix)
	}

	var memoryLimitFlagDefault bool

	_ = cmd.PersistentFlags().Bool(memoryLimitFlagName, memoryLimitFlagDefault, memoryLimitDescription)

	return nil
}

func registerSystemInfoNCPU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nCpuDescription := `The number of logical CPUs usable by the daemon.

The number of available CPUs is checked by querying the operating
system when the daemon starts. Changes to operating system CPU
allocation after the daemon is started are not reflected.
`

	var nCpuFlagName string
	if cmdPrefix == "" {
		nCpuFlagName = "NCPU"
	} else {
		nCpuFlagName = fmt.Sprintf("%v.NCPU", cmdPrefix)
	}

	var nCpuFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nCpuFlagName, nCpuFlagDefault, nCpuDescription)

	return nil
}

func registerSystemInfoNEventsListener(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nEventsListenerDescription := `Number of event listeners subscribed.`

	var nEventsListenerFlagName string
	if cmdPrefix == "" {
		nEventsListenerFlagName = "NEventsListener"
	} else {
		nEventsListenerFlagName = fmt.Sprintf("%v.NEventsListener", cmdPrefix)
	}

	var nEventsListenerFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nEventsListenerFlagName, nEventsListenerFlagDefault, nEventsListenerDescription)

	return nil
}

func registerSystemInfoNFd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nFdDescription := `The total number of file Descriptors in use by the daemon process.

This information is only returned if debug-mode is enabled.
`

	var nFdFlagName string
	if cmdPrefix == "" {
		nFdFlagName = "NFd"
	} else {
		nFdFlagName = fmt.Sprintf("%v.NFd", cmdPrefix)
	}

	var nFdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nFdFlagName, nFdFlagDefault, nFdDescription)

	return nil
}

func registerSystemInfoNGoroutines(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nGoroutinesDescription := `The  number of goroutines that currently exist.

This information is only returned if debug-mode is enabled.
`

	var nGoroutinesFlagName string
	if cmdPrefix == "" {
		nGoroutinesFlagName = "NGoroutines"
	} else {
		nGoroutinesFlagName = fmt.Sprintf("%v.NGoroutines", cmdPrefix)
	}

	var nGoroutinesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(nGoroutinesFlagName, nGoroutinesFlagDefault, nGoroutinesDescription)

	return nil
}

func registerSystemInfoName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Hostname of the host.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerSystemInfoNoProxy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noProxyDescription := `Comma-separated list of domain extensions for which no proxy should be
used. This value is obtained from the [` + "`" + `NO_PROXY` + "`" + `](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
environment variable.

Containers do not automatically inherit this configuration.
`

	var noProxyFlagName string
	if cmdPrefix == "" {
		noProxyFlagName = "NoProxy"
	} else {
		noProxyFlagName = fmt.Sprintf("%v.NoProxy", cmdPrefix)
	}

	var noProxyFlagDefault string

	_ = cmd.PersistentFlags().String(noProxyFlagName, noProxyFlagDefault, noProxyDescription)

	return nil
}

func registerSystemInfoOSType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oSTypeDescription := `Generic type of the operating system of the host, as returned by the
Go runtime (` + "`" + `GOOS` + "`" + `).

Currently returned values are "linux" and "windows". A full list of
possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
`

	var oSTypeFlagName string
	if cmdPrefix == "" {
		oSTypeFlagName = "OSType"
	} else {
		oSTypeFlagName = fmt.Sprintf("%v.OSType", cmdPrefix)
	}

	var oSTypeFlagDefault string

	_ = cmd.PersistentFlags().String(oSTypeFlagName, oSTypeFlagDefault, oSTypeDescription)

	return nil
}

func registerSystemInfoOSVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oSVersionDescription := `Version of the host's operating system

<p><br /></p>

> **Note**: The information returned in this field, including its
> very existence, and the formatting of values, should not be considered
> stable, and may change without notice.
`

	var oSVersionFlagName string
	if cmdPrefix == "" {
		oSVersionFlagName = "OSVersion"
	} else {
		oSVersionFlagName = fmt.Sprintf("%v.OSVersion", cmdPrefix)
	}

	var oSVersionFlagDefault string

	_ = cmd.PersistentFlags().String(oSVersionFlagName, oSVersionFlagDefault, oSVersionDescription)

	return nil
}

func registerSystemInfoOomKillDisable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oomKillDisableDescription := `Indicates if OOM killer disable is supported on the host.`

	var oomKillDisableFlagName string
	if cmdPrefix == "" {
		oomKillDisableFlagName = "OomKillDisable"
	} else {
		oomKillDisableFlagName = fmt.Sprintf("%v.OomKillDisable", cmdPrefix)
	}

	var oomKillDisableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(oomKillDisableFlagName, oomKillDisableFlagDefault, oomKillDisableDescription)

	return nil
}

func registerSystemInfoOperatingSystem(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	operatingSystemDescription := `Name of the host's operating system, for example: "Ubuntu 16.04.2 LTS"
or "Windows Server 2016 Datacenter"
`

	var operatingSystemFlagName string
	if cmdPrefix == "" {
		operatingSystemFlagName = "OperatingSystem"
	} else {
		operatingSystemFlagName = fmt.Sprintf("%v.OperatingSystem", cmdPrefix)
	}

	var operatingSystemFlagDefault string

	_ = cmd.PersistentFlags().String(operatingSystemFlagName, operatingSystemFlagDefault, operatingSystemDescription)

	return nil
}

func registerSystemInfoPidsLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pidsLimitDescription := `Indicates if the host kernel has PID limit support enabled.`

	var pidsLimitFlagName string
	if cmdPrefix == "" {
		pidsLimitFlagName = "PidsLimit"
	} else {
		pidsLimitFlagName = fmt.Sprintf("%v.PidsLimit", cmdPrefix)
	}

	var pidsLimitFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pidsLimitFlagName, pidsLimitFlagDefault, pidsLimitDescription)

	return nil
}

func registerSystemInfoPlugins(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var pluginsFlagName string
	if cmdPrefix == "" {
		pluginsFlagName = "Plugins"
	} else {
		pluginsFlagName = fmt.Sprintf("%v.Plugins", cmdPrefix)
	}

	if err := registerModelPluginsInfoFlags(depth+1, pluginsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemInfoProductLicense(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	productLicenseDescription := `Reports a summary of the product license on the daemon.

If a commercial license has been applied to the daemon, information
such as number of nodes, and expiration are included.
`

	var productLicenseFlagName string
	if cmdPrefix == "" {
		productLicenseFlagName = "ProductLicense"
	} else {
		productLicenseFlagName = fmt.Sprintf("%v.ProductLicense", cmdPrefix)
	}

	var productLicenseFlagDefault string

	_ = cmd.PersistentFlags().String(productLicenseFlagName, productLicenseFlagDefault, productLicenseDescription)

	return nil
}

func registerSystemInfoRegistryConfig(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var registryConfigFlagName string
	if cmdPrefix == "" {
		registryConfigFlagName = "RegistryConfig"
	} else {
		registryConfigFlagName = fmt.Sprintf("%v.RegistryConfig", cmdPrefix)
	}

	if err := registerModelRegistryServiceConfigFlags(depth+1, registryConfigFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemInfoRuncCommit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var runcCommitFlagName string
	if cmdPrefix == "" {
		runcCommitFlagName = "RuncCommit"
	} else {
		runcCommitFlagName = fmt.Sprintf("%v.RuncCommit", cmdPrefix)
	}

	if err := registerModelCommitFlags(depth+1, runcCommitFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemInfoRuntimes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Runtimes map[string]Runtime map type is not supported by go-swagger cli yet

	return nil
}

func registerSystemInfoSecurityOptions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: SecurityOptions []string array type is not supported by go-swagger cli yet

	return nil
}

func registerSystemInfoServerVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverVersionDescription := `Version string of the daemon.

> **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/)
> returns the Swarm version instead of the daemon  version, for example
> ` + "`" + `swarm/1.2.8` + "`" + `.
`

	var serverVersionFlagName string
	if cmdPrefix == "" {
		serverVersionFlagName = "ServerVersion"
	} else {
		serverVersionFlagName = fmt.Sprintf("%v.ServerVersion", cmdPrefix)
	}

	var serverVersionFlagDefault string

	_ = cmd.PersistentFlags().String(serverVersionFlagName, serverVersionFlagDefault, serverVersionDescription)

	return nil
}

func registerSystemInfoSwapLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	swapLimitDescription := `Indicates if the host has memory swap limit support enabled.`

	var swapLimitFlagName string
	if cmdPrefix == "" {
		swapLimitFlagName = "SwapLimit"
	} else {
		swapLimitFlagName = fmt.Sprintf("%v.SwapLimit", cmdPrefix)
	}

	var swapLimitFlagDefault bool

	_ = cmd.PersistentFlags().Bool(swapLimitFlagName, swapLimitFlagDefault, swapLimitDescription)

	return nil
}

func registerSystemInfoSwarm(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var swarmFlagName string
	if cmdPrefix == "" {
		swarmFlagName = "Swarm"
	} else {
		swarmFlagName = fmt.Sprintf("%v.Swarm", cmdPrefix)
	}

	if err := registerModelSwarmInfoFlags(depth+1, swarmFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSystemInfoSystemStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: SystemStatus [][]string array type is not supported by go-swagger cli yet

	return nil
}

func registerSystemInfoSystemTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	systemTimeDescription := `Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
format with nano-seconds.
`

	var systemTimeFlagName string
	if cmdPrefix == "" {
		systemTimeFlagName = "SystemTime"
	} else {
		systemTimeFlagName = fmt.Sprintf("%v.SystemTime", cmdPrefix)
	}

	var systemTimeFlagDefault string

	_ = cmd.PersistentFlags().String(systemTimeFlagName, systemTimeFlagDefault, systemTimeDescription)

	return nil
}

func registerSystemInfoWarnings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: Warnings []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSystemInfoFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, architectureAdded := retrieveSystemInfoArchitectureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || architectureAdded

	err, bridgeNfIp6tablesAdded := retrieveSystemInfoBridgeNfIp6tablesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bridgeNfIp6tablesAdded

	err, bridgeNfIptablesAdded := retrieveSystemInfoBridgeNfIptablesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bridgeNfIptablesAdded

	err, cpuSetAdded := retrieveSystemInfoCPUSetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuSetAdded

	err, cpuSharesAdded := retrieveSystemInfoCPUSharesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuSharesAdded

	err, cgroupDriverAdded := retrieveSystemInfoCgroupDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cgroupDriverAdded

	err, clusterAdvertiseAdded := retrieveSystemInfoClusterAdvertiseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clusterAdvertiseAdded

	err, clusterStoreAdded := retrieveSystemInfoClusterStoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clusterStoreAdded

	err, containerdCommitAdded := retrieveSystemInfoContainerdCommitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || containerdCommitAdded

	err, containersAdded := retrieveSystemInfoContainersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || containersAdded

	err, containersPausedAdded := retrieveSystemInfoContainersPausedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || containersPausedAdded

	err, containersRunningAdded := retrieveSystemInfoContainersRunningFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || containersRunningAdded

	err, containersStoppedAdded := retrieveSystemInfoContainersStoppedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || containersStoppedAdded

	err, cpuCfsPeriodAdded := retrieveSystemInfoCPUCfsPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuCfsPeriodAdded

	err, cpuCfsQuotaAdded := retrieveSystemInfoCPUCfsQuotaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuCfsQuotaAdded

	err, debugAdded := retrieveSystemInfoDebugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || debugAdded

	err, defaultRuntimeAdded := retrieveSystemInfoDefaultRuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultRuntimeAdded

	err, dockerRootDirAdded := retrieveSystemInfoDockerRootDirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dockerRootDirAdded

	err, driverAdded := retrieveSystemInfoDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || driverAdded

	err, driverStatusAdded := retrieveSystemInfoDriverStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || driverStatusAdded

	err, experimentalBuildAdded := retrieveSystemInfoExperimentalBuildFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || experimentalBuildAdded

	err, genericResourcesAdded := retrieveSystemInfoGenericResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || genericResourcesAdded

	err, httpProxyAdded := retrieveSystemInfoHTTPProxyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpProxyAdded

	err, httpsProxyAdded := retrieveSystemInfoHTTPSProxyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpsProxyAdded

	err, idAdded := retrieveSystemInfoIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, ipv4ForwardingAdded := retrieveSystemInfoIPV4ForwardingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipv4ForwardingAdded

	err, imagesAdded := retrieveSystemInfoImagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || imagesAdded

	err, indexServerAddressAdded := retrieveSystemInfoIndexServerAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || indexServerAddressAdded

	err, initBinaryAdded := retrieveSystemInfoInitBinaryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || initBinaryAdded

	err, initCommitAdded := retrieveSystemInfoInitCommitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || initCommitAdded

	err, isolationAdded := retrieveSystemInfoIsolationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isolationAdded

	err, kernelMemoryAdded := retrieveSystemInfoKernelMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kernelMemoryAdded

	err, kernelVersionAdded := retrieveSystemInfoKernelVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kernelVersionAdded

	err, labelsAdded := retrieveSystemInfoLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	err, liveRestoreEnabledAdded := retrieveSystemInfoLiveRestoreEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || liveRestoreEnabledAdded

	err, loggingDriverAdded := retrieveSystemInfoLoggingDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || loggingDriverAdded

	err, memTotalAdded := retrieveSystemInfoMemTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memTotalAdded

	err, memoryLimitAdded := retrieveSystemInfoMemoryLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memoryLimitAdded

	err, nCpuAdded := retrieveSystemInfoNCPUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nCpuAdded

	err, nEventsListenerAdded := retrieveSystemInfoNEventsListenerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nEventsListenerAdded

	err, nFdAdded := retrieveSystemInfoNFdFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nFdAdded

	err, nGoroutinesAdded := retrieveSystemInfoNGoroutinesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nGoroutinesAdded

	err, nameAdded := retrieveSystemInfoNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, noProxyAdded := retrieveSystemInfoNoProxyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noProxyAdded

	err, oSTypeAdded := retrieveSystemInfoOSTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oSTypeAdded

	err, oSVersionAdded := retrieveSystemInfoOSVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oSVersionAdded

	err, oomKillDisableAdded := retrieveSystemInfoOomKillDisableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oomKillDisableAdded

	err, operatingSystemAdded := retrieveSystemInfoOperatingSystemFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || operatingSystemAdded

	err, pidsLimitAdded := retrieveSystemInfoPidsLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pidsLimitAdded

	err, pluginsAdded := retrieveSystemInfoPluginsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pluginsAdded

	err, productLicenseAdded := retrieveSystemInfoProductLicenseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || productLicenseAdded

	err, registryConfigAdded := retrieveSystemInfoRegistryConfigFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryConfigAdded

	err, runcCommitAdded := retrieveSystemInfoRuncCommitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runcCommitAdded

	err, runtimesAdded := retrieveSystemInfoRuntimesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimesAdded

	err, securityOptionsAdded := retrieveSystemInfoSecurityOptionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || securityOptionsAdded

	err, serverVersionAdded := retrieveSystemInfoServerVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverVersionAdded

	err, swapLimitAdded := retrieveSystemInfoSwapLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || swapLimitAdded

	err, swarmAdded := retrieveSystemInfoSwarmFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || swarmAdded

	err, systemStatusAdded := retrieveSystemInfoSystemStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || systemStatusAdded

	err, systemTimeAdded := retrieveSystemInfoSystemTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || systemTimeAdded

	err, warningsAdded := retrieveSystemInfoWarningsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || warningsAdded

	return nil, retAdded
}

func retrieveSystemInfoArchitectureFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	architectureFlagName := fmt.Sprintf("%v.Architecture", cmdPrefix)
	if cmd.Flags().Changed(architectureFlagName) {

		var architectureFlagName string
		if cmdPrefix == "" {
			architectureFlagName = "Architecture"
		} else {
			architectureFlagName = fmt.Sprintf("%v.Architecture", cmdPrefix)
		}

		architectureFlagValue, err := cmd.Flags().GetString(architectureFlagName)
		if err != nil {
			return err, false
		}
		m.Architecture = architectureFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoBridgeNfIp6tablesFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bridgeNfIp6tablesFlagName := fmt.Sprintf("%v.BridgeNfIp6tables", cmdPrefix)
	if cmd.Flags().Changed(bridgeNfIp6tablesFlagName) {

		var bridgeNfIp6tablesFlagName string
		if cmdPrefix == "" {
			bridgeNfIp6tablesFlagName = "BridgeNfIp6tables"
		} else {
			bridgeNfIp6tablesFlagName = fmt.Sprintf("%v.BridgeNfIp6tables", cmdPrefix)
		}

		bridgeNfIp6tablesFlagValue, err := cmd.Flags().GetBool(bridgeNfIp6tablesFlagName)
		if err != nil {
			return err, false
		}
		m.BridgeNfIp6tables = bridgeNfIp6tablesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoBridgeNfIptablesFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bridgeNfIptablesFlagName := fmt.Sprintf("%v.BridgeNfIptables", cmdPrefix)
	if cmd.Flags().Changed(bridgeNfIptablesFlagName) {

		var bridgeNfIptablesFlagName string
		if cmdPrefix == "" {
			bridgeNfIptablesFlagName = "BridgeNfIptables"
		} else {
			bridgeNfIptablesFlagName = fmt.Sprintf("%v.BridgeNfIptables", cmdPrefix)
		}

		bridgeNfIptablesFlagValue, err := cmd.Flags().GetBool(bridgeNfIptablesFlagName)
		if err != nil {
			return err, false
		}
		m.BridgeNfIptables = bridgeNfIptablesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoCPUSetFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuSetFlagName := fmt.Sprintf("%v.CPUSet", cmdPrefix)
	if cmd.Flags().Changed(cpuSetFlagName) {

		var cpuSetFlagName string
		if cmdPrefix == "" {
			cpuSetFlagName = "CPUSet"
		} else {
			cpuSetFlagName = fmt.Sprintf("%v.CPUSet", cmdPrefix)
		}

		cpuSetFlagValue, err := cmd.Flags().GetBool(cpuSetFlagName)
		if err != nil {
			return err, false
		}
		m.CPUSet = cpuSetFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoCPUSharesFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuSharesFlagName := fmt.Sprintf("%v.CPUShares", cmdPrefix)
	if cmd.Flags().Changed(cpuSharesFlagName) {

		var cpuSharesFlagName string
		if cmdPrefix == "" {
			cpuSharesFlagName = "CPUShares"
		} else {
			cpuSharesFlagName = fmt.Sprintf("%v.CPUShares", cmdPrefix)
		}

		cpuSharesFlagValue, err := cmd.Flags().GetBool(cpuSharesFlagName)
		if err != nil {
			return err, false
		}
		m.CPUShares = cpuSharesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoCgroupDriverFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cgroupDriverFlagName := fmt.Sprintf("%v.CgroupDriver", cmdPrefix)
	if cmd.Flags().Changed(cgroupDriverFlagName) {

		var cgroupDriverFlagName string
		if cmdPrefix == "" {
			cgroupDriverFlagName = "CgroupDriver"
		} else {
			cgroupDriverFlagName = fmt.Sprintf("%v.CgroupDriver", cmdPrefix)
		}

		cgroupDriverFlagValue, err := cmd.Flags().GetString(cgroupDriverFlagName)
		if err != nil {
			return err, false
		}
		m.CgroupDriver = &cgroupDriverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoClusterAdvertiseFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clusterAdvertiseFlagName := fmt.Sprintf("%v.ClusterAdvertise", cmdPrefix)
	if cmd.Flags().Changed(clusterAdvertiseFlagName) {

		var clusterAdvertiseFlagName string
		if cmdPrefix == "" {
			clusterAdvertiseFlagName = "ClusterAdvertise"
		} else {
			clusterAdvertiseFlagName = fmt.Sprintf("%v.ClusterAdvertise", cmdPrefix)
		}

		clusterAdvertiseFlagValue, err := cmd.Flags().GetString(clusterAdvertiseFlagName)
		if err != nil {
			return err, false
		}
		m.ClusterAdvertise = clusterAdvertiseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoClusterStoreFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clusterStoreFlagName := fmt.Sprintf("%v.ClusterStore", cmdPrefix)
	if cmd.Flags().Changed(clusterStoreFlagName) {

		var clusterStoreFlagName string
		if cmdPrefix == "" {
			clusterStoreFlagName = "ClusterStore"
		} else {
			clusterStoreFlagName = fmt.Sprintf("%v.ClusterStore", cmdPrefix)
		}

		clusterStoreFlagValue, err := cmd.Flags().GetString(clusterStoreFlagName)
		if err != nil {
			return err, false
		}
		m.ClusterStore = clusterStoreFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoContainerdCommitFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	containerdCommitFlagName := fmt.Sprintf("%v.ContainerdCommit", cmdPrefix)
	if cmd.Flags().Changed(containerdCommitFlagName) {

		containerdCommitFlagValue := models.Commit{}
		err, added := retrieveModelCommitFlags(depth+1, &containerdCommitFlagValue, containerdCommitFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
		if added {
			m.ContainerdCommit = &containerdCommitFlagValue
		}
	}

	return nil, retAdded
}

func retrieveSystemInfoContainersFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	containersFlagName := fmt.Sprintf("%v.Containers", cmdPrefix)
	if cmd.Flags().Changed(containersFlagName) {

		var containersFlagName string
		if cmdPrefix == "" {
			containersFlagName = "Containers"
		} else {
			containersFlagName = fmt.Sprintf("%v.Containers", cmdPrefix)
		}

		containersFlagValue, err := cmd.Flags().GetInt64(containersFlagName)
		if err != nil {
			return err, false
		}
		m.Containers = containersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoContainersPausedFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	containersPausedFlagName := fmt.Sprintf("%v.ContainersPaused", cmdPrefix)
	if cmd.Flags().Changed(containersPausedFlagName) {

		var containersPausedFlagName string
		if cmdPrefix == "" {
			containersPausedFlagName = "ContainersPaused"
		} else {
			containersPausedFlagName = fmt.Sprintf("%v.ContainersPaused", cmdPrefix)
		}

		containersPausedFlagValue, err := cmd.Flags().GetInt64(containersPausedFlagName)
		if err != nil {
			return err, false
		}
		m.ContainersPaused = containersPausedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoContainersRunningFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	containersRunningFlagName := fmt.Sprintf("%v.ContainersRunning", cmdPrefix)
	if cmd.Flags().Changed(containersRunningFlagName) {

		var containersRunningFlagName string
		if cmdPrefix == "" {
			containersRunningFlagName = "ContainersRunning"
		} else {
			containersRunningFlagName = fmt.Sprintf("%v.ContainersRunning", cmdPrefix)
		}

		containersRunningFlagValue, err := cmd.Flags().GetInt64(containersRunningFlagName)
		if err != nil {
			return err, false
		}
		m.ContainersRunning = containersRunningFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoContainersStoppedFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	containersStoppedFlagName := fmt.Sprintf("%v.ContainersStopped", cmdPrefix)
	if cmd.Flags().Changed(containersStoppedFlagName) {

		var containersStoppedFlagName string
		if cmdPrefix == "" {
			containersStoppedFlagName = "ContainersStopped"
		} else {
			containersStoppedFlagName = fmt.Sprintf("%v.ContainersStopped", cmdPrefix)
		}

		containersStoppedFlagValue, err := cmd.Flags().GetInt64(containersStoppedFlagName)
		if err != nil {
			return err, false
		}
		m.ContainersStopped = containersStoppedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoCPUCfsPeriodFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuCfsPeriodFlagName := fmt.Sprintf("%v.CpuCfsPeriod", cmdPrefix)
	if cmd.Flags().Changed(cpuCfsPeriodFlagName) {

		var cpuCfsPeriodFlagName string
		if cmdPrefix == "" {
			cpuCfsPeriodFlagName = "CpuCfsPeriod"
		} else {
			cpuCfsPeriodFlagName = fmt.Sprintf("%v.CpuCfsPeriod", cmdPrefix)
		}

		cpuCfsPeriodFlagValue, err := cmd.Flags().GetBool(cpuCfsPeriodFlagName)
		if err != nil {
			return err, false
		}
		m.CPUCfsPeriod = cpuCfsPeriodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoCPUCfsQuotaFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuCfsQuotaFlagName := fmt.Sprintf("%v.CpuCfsQuota", cmdPrefix)
	if cmd.Flags().Changed(cpuCfsQuotaFlagName) {

		var cpuCfsQuotaFlagName string
		if cmdPrefix == "" {
			cpuCfsQuotaFlagName = "CpuCfsQuota"
		} else {
			cpuCfsQuotaFlagName = fmt.Sprintf("%v.CpuCfsQuota", cmdPrefix)
		}

		cpuCfsQuotaFlagValue, err := cmd.Flags().GetBool(cpuCfsQuotaFlagName)
		if err != nil {
			return err, false
		}
		m.CPUCfsQuota = cpuCfsQuotaFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoDebugFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	debugFlagName := fmt.Sprintf("%v.Debug", cmdPrefix)
	if cmd.Flags().Changed(debugFlagName) {

		var debugFlagName string
		if cmdPrefix == "" {
			debugFlagName = "Debug"
		} else {
			debugFlagName = fmt.Sprintf("%v.Debug", cmdPrefix)
		}

		debugFlagValue, err := cmd.Flags().GetBool(debugFlagName)
		if err != nil {
			return err, false
		}
		m.Debug = debugFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoDefaultRuntimeFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultRuntimeFlagName := fmt.Sprintf("%v.DefaultRuntime", cmdPrefix)
	if cmd.Flags().Changed(defaultRuntimeFlagName) {

		var defaultRuntimeFlagName string
		if cmdPrefix == "" {
			defaultRuntimeFlagName = "DefaultRuntime"
		} else {
			defaultRuntimeFlagName = fmt.Sprintf("%v.DefaultRuntime", cmdPrefix)
		}

		defaultRuntimeFlagValue, err := cmd.Flags().GetString(defaultRuntimeFlagName)
		if err != nil {
			return err, false
		}
		m.DefaultRuntime = &defaultRuntimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoDockerRootDirFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dockerRootDirFlagName := fmt.Sprintf("%v.DockerRootDir", cmdPrefix)
	if cmd.Flags().Changed(dockerRootDirFlagName) {

		var dockerRootDirFlagName string
		if cmdPrefix == "" {
			dockerRootDirFlagName = "DockerRootDir"
		} else {
			dockerRootDirFlagName = fmt.Sprintf("%v.DockerRootDir", cmdPrefix)
		}

		dockerRootDirFlagValue, err := cmd.Flags().GetString(dockerRootDirFlagName)
		if err != nil {
			return err, false
		}
		m.DockerRootDir = dockerRootDirFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoDriverFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	driverFlagName := fmt.Sprintf("%v.Driver", cmdPrefix)
	if cmd.Flags().Changed(driverFlagName) {

		var driverFlagName string
		if cmdPrefix == "" {
			driverFlagName = "Driver"
		} else {
			driverFlagName = fmt.Sprintf("%v.Driver", cmdPrefix)
		}

		driverFlagValue, err := cmd.Flags().GetString(driverFlagName)
		if err != nil {
			return err, false
		}
		m.Driver = driverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoDriverStatusFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	driverStatusFlagName := fmt.Sprintf("%v.DriverStatus", cmdPrefix)
	if cmd.Flags().Changed(driverStatusFlagName) {
		// warning: DriverStatus array type [][]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSystemInfoExperimentalBuildFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	experimentalBuildFlagName := fmt.Sprintf("%v.ExperimentalBuild", cmdPrefix)
	if cmd.Flags().Changed(experimentalBuildFlagName) {

		var experimentalBuildFlagName string
		if cmdPrefix == "" {
			experimentalBuildFlagName = "ExperimentalBuild"
		} else {
			experimentalBuildFlagName = fmt.Sprintf("%v.ExperimentalBuild", cmdPrefix)
		}

		experimentalBuildFlagValue, err := cmd.Flags().GetBool(experimentalBuildFlagName)
		if err != nil {
			return err, false
		}
		m.ExperimentalBuild = experimentalBuildFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoGenericResourcesFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	genericResourcesFlagName := fmt.Sprintf("%v.GenericResources", cmdPrefix)
	if cmd.Flags().Changed(genericResourcesFlagName) {
		// warning: GenericResources array type GenericResources is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSystemInfoHTTPProxyFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpProxyFlagName := fmt.Sprintf("%v.HttpProxy", cmdPrefix)
	if cmd.Flags().Changed(httpProxyFlagName) {

		var httpProxyFlagName string
		if cmdPrefix == "" {
			httpProxyFlagName = "HttpProxy"
		} else {
			httpProxyFlagName = fmt.Sprintf("%v.HttpProxy", cmdPrefix)
		}

		httpProxyFlagValue, err := cmd.Flags().GetString(httpProxyFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPProxy = httpProxyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoHTTPSProxyFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpsProxyFlagName := fmt.Sprintf("%v.HttpsProxy", cmdPrefix)
	if cmd.Flags().Changed(httpsProxyFlagName) {

		var httpsProxyFlagName string
		if cmdPrefix == "" {
			httpsProxyFlagName = "HttpsProxy"
		} else {
			httpsProxyFlagName = fmt.Sprintf("%v.HttpsProxy", cmdPrefix)
		}

		httpsProxyFlagValue, err := cmd.Flags().GetString(httpsProxyFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPSProxy = httpsProxyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoIDFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.ID", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "ID"
		} else {
			idFlagName = fmt.Sprintf("%v.ID", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoIPV4ForwardingFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipv4ForwardingFlagName := fmt.Sprintf("%v.IPv4Forwarding", cmdPrefix)
	if cmd.Flags().Changed(ipv4ForwardingFlagName) {

		var ipv4ForwardingFlagName string
		if cmdPrefix == "" {
			ipv4ForwardingFlagName = "IPv4Forwarding"
		} else {
			ipv4ForwardingFlagName = fmt.Sprintf("%v.IPv4Forwarding", cmdPrefix)
		}

		ipv4ForwardingFlagValue, err := cmd.Flags().GetBool(ipv4ForwardingFlagName)
		if err != nil {
			return err, false
		}
		m.IPV4Forwarding = ipv4ForwardingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoImagesFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	imagesFlagName := fmt.Sprintf("%v.Images", cmdPrefix)
	if cmd.Flags().Changed(imagesFlagName) {

		var imagesFlagName string
		if cmdPrefix == "" {
			imagesFlagName = "Images"
		} else {
			imagesFlagName = fmt.Sprintf("%v.Images", cmdPrefix)
		}

		imagesFlagValue, err := cmd.Flags().GetInt64(imagesFlagName)
		if err != nil {
			return err, false
		}
		m.Images = imagesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoIndexServerAddressFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	indexServerAddressFlagName := fmt.Sprintf("%v.IndexServerAddress", cmdPrefix)
	if cmd.Flags().Changed(indexServerAddressFlagName) {

		var indexServerAddressFlagName string
		if cmdPrefix == "" {
			indexServerAddressFlagName = "IndexServerAddress"
		} else {
			indexServerAddressFlagName = fmt.Sprintf("%v.IndexServerAddress", cmdPrefix)
		}

		indexServerAddressFlagValue, err := cmd.Flags().GetString(indexServerAddressFlagName)
		if err != nil {
			return err, false
		}
		m.IndexServerAddress = &indexServerAddressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoInitBinaryFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	initBinaryFlagName := fmt.Sprintf("%v.InitBinary", cmdPrefix)
	if cmd.Flags().Changed(initBinaryFlagName) {

		var initBinaryFlagName string
		if cmdPrefix == "" {
			initBinaryFlagName = "InitBinary"
		} else {
			initBinaryFlagName = fmt.Sprintf("%v.InitBinary", cmdPrefix)
		}

		initBinaryFlagValue, err := cmd.Flags().GetString(initBinaryFlagName)
		if err != nil {
			return err, false
		}
		m.InitBinary = initBinaryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoInitCommitFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	initCommitFlagName := fmt.Sprintf("%v.InitCommit", cmdPrefix)
	if cmd.Flags().Changed(initCommitFlagName) {

		initCommitFlagValue := models.Commit{}
		err, added := retrieveModelCommitFlags(depth+1, &initCommitFlagValue, initCommitFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
		if added {
			m.InitCommit = &initCommitFlagValue
		}
	}

	return nil, retAdded
}

func retrieveSystemInfoIsolationFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isolationFlagName := fmt.Sprintf("%v.Isolation", cmdPrefix)
	if cmd.Flags().Changed(isolationFlagName) {

		var isolationFlagName string
		if cmdPrefix == "" {
			isolationFlagName = "Isolation"
		} else {
			isolationFlagName = fmt.Sprintf("%v.Isolation", cmdPrefix)
		}

		isolationFlagValue, err := cmd.Flags().GetString(isolationFlagName)
		if err != nil {
			return err, false
		}
		m.Isolation = &isolationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoKernelMemoryFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kernelMemoryFlagName := fmt.Sprintf("%v.KernelMemory", cmdPrefix)
	if cmd.Flags().Changed(kernelMemoryFlagName) {

		var kernelMemoryFlagName string
		if cmdPrefix == "" {
			kernelMemoryFlagName = "KernelMemory"
		} else {
			kernelMemoryFlagName = fmt.Sprintf("%v.KernelMemory", cmdPrefix)
		}

		kernelMemoryFlagValue, err := cmd.Flags().GetBool(kernelMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.KernelMemory = kernelMemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoKernelVersionFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kernelVersionFlagName := fmt.Sprintf("%v.KernelVersion", cmdPrefix)
	if cmd.Flags().Changed(kernelVersionFlagName) {

		var kernelVersionFlagName string
		if cmdPrefix == "" {
			kernelVersionFlagName = "KernelVersion"
		} else {
			kernelVersionFlagName = fmt.Sprintf("%v.KernelVersion", cmdPrefix)
		}

		kernelVersionFlagValue, err := cmd.Flags().GetString(kernelVersionFlagName)
		if err != nil {
			return err, false
		}
		m.KernelVersion = kernelVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoLabelsFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	labelsFlagName := fmt.Sprintf("%v.Labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: Labels array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSystemInfoLiveRestoreEnabledFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	liveRestoreEnabledFlagName := fmt.Sprintf("%v.LiveRestoreEnabled", cmdPrefix)
	if cmd.Flags().Changed(liveRestoreEnabledFlagName) {

		var liveRestoreEnabledFlagName string
		if cmdPrefix == "" {
			liveRestoreEnabledFlagName = "LiveRestoreEnabled"
		} else {
			liveRestoreEnabledFlagName = fmt.Sprintf("%v.LiveRestoreEnabled", cmdPrefix)
		}

		liveRestoreEnabledFlagValue, err := cmd.Flags().GetBool(liveRestoreEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.LiveRestoreEnabled = &liveRestoreEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoLoggingDriverFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	loggingDriverFlagName := fmt.Sprintf("%v.LoggingDriver", cmdPrefix)
	if cmd.Flags().Changed(loggingDriverFlagName) {

		var loggingDriverFlagName string
		if cmdPrefix == "" {
			loggingDriverFlagName = "LoggingDriver"
		} else {
			loggingDriverFlagName = fmt.Sprintf("%v.LoggingDriver", cmdPrefix)
		}

		loggingDriverFlagValue, err := cmd.Flags().GetString(loggingDriverFlagName)
		if err != nil {
			return err, false
		}
		m.LoggingDriver = loggingDriverFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoMemTotalFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	memTotalFlagName := fmt.Sprintf("%v.MemTotal", cmdPrefix)
	if cmd.Flags().Changed(memTotalFlagName) {

		var memTotalFlagName string
		if cmdPrefix == "" {
			memTotalFlagName = "MemTotal"
		} else {
			memTotalFlagName = fmt.Sprintf("%v.MemTotal", cmdPrefix)
		}

		memTotalFlagValue, err := cmd.Flags().GetInt64(memTotalFlagName)
		if err != nil {
			return err, false
		}
		m.MemTotal = memTotalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoMemoryLimitFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	memoryLimitFlagName := fmt.Sprintf("%v.MemoryLimit", cmdPrefix)
	if cmd.Flags().Changed(memoryLimitFlagName) {

		var memoryLimitFlagName string
		if cmdPrefix == "" {
			memoryLimitFlagName = "MemoryLimit"
		} else {
			memoryLimitFlagName = fmt.Sprintf("%v.MemoryLimit", cmdPrefix)
		}

		memoryLimitFlagValue, err := cmd.Flags().GetBool(memoryLimitFlagName)
		if err != nil {
			return err, false
		}
		m.MemoryLimit = memoryLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoNCPUFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nCpuFlagName := fmt.Sprintf("%v.NCPU", cmdPrefix)
	if cmd.Flags().Changed(nCpuFlagName) {

		var nCpuFlagName string
		if cmdPrefix == "" {
			nCpuFlagName = "NCPU"
		} else {
			nCpuFlagName = fmt.Sprintf("%v.NCPU", cmdPrefix)
		}

		nCpuFlagValue, err := cmd.Flags().GetInt64(nCpuFlagName)
		if err != nil {
			return err, false
		}
		m.NCPU = nCpuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoNEventsListenerFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nEventsListenerFlagName := fmt.Sprintf("%v.NEventsListener", cmdPrefix)
	if cmd.Flags().Changed(nEventsListenerFlagName) {

		var nEventsListenerFlagName string
		if cmdPrefix == "" {
			nEventsListenerFlagName = "NEventsListener"
		} else {
			nEventsListenerFlagName = fmt.Sprintf("%v.NEventsListener", cmdPrefix)
		}

		nEventsListenerFlagValue, err := cmd.Flags().GetInt64(nEventsListenerFlagName)
		if err != nil {
			return err, false
		}
		m.NEventsListener = nEventsListenerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoNFdFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nFdFlagName := fmt.Sprintf("%v.NFd", cmdPrefix)
	if cmd.Flags().Changed(nFdFlagName) {

		var nFdFlagName string
		if cmdPrefix == "" {
			nFdFlagName = "NFd"
		} else {
			nFdFlagName = fmt.Sprintf("%v.NFd", cmdPrefix)
		}

		nFdFlagValue, err := cmd.Flags().GetInt64(nFdFlagName)
		if err != nil {
			return err, false
		}
		m.NFd = nFdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoNGoroutinesFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nGoroutinesFlagName := fmt.Sprintf("%v.NGoroutines", cmdPrefix)
	if cmd.Flags().Changed(nGoroutinesFlagName) {

		var nGoroutinesFlagName string
		if cmdPrefix == "" {
			nGoroutinesFlagName = "NGoroutines"
		} else {
			nGoroutinesFlagName = fmt.Sprintf("%v.NGoroutines", cmdPrefix)
		}

		nGoroutinesFlagValue, err := cmd.Flags().GetInt64(nGoroutinesFlagName)
		if err != nil {
			return err, false
		}
		m.NGoroutines = nGoroutinesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoNameFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoNoProxyFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noProxyFlagName := fmt.Sprintf("%v.NoProxy", cmdPrefix)
	if cmd.Flags().Changed(noProxyFlagName) {

		var noProxyFlagName string
		if cmdPrefix == "" {
			noProxyFlagName = "NoProxy"
		} else {
			noProxyFlagName = fmt.Sprintf("%v.NoProxy", cmdPrefix)
		}

		noProxyFlagValue, err := cmd.Flags().GetString(noProxyFlagName)
		if err != nil {
			return err, false
		}
		m.NoProxy = noProxyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoOSTypeFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oSTypeFlagName := fmt.Sprintf("%v.OSType", cmdPrefix)
	if cmd.Flags().Changed(oSTypeFlagName) {

		var oSTypeFlagName string
		if cmdPrefix == "" {
			oSTypeFlagName = "OSType"
		} else {
			oSTypeFlagName = fmt.Sprintf("%v.OSType", cmdPrefix)
		}

		oSTypeFlagValue, err := cmd.Flags().GetString(oSTypeFlagName)
		if err != nil {
			return err, false
		}
		m.OSType = oSTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoOSVersionFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oSVersionFlagName := fmt.Sprintf("%v.OSVersion", cmdPrefix)
	if cmd.Flags().Changed(oSVersionFlagName) {

		var oSVersionFlagName string
		if cmdPrefix == "" {
			oSVersionFlagName = "OSVersion"
		} else {
			oSVersionFlagName = fmt.Sprintf("%v.OSVersion", cmdPrefix)
		}

		oSVersionFlagValue, err := cmd.Flags().GetString(oSVersionFlagName)
		if err != nil {
			return err, false
		}
		m.OSVersion = oSVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoOomKillDisableFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oomKillDisableFlagName := fmt.Sprintf("%v.OomKillDisable", cmdPrefix)
	if cmd.Flags().Changed(oomKillDisableFlagName) {

		var oomKillDisableFlagName string
		if cmdPrefix == "" {
			oomKillDisableFlagName = "OomKillDisable"
		} else {
			oomKillDisableFlagName = fmt.Sprintf("%v.OomKillDisable", cmdPrefix)
		}

		oomKillDisableFlagValue, err := cmd.Flags().GetBool(oomKillDisableFlagName)
		if err != nil {
			return err, false
		}
		m.OomKillDisable = oomKillDisableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoOperatingSystemFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	operatingSystemFlagName := fmt.Sprintf("%v.OperatingSystem", cmdPrefix)
	if cmd.Flags().Changed(operatingSystemFlagName) {

		var operatingSystemFlagName string
		if cmdPrefix == "" {
			operatingSystemFlagName = "OperatingSystem"
		} else {
			operatingSystemFlagName = fmt.Sprintf("%v.OperatingSystem", cmdPrefix)
		}

		operatingSystemFlagValue, err := cmd.Flags().GetString(operatingSystemFlagName)
		if err != nil {
			return err, false
		}
		m.OperatingSystem = operatingSystemFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoPidsLimitFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pidsLimitFlagName := fmt.Sprintf("%v.PidsLimit", cmdPrefix)
	if cmd.Flags().Changed(pidsLimitFlagName) {

		var pidsLimitFlagName string
		if cmdPrefix == "" {
			pidsLimitFlagName = "PidsLimit"
		} else {
			pidsLimitFlagName = fmt.Sprintf("%v.PidsLimit", cmdPrefix)
		}

		pidsLimitFlagValue, err := cmd.Flags().GetBool(pidsLimitFlagName)
		if err != nil {
			return err, false
		}
		m.PidsLimit = pidsLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoPluginsFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pluginsFlagName := fmt.Sprintf("%v.Plugins", cmdPrefix)
	if cmd.Flags().Changed(pluginsFlagName) {

		pluginsFlagValue := models.PluginsInfo{}
		err, added := retrieveModelPluginsInfoFlags(depth+1, &pluginsFlagValue, pluginsFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
		if added {
			m.Plugins = &pluginsFlagValue
		}
	}

	return nil, retAdded
}

func retrieveSystemInfoProductLicenseFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	productLicenseFlagName := fmt.Sprintf("%v.ProductLicense", cmdPrefix)
	if cmd.Flags().Changed(productLicenseFlagName) {

		var productLicenseFlagName string
		if cmdPrefix == "" {
			productLicenseFlagName = "ProductLicense"
		} else {
			productLicenseFlagName = fmt.Sprintf("%v.ProductLicense", cmdPrefix)
		}

		productLicenseFlagValue, err := cmd.Flags().GetString(productLicenseFlagName)
		if err != nil {
			return err, false
		}
		m.ProductLicense = productLicenseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoRegistryConfigFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryConfigFlagName := fmt.Sprintf("%v.RegistryConfig", cmdPrefix)
	if cmd.Flags().Changed(registryConfigFlagName) {

		registryConfigFlagValue := models.RegistryServiceConfig{}
		err, added := retrieveModelRegistryServiceConfigFlags(depth+1, &registryConfigFlagValue, registryConfigFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
		if added {
			m.RegistryConfig = &registryConfigFlagValue
		}
	}

	return nil, retAdded
}

func retrieveSystemInfoRuncCommitFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runcCommitFlagName := fmt.Sprintf("%v.RuncCommit", cmdPrefix)
	if cmd.Flags().Changed(runcCommitFlagName) {

		runcCommitFlagValue := models.Commit{}
		err, added := retrieveModelCommitFlags(depth+1, &runcCommitFlagValue, runcCommitFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
		if added {
			m.RuncCommit = &runcCommitFlagValue
		}
	}

	return nil, retAdded
}

func retrieveSystemInfoRuntimesFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runtimesFlagName := fmt.Sprintf("%v.Runtimes", cmdPrefix)
	if cmd.Flags().Changed(runtimesFlagName) {
		// warning: Runtimes map type map[string]Runtime is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSystemInfoSecurityOptionsFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	securityOptionsFlagName := fmt.Sprintf("%v.SecurityOptions", cmdPrefix)
	if cmd.Flags().Changed(securityOptionsFlagName) {
		// warning: SecurityOptions array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSystemInfoServerVersionFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverVersionFlagName := fmt.Sprintf("%v.ServerVersion", cmdPrefix)
	if cmd.Flags().Changed(serverVersionFlagName) {

		var serverVersionFlagName string
		if cmdPrefix == "" {
			serverVersionFlagName = "ServerVersion"
		} else {
			serverVersionFlagName = fmt.Sprintf("%v.ServerVersion", cmdPrefix)
		}

		serverVersionFlagValue, err := cmd.Flags().GetString(serverVersionFlagName)
		if err != nil {
			return err, false
		}
		m.ServerVersion = serverVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoSwapLimitFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	swapLimitFlagName := fmt.Sprintf("%v.SwapLimit", cmdPrefix)
	if cmd.Flags().Changed(swapLimitFlagName) {

		var swapLimitFlagName string
		if cmdPrefix == "" {
			swapLimitFlagName = "SwapLimit"
		} else {
			swapLimitFlagName = fmt.Sprintf("%v.SwapLimit", cmdPrefix)
		}

		swapLimitFlagValue, err := cmd.Flags().GetBool(swapLimitFlagName)
		if err != nil {
			return err, false
		}
		m.SwapLimit = swapLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoSwarmFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	swarmFlagName := fmt.Sprintf("%v.Swarm", cmdPrefix)
	if cmd.Flags().Changed(swarmFlagName) {

		swarmFlagValue := models.SwarmInfo{}
		err, added := retrieveModelSwarmInfoFlags(depth+1, &swarmFlagValue, swarmFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
		if added {
			m.Swarm = &swarmFlagValue
		}
	}

	return nil, retAdded
}

func retrieveSystemInfoSystemStatusFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	systemStatusFlagName := fmt.Sprintf("%v.SystemStatus", cmdPrefix)
	if cmd.Flags().Changed(systemStatusFlagName) {
		// warning: SystemStatus array type [][]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSystemInfoSystemTimeFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	systemTimeFlagName := fmt.Sprintf("%v.SystemTime", cmdPrefix)
	if cmd.Flags().Changed(systemTimeFlagName) {

		var systemTimeFlagName string
		if cmdPrefix == "" {
			systemTimeFlagName = "SystemTime"
		} else {
			systemTimeFlagName = fmt.Sprintf("%v.SystemTime", cmdPrefix)
		}

		systemTimeFlagValue, err := cmd.Flags().GetString(systemTimeFlagName)
		if err != nil {
			return err, false
		}
		m.SystemTime = systemTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSystemInfoWarningsFlags(depth int, m *models.SystemInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	warningsFlagName := fmt.Sprintf("%v.Warnings", cmdPrefix)
	if cmd.Flags().Changed(warningsFlagName) {
		// warning: Warnings array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
