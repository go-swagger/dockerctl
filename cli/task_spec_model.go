// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelTaskSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskSpecContainerSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecForceUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecLogDriver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecNetworkAttachmentSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecNetworks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPlacement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecPluginSpec(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecRestartPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskSpecRuntime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskSpecContainerSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var containerSpecFlagName string
	if cmdPrefix == "" {
		containerSpecFlagName = "ContainerSpec"
	} else {
		containerSpecFlagName = fmt.Sprintf("%v.ContainerSpec", cmdPrefix)
	}

	registerModelTaskSpecFlags(depth+1, containerSpecFlagName, cmd)

	return nil
}

func registerTaskSpecForceUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	forceUpdateDescription := `A counter that triggers an update even if no relevant parameters have been changed.`

	var forceUpdateFlagName string
	if cmdPrefix == "" {
		forceUpdateFlagName = "ForceUpdate"
	} else {
		forceUpdateFlagName = fmt.Sprintf("%v.ForceUpdate", cmdPrefix)
	}

	var forceUpdateFlagDefault int64

	_ = cmd.PersistentFlags().Int64(forceUpdateFlagName, forceUpdateFlagDefault, forceUpdateDescription)

	return nil
}

func registerTaskSpecLogDriver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var logDriverFlagName string
	if cmdPrefix == "" {
		logDriverFlagName = "LogDriver"
	} else {
		logDriverFlagName = fmt.Sprintf("%v.LogDriver", cmdPrefix)
	}

	registerModelTaskSpecFlags(depth+1, logDriverFlagName, cmd)

	return nil
}

func registerTaskSpecNetworkAttachmentSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var networkAttachmentSpecFlagName string
	if cmdPrefix == "" {
		networkAttachmentSpecFlagName = "NetworkAttachmentSpec"
	} else {
		networkAttachmentSpecFlagName = fmt.Sprintf("%v.NetworkAttachmentSpec", cmdPrefix)
	}

	registerModelTaskSpecFlags(depth+1, networkAttachmentSpecFlagName, cmd)

	return nil
}

func registerTaskSpecNetworks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}
	// warning: Networks []*NetworkAttachmentConfig array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskSpecPlacement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var placementFlagName string
	if cmdPrefix == "" {
		placementFlagName = "Placement"
	} else {
		placementFlagName = fmt.Sprintf("%v.Placement", cmdPrefix)
	}

	registerModelTaskSpecFlags(depth+1, placementFlagName, cmd)

	return nil
}

func registerTaskSpecPluginSpec(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var pluginSpecFlagName string
	if cmdPrefix == "" {
		pluginSpecFlagName = "PluginSpec"
	} else {
		pluginSpecFlagName = fmt.Sprintf("%v.PluginSpec", cmdPrefix)
	}

	registerModelTaskSpecFlags(depth+1, pluginSpecFlagName, cmd)

	return nil
}

func registerTaskSpecResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var resourcesFlagName string
	if cmdPrefix == "" {
		resourcesFlagName = "Resources"
	} else {
		resourcesFlagName = fmt.Sprintf("%v.Resources", cmdPrefix)
	}

	registerModelTaskSpecFlags(depth+1, resourcesFlagName, cmd)

	return nil
}

func registerTaskSpecRestartPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var restartPolicyFlagName string
	if cmdPrefix == "" {
		restartPolicyFlagName = "RestartPolicy"
	} else {
		restartPolicyFlagName = fmt.Sprintf("%v.RestartPolicy", cmdPrefix)
	}

	registerModelTaskSpecFlags(depth+1, restartPolicyFlagName, cmd)

	return nil
}

func registerTaskSpecRuntime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runtimeDescription := `Runtime is the type of runtime specified for the task executor.`

	var runtimeFlagName string
	if cmdPrefix == "" {
		runtimeFlagName = "Runtime"
	} else {
		runtimeFlagName = fmt.Sprintf("%v.Runtime", cmdPrefix)
	}

	var runtimeFlagDefault string

	_ = cmd.PersistentFlags().String(runtimeFlagName, runtimeFlagDefault, runtimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskSpecFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, containerSpecAdded := retrieveTaskSpecContainerSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || containerSpecAdded

	err, forceUpdateAdded := retrieveTaskSpecForceUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || forceUpdateAdded

	err, logDriverAdded := retrieveTaskSpecLogDriverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logDriverAdded

	err, networkAttachmentSpecAdded := retrieveTaskSpecNetworkAttachmentSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networkAttachmentSpecAdded

	err, networksAdded := retrieveTaskSpecNetworksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networksAdded

	err, placementAdded := retrieveTaskSpecPlacementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || placementAdded

	err, pluginSpecAdded := retrieveTaskSpecPluginSpecFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pluginSpecAdded

	err, resourcesAdded := retrieveTaskSpecResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourcesAdded

	err, restartPolicyAdded := retrieveTaskSpecRestartPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || restartPolicyAdded

	err, runtimeAdded := retrieveTaskSpecRuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeAdded

	return nil, retAdded
}

func retrieveTaskSpecContainerSpecFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	containerSpecFlagName := fmt.Sprintf("%v.ContainerSpec", cmdPrefix)
	if cmd.Flags().Changed(containerSpecFlagName) {

		containerSpecFlagValue := &models.TaskSpec{}
		err, added := retrieveModelTaskSpecFlags(depth+1, containerSpecFlagValue, containerSpecFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveTaskSpecForceUpdateFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	forceUpdateFlagName := fmt.Sprintf("%v.ForceUpdate", cmdPrefix)
	if cmd.Flags().Changed(forceUpdateFlagName) {

		var forceUpdateFlagName string
		if cmdPrefix == "" {
			forceUpdateFlagName = "ForceUpdate"
		} else {
			forceUpdateFlagName = fmt.Sprintf("%v.ForceUpdate", cmdPrefix)
		}

		forceUpdateFlagValue, err := cmd.Flags().GetInt64(forceUpdateFlagName)
		if err != nil {
			return err, false
		}
		m.ForceUpdate = forceUpdateFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveTaskSpecLogDriverFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	logDriverFlagName := fmt.Sprintf("%v.LogDriver", cmdPrefix)
	if cmd.Flags().Changed(logDriverFlagName) {

		logDriverFlagValue := &models.TaskSpec{}
		err, added := retrieveModelTaskSpecFlags(depth+1, logDriverFlagValue, logDriverFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveTaskSpecNetworkAttachmentSpecFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	networkAttachmentSpecFlagName := fmt.Sprintf("%v.NetworkAttachmentSpec", cmdPrefix)
	if cmd.Flags().Changed(networkAttachmentSpecFlagName) {

		networkAttachmentSpecFlagValue := &models.TaskSpec{}
		err, added := retrieveModelTaskSpecFlags(depth+1, networkAttachmentSpecFlagValue, networkAttachmentSpecFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveTaskSpecNetworksFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	networksFlagName := fmt.Sprintf("%v.Networks", cmdPrefix)
	if cmd.Flags().Changed(networksFlagName) {
		// warning: Networks array type []*NetworkAttachmentConfig is not supported by go-swagger cli yet
	}
	return nil, retAdded
}

func retrieveTaskSpecPlacementFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	placementFlagName := fmt.Sprintf("%v.Placement", cmdPrefix)
	if cmd.Flags().Changed(placementFlagName) {

		placementFlagValue := &models.TaskSpec{}
		err, added := retrieveModelTaskSpecFlags(depth+1, placementFlagValue, placementFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveTaskSpecPluginSpecFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	pluginSpecFlagName := fmt.Sprintf("%v.PluginSpec", cmdPrefix)
	if cmd.Flags().Changed(pluginSpecFlagName) {

		pluginSpecFlagValue := &models.TaskSpec{}
		err, added := retrieveModelTaskSpecFlags(depth+1, pluginSpecFlagValue, pluginSpecFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveTaskSpecResourcesFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	resourcesFlagName := fmt.Sprintf("%v.Resources", cmdPrefix)
	if cmd.Flags().Changed(resourcesFlagName) {

		resourcesFlagValue := &models.TaskSpec{}
		err, added := retrieveModelTaskSpecFlags(depth+1, resourcesFlagValue, resourcesFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveTaskSpecRestartPolicyFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	restartPolicyFlagName := fmt.Sprintf("%v.RestartPolicy", cmdPrefix)
	if cmd.Flags().Changed(restartPolicyFlagName) {

		restartPolicyFlagValue := &models.TaskSpec{}
		err, added := retrieveModelTaskSpecFlags(depth+1, restartPolicyFlagValue, restartPolicyFlagName, cmd)
		if err != nil {
			return err, false
		}
		retAdded = retAdded || added
	}
	return nil, retAdded
}

func retrieveTaskSpecRuntimeFlags(depth int, m *models.TaskSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	runtimeFlagName := fmt.Sprintf("%v.Runtime", cmdPrefix)
	if cmd.Flags().Changed(runtimeFlagName) {

		var runtimeFlagName string
		if cmdPrefix == "" {
			runtimeFlagName = "Runtime"
		} else {
			runtimeFlagName = fmt.Sprintf("%v.Runtime", cmdPrefix)
		}

		runtimeFlagValue, err := cmd.Flags().GetString(runtimeFlagName)
		if err != nil {
			return err, false
		}
		m.Runtime = runtimeFlagValue

		retAdded = true
	}
	return nil, retAdded
}
