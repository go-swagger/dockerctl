// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/dockerctl/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerModelTLSInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTLSInfoCertIssuerPublicKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTLSInfoCertIssuerSubject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTLSInfoTrustRoot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTLSInfoCertIssuerPublicKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	certIssuerPublicKeyDescription := `The base64-url-safe-encoded raw public key bytes of the issuer`

	var certIssuerPublicKeyFlagName string
	if cmdPrefix == "" {
		certIssuerPublicKeyFlagName = "CertIssuerPublicKey"
	} else {
		certIssuerPublicKeyFlagName = fmt.Sprintf("%v.CertIssuerPublicKey", cmdPrefix)
	}

	var certIssuerPublicKeyFlagDefault string

	_ = cmd.PersistentFlags().String(certIssuerPublicKeyFlagName, certIssuerPublicKeyFlagDefault, certIssuerPublicKeyDescription)

	return nil
}

func registerTLSInfoCertIssuerSubject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	certIssuerSubjectDescription := `The base64-url-safe-encoded raw subject bytes of the issuer`

	var certIssuerSubjectFlagName string
	if cmdPrefix == "" {
		certIssuerSubjectFlagName = "CertIssuerSubject"
	} else {
		certIssuerSubjectFlagName = fmt.Sprintf("%v.CertIssuerSubject", cmdPrefix)
	}

	var certIssuerSubjectFlagDefault string

	_ = cmd.PersistentFlags().String(certIssuerSubjectFlagName, certIssuerSubjectFlagDefault, certIssuerSubjectDescription)

	return nil
}

func registerTLSInfoTrustRoot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	trustRootDescription := `The root CA certificate(s) that are used to validate leaf TLS certificates`

	var trustRootFlagName string
	if cmdPrefix == "" {
		trustRootFlagName = "TrustRoot"
	} else {
		trustRootFlagName = fmt.Sprintf("%v.TrustRoot", cmdPrefix)
	}

	var trustRootFlagDefault string

	_ = cmd.PersistentFlags().String(trustRootFlagName, trustRootFlagDefault, trustRootDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTLSInfoFlags(depth int, m *models.TLSInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, certIssuerPublicKeyAdded := retrieveTLSInfoCertIssuerPublicKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certIssuerPublicKeyAdded

	err, certIssuerSubjectAdded := retrieveTLSInfoCertIssuerSubjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || certIssuerSubjectAdded

	err, trustRootAdded := retrieveTLSInfoTrustRootFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || trustRootAdded

	return nil, retAdded
}

func retrieveTLSInfoCertIssuerPublicKeyFlags(depth int, m *models.TLSInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	certIssuerPublicKeyFlagName := fmt.Sprintf("%v.CertIssuerPublicKey", cmdPrefix)
	if cmd.Flags().Changed(certIssuerPublicKeyFlagName) {

		var certIssuerPublicKeyFlagName string
		if cmdPrefix == "" {
			certIssuerPublicKeyFlagName = "CertIssuerPublicKey"
		} else {
			certIssuerPublicKeyFlagName = fmt.Sprintf("%v.CertIssuerPublicKey", cmdPrefix)
		}

		certIssuerPublicKeyFlagValue, err := cmd.Flags().GetString(certIssuerPublicKeyFlagName)
		if err != nil {
			return err, false
		}
		m.CertIssuerPublicKey = certIssuerPublicKeyFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveTLSInfoCertIssuerSubjectFlags(depth int, m *models.TLSInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	certIssuerSubjectFlagName := fmt.Sprintf("%v.CertIssuerSubject", cmdPrefix)
	if cmd.Flags().Changed(certIssuerSubjectFlagName) {

		var certIssuerSubjectFlagName string
		if cmdPrefix == "" {
			certIssuerSubjectFlagName = "CertIssuerSubject"
		} else {
			certIssuerSubjectFlagName = fmt.Sprintf("%v.CertIssuerSubject", cmdPrefix)
		}

		certIssuerSubjectFlagValue, err := cmd.Flags().GetString(certIssuerSubjectFlagName)
		if err != nil {
			return err, false
		}
		m.CertIssuerSubject = certIssuerSubjectFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveTLSInfoTrustRootFlags(depth int, m *models.TLSInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false
	trustRootFlagName := fmt.Sprintf("%v.TrustRoot", cmdPrefix)
	if cmd.Flags().Changed(trustRootFlagName) {

		var trustRootFlagName string
		if cmdPrefix == "" {
			trustRootFlagName = "TrustRoot"
		} else {
			trustRootFlagName = fmt.Sprintf("%v.TrustRoot", cmdPrefix)
		}

		trustRootFlagValue, err := cmd.Flags().GetString(trustRootFlagName)
		if err != nil {
			return err, false
		}
		m.TrustRoot = trustRootFlagValue

		retAdded = true
	}
	return nil, retAdded
}
