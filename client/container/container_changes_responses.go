// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/go-openapi/dockerctl/models"
)

// ContainerChangesReader is a Reader for the ContainerChanges structure.
type ContainerChangesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContainerChangesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewContainerChangesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewContainerChangesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewContainerChangesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewContainerChangesOK creates a ContainerChangesOK with default headers values
func NewContainerChangesOK() *ContainerChangesOK {
	return &ContainerChangesOK{}
}

/* ContainerChangesOK describes a response with status code 200, with default header values.

The list of changes
*/
type ContainerChangesOK struct {
	Payload []*ContainerChangeResponseItem
}

func (o *ContainerChangesOK) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/changes][%d] containerChangesOK  %+v", 200, o.Payload)
}
func (o *ContainerChangesOK) GetPayload() []*ContainerChangeResponseItem {
	return o.Payload
}

func (o *ContainerChangesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerChangesNotFound creates a ContainerChangesNotFound with default headers values
func NewContainerChangesNotFound() *ContainerChangesNotFound {
	return &ContainerChangesNotFound{}
}

/* ContainerChangesNotFound describes a response with status code 404, with default header values.

no such container
*/
type ContainerChangesNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ContainerChangesNotFound) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/changes][%d] containerChangesNotFound  %+v", 404, o.Payload)
}
func (o *ContainerChangesNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ContainerChangesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerChangesInternalServerError creates a ContainerChangesInternalServerError with default headers values
func NewContainerChangesInternalServerError() *ContainerChangesInternalServerError {
	return &ContainerChangesInternalServerError{}
}

/* ContainerChangesInternalServerError describes a response with status code 500, with default header values.

server error
*/
type ContainerChangesInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ContainerChangesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/changes][%d] containerChangesInternalServerError  %+v", 500, o.Payload)
}
func (o *ContainerChangesInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ContainerChangesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ContainerChangeResponseItem ContainerChangeResponseItem
//
// change item in response to ContainerChanges operation
swagger:model ContainerChangeResponseItem
*/
type ContainerChangeResponseItem struct {

	// Kind of change
	// Required: true
	// Enum: [0 1 2]
	Kind uint8 `json:"Kind"`

	// Path to file that has changed
	// Required: true
	Path string `json:"Path"`
}

// Validate validates this container change response item
func (o *ContainerChangeResponseItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var containerChangeResponseItemTypeKindPropEnum []interface{}

func init() {
	var res []uint8
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		containerChangeResponseItemTypeKindPropEnum = append(containerChangeResponseItemTypeKindPropEnum, v)
	}
}

// prop value enum
func (o *ContainerChangeResponseItem) validateKindEnum(path, location string, value uint8) error {
	if err := validate.EnumCase(path, location, value, containerChangeResponseItemTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ContainerChangeResponseItem) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("Kind", "body", uint8(o.Kind)); err != nil {
		return err
	}

	// value enum
	if err := o.validateKindEnum("Kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

func (o *ContainerChangeResponseItem) validatePath(formats strfmt.Registry) error {

	if err := validate.RequiredString("Path", "body", o.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this container change response item based on context it is used
func (o *ContainerChangeResponseItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ContainerChangeResponseItem) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContainerChangeResponseItem) UnmarshalBinary(b []byte) error {
	var res ContainerChangeResponseItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
