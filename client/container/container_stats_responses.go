// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/go-openapi/dockerctl/models"
)

// ContainerStatsReader is a Reader for the ContainerStats structure.
type ContainerStatsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContainerStatsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewContainerStatsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewContainerStatsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewContainerStatsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewContainerStatsOK creates a ContainerStatsOK with default headers values
func NewContainerStatsOK() *ContainerStatsOK {
	return &ContainerStatsOK{}
}

/* ContainerStatsOK describes a response with status code 200, with default header values.

no error
*/
type ContainerStatsOK struct {
	Payload interface{}
}

func (o *ContainerStatsOK) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/stats][%d] containerStatsOK  %+v", 200, o.Payload)
}
func (o *ContainerStatsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ContainerStatsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerStatsNotFound creates a ContainerStatsNotFound with default headers values
func NewContainerStatsNotFound() *ContainerStatsNotFound {
	return &ContainerStatsNotFound{}
}

/* ContainerStatsNotFound describes a response with status code 404, with default header values.

no such container
*/
type ContainerStatsNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ContainerStatsNotFound) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/stats][%d] containerStatsNotFound  %+v", 404, o.Payload)
}
func (o *ContainerStatsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ContainerStatsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerStatsInternalServerError creates a ContainerStatsInternalServerError with default headers values
func NewContainerStatsInternalServerError() *ContainerStatsInternalServerError {
	return &ContainerStatsInternalServerError{}
}

/* ContainerStatsInternalServerError describes a response with status code 500, with default header values.

server error
*/
type ContainerStatsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ContainerStatsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/stats][%d] containerStatsInternalServerError  %+v", 500, o.Payload)
}
func (o *ContainerStatsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ContainerStatsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
