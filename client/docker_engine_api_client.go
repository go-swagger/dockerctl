// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/go-swagger/dockerctl/client/config"
	"github.com/go-swagger/dockerctl/client/container"
	"github.com/go-swagger/dockerctl/client/distribution"
	"github.com/go-swagger/dockerctl/client/exec"
	"github.com/go-swagger/dockerctl/client/image"
	"github.com/go-swagger/dockerctl/client/network"
	"github.com/go-swagger/dockerctl/client/node"
	"github.com/go-swagger/dockerctl/client/plugin"
	"github.com/go-swagger/dockerctl/client/secret"
	"github.com/go-swagger/dockerctl/client/service"
	"github.com/go-swagger/dockerctl/client/session"
	"github.com/go-swagger/dockerctl/client/swarm"
	"github.com/go-swagger/dockerctl/client/system"
	"github.com/go-swagger/dockerctl/client/task"
	"github.com/go-swagger/dockerctl/client/volume"
)

// Default docker engine API HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/v1.41"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new docker engine API HTTP client.
func NewHTTPClient(formats strfmt.Registry) *DockerEngineAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new docker engine API HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *DockerEngineAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new docker engine API client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *DockerEngineAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(DockerEngineAPI)
	cli.Transport = transport
	cli.Config = config.New(transport, formats)
	cli.Container = container.New(transport, formats)
	cli.Distribution = distribution.New(transport, formats)
	cli.Exec = exec.New(transport, formats)
	cli.Image = image.New(transport, formats)
	cli.Network = network.New(transport, formats)
	cli.Node = node.New(transport, formats)
	cli.Plugin = plugin.New(transport, formats)
	cli.Secret = secret.New(transport, formats)
	cli.Service = service.New(transport, formats)
	cli.Session = session.New(transport, formats)
	cli.Swarm = swarm.New(transport, formats)
	cli.System = system.New(transport, formats)
	cli.Task = task.New(transport, formats)
	cli.Volume = volume.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// DockerEngineAPI is a client for docker engine API
type DockerEngineAPI struct {
	Config config.ClientService

	Container container.ClientService

	Distribution distribution.ClientService

	Exec exec.ClientService

	Image image.ClientService

	Network network.ClientService

	Node node.ClientService

	Plugin plugin.ClientService

	Secret secret.ClientService

	Service service.ClientService

	Session session.ClientService

	Swarm swarm.ClientService

	System system.ClientService

	Task task.ClientService

	Volume volume.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *DockerEngineAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Config.SetTransport(transport)
	c.Container.SetTransport(transport)
	c.Distribution.SetTransport(transport)
	c.Exec.SetTransport(transport)
	c.Image.SetTransport(transport)
	c.Network.SetTransport(transport)
	c.Node.SetTransport(transport)
	c.Plugin.SetTransport(transport)
	c.Secret.SetTransport(transport)
	c.Service.SetTransport(transport)
	c.Session.SetTransport(transport)
	c.Swarm.SetTransport(transport)
	c.System.SetTransport(transport)
	c.Task.SetTransport(transport)
	c.Volume.SetTransport(transport)
}
