// Code generated by go-swagger; DO NOT EDIT.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewNodeListParams creates a new NodeListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNodeListParams() *NodeListParams {
	return &NodeListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNodeListParamsWithTimeout creates a new NodeListParams object
// with the ability to set a timeout on a request.
func NewNodeListParamsWithTimeout(timeout time.Duration) *NodeListParams {
	return &NodeListParams{
		timeout: timeout,
	}
}

// NewNodeListParamsWithContext creates a new NodeListParams object
// with the ability to set a context for a request.
func NewNodeListParamsWithContext(ctx context.Context) *NodeListParams {
	return &NodeListParams{
		Context: ctx,
	}
}

// NewNodeListParamsWithHTTPClient creates a new NodeListParams object
// with the ability to set a custom HTTPClient for a request.
func NewNodeListParamsWithHTTPClient(client *http.Client) *NodeListParams {
	return &NodeListParams{
		HTTPClient: client,
	}
}

/* NodeListParams contains all the parameters to send to the API endpoint
   for the node list operation.

   Typically these are written to a http.Request.
*/
type NodeListParams struct {

	/* Filters.

	     Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).

	Available filters:
	- `id=<node id>`
	- `label=<engine label>`
	- `membership=`(`accepted`|`pending`)`
	- `name=<node name>`
	- `node.label=<node label>`
	- `role=`(`manager`|`worker`)`

	*/
	Filters *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the node list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeListParams) WithDefaults() *NodeListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the node list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the node list params
func (o *NodeListParams) WithTimeout(timeout time.Duration) *NodeListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the node list params
func (o *NodeListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the node list params
func (o *NodeListParams) WithContext(ctx context.Context) *NodeListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the node list params
func (o *NodeListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the node list params
func (o *NodeListParams) WithHTTPClient(client *http.Client) *NodeListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the node list params
func (o *NodeListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilters adds the filters to the node list params
func (o *NodeListParams) WithFilters(filters *string) *NodeListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the node list params
func (o *NodeListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WriteToRequest writes these params to a swagger request
func (o *NodeListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filters != nil {

		// query param filters
		var qrFilters string

		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {

			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
