// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new plugin API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plugin API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetPluginPrivileges(params *GetPluginPrivilegesParams, opts ...ClientOption) (*GetPluginPrivilegesOK, error)

	PluginCreate(params *PluginCreateParams, opts ...ClientOption) (*PluginCreateNoContent, error)

	PluginDelete(params *PluginDeleteParams, opts ...ClientOption) (*PluginDeleteOK, error)

	PluginDisable(params *PluginDisableParams, opts ...ClientOption) (*PluginDisableOK, error)

	PluginEnable(params *PluginEnableParams, opts ...ClientOption) (*PluginEnableOK, error)

	PluginInspect(params *PluginInspectParams, opts ...ClientOption) (*PluginInspectOK, error)

	PluginList(params *PluginListParams, opts ...ClientOption) (*PluginListOK, error)

	PluginPull(params *PluginPullParams, opts ...ClientOption) (*PluginPullNoContent, error)

	PluginPush(params *PluginPushParams, opts ...ClientOption) (*PluginPushOK, error)

	PluginSet(params *PluginSetParams, opts ...ClientOption) (*PluginSetNoContent, error)

	PluginUpgrade(params *PluginUpgradeParams, opts ...ClientOption) (*PluginUpgradeNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPluginPrivileges gets plugin privileges
*/
func (a *Client) GetPluginPrivileges(params *GetPluginPrivilegesParams, opts ...ClientOption) (*GetPluginPrivilegesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginPrivilegesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPluginPrivileges",
		Method:             "GET",
		PathPattern:        "/plugins/privileges",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginPrivilegesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginPrivilegesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPluginPrivileges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PluginCreate creates a plugin
*/
func (a *Client) PluginCreate(params *PluginCreateParams, opts ...ClientOption) (*PluginCreateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PluginCreate",
		Method:             "POST",
		PathPattern:        "/plugins/create",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginCreateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PluginCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PluginDelete removes a plugin
*/
func (a *Client) PluginDelete(params *PluginDeleteParams, opts ...ClientOption) (*PluginDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PluginDelete",
		Method:             "DELETE",
		PathPattern:        "/plugins/{name}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PluginDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PluginDisable disables a plugin
*/
func (a *Client) PluginDisable(params *PluginDisableParams, opts ...ClientOption) (*PluginDisableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginDisableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PluginDisable",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/disable",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginDisableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginDisableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PluginDisable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PluginEnable enables a plugin
*/
func (a *Client) PluginEnable(params *PluginEnableParams, opts ...ClientOption) (*PluginEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginEnableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PluginEnable",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/enable",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginEnableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginEnableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PluginEnable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PluginInspect inspects a plugin
*/
func (a *Client) PluginInspect(params *PluginInspectParams, opts ...ClientOption) (*PluginInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PluginInspect",
		Method:             "GET",
		PathPattern:        "/plugins/{name}/json",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PluginInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PluginList lists plugins

  Returns information about installed plugins.
*/
func (a *Client) PluginList(params *PluginListParams, opts ...ClientOption) (*PluginListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PluginList",
		Method:             "GET",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PluginList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PluginPull installs a plugin

  Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).

*/
func (a *Client) PluginPull(params *PluginPullParams, opts ...ClientOption) (*PluginPullNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginPullParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PluginPull",
		Method:             "POST",
		PathPattern:        "/plugins/pull",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginPullReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginPullNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PluginPull: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PluginPush pushes a plugin

  Push a plugin to the registry.

*/
func (a *Client) PluginPush(params *PluginPushParams, opts ...ClientOption) (*PluginPushOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginPushParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PluginPush",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/push",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginPushReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginPushOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PluginPush: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PluginSet configures a plugin
*/
func (a *Client) PluginSet(params *PluginSetParams, opts ...ClientOption) (*PluginSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PluginSet",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/set",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PluginSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PluginUpgrade upgrades a plugin
*/
func (a *Client) PluginUpgrade(params *PluginUpgradeParams, opts ...ClientOption) (*PluginUpgradeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginUpgradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PluginUpgrade",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/upgrade",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginUpgradeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PluginUpgrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
