// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ServiceCreate(params *ServiceCreateParams, opts ...ClientOption) (*ServiceCreateCreated, error)

	ServiceDelete(params *ServiceDeleteParams, opts ...ClientOption) (*ServiceDeleteOK, error)

	ServiceInspect(params *ServiceInspectParams, opts ...ClientOption) (*ServiceInspectOK, error)

	ServiceList(params *ServiceListParams, opts ...ClientOption) (*ServiceListOK, error)

	ServiceLogs(params *ServiceLogsParams, writer io.Writer, opts ...ClientOption) (*ServiceLogsOK, error)

	ServiceUpdate(params *ServiceUpdateParams, opts ...ClientOption) (*ServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ServiceCreate creates a service
*/
func (a *Client) ServiceCreate(params *ServiceCreateParams, opts ...ClientOption) (*ServiceCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceCreate",
		Method:             "POST",
		PathPattern:        "/services/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceDelete deletes a service
*/
func (a *Client) ServiceDelete(params *ServiceDeleteParams, opts ...ClientOption) (*ServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceDelete",
		Method:             "DELETE",
		PathPattern:        "/services/{id}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceInspect inspects a service
*/
func (a *Client) ServiceInspect(params *ServiceInspectParams, opts ...ClientOption) (*ServiceInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceInspectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceInspect",
		Method:             "GET",
		PathPattern:        "/services/{id}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceInspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceInspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceList lists services
*/
func (a *Client) ServiceList(params *ServiceListParams, opts ...ClientOption) (*ServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceList",
		Method:             "GET",
		PathPattern:        "/services",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceLogs gets service logs

  Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).

**Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers.

*/
func (a *Client) ServiceLogs(params *ServiceLogsParams, writer io.Writer, opts ...ClientOption) (*ServiceLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceLogs",
		Method:             "GET",
		PathPattern:        "/services/{id}/logs",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceLogsReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceUpdate updates a service
*/
func (a *Client) ServiceUpdate(params *ServiceUpdateParams, opts ...ClientOption) (*ServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ServiceUpdate",
		Method:             "POST",
		PathPattern:        "/services/{id}/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ServiceUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
