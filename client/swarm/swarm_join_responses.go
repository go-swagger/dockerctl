// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-swagger/dockerctl/models"
)

// SwarmJoinReader is a Reader for the SwarmJoin structure.
type SwarmJoinReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SwarmJoinReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSwarmJoinOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSwarmJoinBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSwarmJoinInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSwarmJoinServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSwarmJoinOK creates a SwarmJoinOK with default headers values
func NewSwarmJoinOK() *SwarmJoinOK {
	return &SwarmJoinOK{}
}

/* SwarmJoinOK describes a response with status code 200, with default header values.

no error
*/
type SwarmJoinOK struct {
}

func (o *SwarmJoinOK) Error() string {
	return fmt.Sprintf("[POST /swarm/join][%d] swarmJoinOK ", 200)
}

func (o *SwarmJoinOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSwarmJoinBadRequest creates a SwarmJoinBadRequest with default headers values
func NewSwarmJoinBadRequest() *SwarmJoinBadRequest {
	return &SwarmJoinBadRequest{}
}

/* SwarmJoinBadRequest describes a response with status code 400, with default header values.

bad parameter
*/
type SwarmJoinBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *SwarmJoinBadRequest) Error() string {
	return fmt.Sprintf("[POST /swarm/join][%d] swarmJoinBadRequest  %+v", 400, o.Payload)
}
func (o *SwarmJoinBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SwarmJoinBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmJoinInternalServerError creates a SwarmJoinInternalServerError with default headers values
func NewSwarmJoinInternalServerError() *SwarmJoinInternalServerError {
	return &SwarmJoinInternalServerError{}
}

/* SwarmJoinInternalServerError describes a response with status code 500, with default header values.

server error
*/
type SwarmJoinInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SwarmJoinInternalServerError) Error() string {
	return fmt.Sprintf("[POST /swarm/join][%d] swarmJoinInternalServerError  %+v", 500, o.Payload)
}
func (o *SwarmJoinInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SwarmJoinInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmJoinServiceUnavailable creates a SwarmJoinServiceUnavailable with default headers values
func NewSwarmJoinServiceUnavailable() *SwarmJoinServiceUnavailable {
	return &SwarmJoinServiceUnavailable{}
}

/* SwarmJoinServiceUnavailable describes a response with status code 503, with default header values.

node is already part of a swarm
*/
type SwarmJoinServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *SwarmJoinServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /swarm/join][%d] swarmJoinServiceUnavailable  %+v", 503, o.Payload)
}
func (o *SwarmJoinServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SwarmJoinServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SwarmJoinBody swarm join body
// Example: {"AdvertiseAddr":"192.168.1.1:2377","JoinToken":"SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2","ListenAddr":"0.0.0.0:2377","RemoteAddrs":["node1:2377"]}
swagger:model SwarmJoinBody
*/
type SwarmJoinBody struct {

	// Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible.
	AdvertiseAddr string `json:"AdvertiseAddr,omitempty"`

	// Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`,
	// or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`
	// is used.
	//
	// The `DataPathAddr` specifies the address that global scope network drivers will publish towards other
	// nodes in order to reach the containers running on this node. Using this parameter it is possible to
	// separate the container data traffic from the management traffic of the cluster.
	//
	DataPathAddr string `json:"DataPathAddr,omitempty"`

	// Secret token for joining this swarm.
	JoinToken string `json:"JoinToken,omitempty"`

	// Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP).
	ListenAddr string `json:"ListenAddr,omitempty"`

	// Addresses of manager nodes already participating in the swarm.
	RemoteAddrs []string `json:"RemoteAddrs"`
}

// Validate validates this swarm join body
func (o *SwarmJoinBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this swarm join body based on context it is used
func (o *SwarmJoinBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SwarmJoinBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SwarmJoinBody) UnmarshalBinary(b []byte) error {
	var res SwarmJoinBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
