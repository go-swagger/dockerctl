// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/go-openapi/dockerctl/models"
)

// SwarmUpdateReader is a Reader for the SwarmUpdate structure.
type SwarmUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SwarmUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSwarmUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSwarmUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSwarmUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSwarmUpdateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSwarmUpdateOK creates a SwarmUpdateOK with default headers values
func NewSwarmUpdateOK() *SwarmUpdateOK {
	return &SwarmUpdateOK{}
}

/* SwarmUpdateOK describes a response with status code 200, with default header values.

no error
*/
type SwarmUpdateOK struct {
}

func (o *SwarmUpdateOK) Error() string {
	return fmt.Sprintf("[POST /swarm/update][%d] swarmUpdateOK ", 200)
}

func (o *SwarmUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSwarmUpdateBadRequest creates a SwarmUpdateBadRequest with default headers values
func NewSwarmUpdateBadRequest() *SwarmUpdateBadRequest {
	return &SwarmUpdateBadRequest{}
}

/* SwarmUpdateBadRequest describes a response with status code 400, with default header values.

bad parameter
*/
type SwarmUpdateBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *SwarmUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /swarm/update][%d] swarmUpdateBadRequest  %+v", 400, o.Payload)
}
func (o *SwarmUpdateBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SwarmUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmUpdateInternalServerError creates a SwarmUpdateInternalServerError with default headers values
func NewSwarmUpdateInternalServerError() *SwarmUpdateInternalServerError {
	return &SwarmUpdateInternalServerError{}
}

/* SwarmUpdateInternalServerError describes a response with status code 500, with default header values.

server error
*/
type SwarmUpdateInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SwarmUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /swarm/update][%d] swarmUpdateInternalServerError  %+v", 500, o.Payload)
}
func (o *SwarmUpdateInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SwarmUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmUpdateServiceUnavailable creates a SwarmUpdateServiceUnavailable with default headers values
func NewSwarmUpdateServiceUnavailable() *SwarmUpdateServiceUnavailable {
	return &SwarmUpdateServiceUnavailable{}
}

/* SwarmUpdateServiceUnavailable describes a response with status code 503, with default header values.

node is not part of a swarm
*/
type SwarmUpdateServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *SwarmUpdateServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /swarm/update][%d] swarmUpdateServiceUnavailable  %+v", 503, o.Payload)
}
func (o *SwarmUpdateServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SwarmUpdateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
