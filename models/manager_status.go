// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ManagerStatus ManagerStatus represents the status of a manager.
//
// It provides the current status of a node's manager component, if the node
// is a manager.
//
//
// swagger:model ManagerStatus
type ManagerStatus struct {

	// The IP address and port at which the manager is reachable.
	//
	// Example: 10.0.0.46:2377
	Addr string `json:"Addr,omitempty"`

	// leader
	// Example: true
	Leader *bool `json:"Leader,omitempty"`

	// reachability
	Reachability Reachability `json:"Reachability,omitempty"`
}

// Validate validates this manager status
func (m *ManagerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReachability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagerStatus) validateReachability(formats strfmt.Registry) error {
	if swag.IsZero(m.Reachability) { // not required
		return nil
	}

	if err := m.Reachability.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Reachability")
		}
		return err
	}

	return nil
}

// ContextValidate validate this manager status based on the context it is used
func (m *ManagerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReachability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagerStatus) contextValidateReachability(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Reachability.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Reachability")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ManagerStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManagerStatus) UnmarshalBinary(b []byte) error {
	var res ManagerStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
