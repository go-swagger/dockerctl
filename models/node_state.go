// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NodeState NodeState represents the state of a node.
// Example: ready
//
// swagger:model NodeState
type NodeState string

func NewNodeState(value NodeState) *NodeState {
	v := value
	return &v
}

const (

	// NodeStateUnknown captures enum value "unknown"
	NodeStateUnknown NodeState = "unknown"

	// NodeStateDown captures enum value "down"
	NodeStateDown NodeState = "down"

	// NodeStateReady captures enum value "ready"
	NodeStateReady NodeState = "ready"

	// NodeStateDisconnected captures enum value "disconnected"
	NodeStateDisconnected NodeState = "disconnected"
)

// for schema
var nodeStateEnum []interface{}

func init() {
	var res []NodeState
	if err := json.Unmarshal([]byte(`["unknown","down","ready","disconnected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeStateEnum = append(nodeStateEnum, v)
	}
}

func (m NodeState) validateNodeStateEnum(path, location string, value NodeState) error {
	if err := validate.EnumCase(path, location, value, nodeStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this node state
func (m NodeState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNodeStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this node state based on context it is used
func (m NodeState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
