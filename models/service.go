// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Service service
// Example: {"CreatedAt":"2016-06-07T21:05:51.880065305Z","Endpoint":{"Ports":[{"Protocol":"tcp","PublishedPort":30001,"TargetPort":6379}],"Spec":{"Mode":"vip","Ports":[{"Protocol":"tcp","PublishedPort":30001,"TargetPort":6379}]},"VirtualIPs":[{"Addr":"10.255.0.2/16","NetworkID":"4qvuz4ko70xaltuqbt8956gd1"},{"Addr":"10.255.0.3/16","NetworkID":"4qvuz4ko70xaltuqbt8956gd1"}]},"ID":"9mnpnzenvg8p8tdbtq4wvbkcz","Spec":{"EndpointSpec":{"Mode":"vip","Ports":[{"Protocol":"tcp","PublishedPort":30001,"TargetPort":6379}]},"Mode":{"Replicated":{"Replicas":1}},"Name":"hopeful_cori","RollbackConfig":{"Delay":1000000000,"FailureAction":"pause","MaxFailureRatio":0.15,"Monitor":15000000000,"Parallelism":1},"TaskTemplate":{"ContainerSpec":{"Image":"redis"},"ForceUpdate":0,"Placement":{},"Resources":{"Limits":{},"Reservations":{}},"RestartPolicy":{"Condition":"any","MaxAttempts":0}},"UpdateConfig":{"Delay":1000000000,"FailureAction":"pause","MaxFailureRatio":0.15,"Monitor":15000000000,"Parallelism":1}},"UpdatedAt":"2016-06-07T21:07:29.962229872Z","Version":{"Index":19}}
//
// swagger:model Service
type Service struct {

	// created at
	CreatedAt string `json:"CreatedAt,omitempty"`

	// endpoint
	Endpoint *ServiceEndpoint `json:"Endpoint,omitempty"`

	// ID
	ID string `json:"ID,omitempty"`

	// service status
	ServiceStatus *ServiceServiceStatus `json:"ServiceStatus,omitempty"`

	// spec
	Spec *ServiceSpec `json:"Spec,omitempty"`

	// update status
	UpdateStatus *ServiceUpdateStatus `json:"UpdateStatus,omitempty"`

	// updated at
	UpdatedAt string `json:"UpdatedAt,omitempty"`

	// version
	Version *ObjectVersion `json:"Version,omitempty"`
}

// Validate validates this service
func (m *Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) validateEndpoint(formats strfmt.Registry) error {
	if swag.IsZero(m.Endpoint) { // not required
		return nil
	}

	if m.Endpoint != nil {
		if err := m.Endpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateServiceStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceStatus) { // not required
		return nil
	}

	if m.ServiceStatus != nil {
		if err := m.ServiceStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServiceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Spec")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateUpdateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateStatus) { // not required
		return nil
	}

	if m.UpdateStatus != nil {
		if err := m.UpdateStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service based on the context it is used
func (m *Service) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndpoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) contextValidateEndpoint(ctx context.Context, formats strfmt.Registry) error {

	if m.Endpoint != nil {
		if err := m.Endpoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Endpoint")
			}
			return err
		}
	}

	return nil
}

func (m *Service) contextValidateServiceStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceStatus != nil {
		if err := m.ServiceStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ServiceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Service) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {
		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Spec")
			}
			return err
		}
	}

	return nil
}

func (m *Service) contextValidateUpdateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdateStatus != nil {
		if err := m.UpdateStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateStatus")
			}
			return err
		}
	}

	return nil
}

func (m *Service) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.Version != nil {
		if err := m.Version.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Service) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Service) UnmarshalBinary(b []byte) error {
	var res Service
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceEndpoint service endpoint
//
// swagger:model ServiceEndpoint
type ServiceEndpoint struct {

	// ports
	Ports []*EndpointPortConfig `json:"Ports"`

	// spec
	Spec *EndpointSpec `json:"Spec,omitempty"`

	// virtual i ps
	VirtualIPs []*ServiceEndpointVirtualIPsItems0 `json:"VirtualIPs"`
}

// Validate validates this service endpoint
func (m *ServiceEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualIPs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceEndpoint) validatePorts(formats strfmt.Registry) error {
	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Endpoint" + "." + "Ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceEndpoint) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Endpoint" + "." + "Spec")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceEndpoint) validateVirtualIPs(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualIPs) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualIPs); i++ {
		if swag.IsZero(m.VirtualIPs[i]) { // not required
			continue
		}

		if m.VirtualIPs[i] != nil {
			if err := m.VirtualIPs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Endpoint" + "." + "VirtualIPs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service endpoint based on the context it is used
func (m *ServiceEndpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualIPs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceEndpoint) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ports); i++ {

		if m.Ports[i] != nil {
			if err := m.Ports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Endpoint" + "." + "Ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceEndpoint) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {
		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Endpoint" + "." + "Spec")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceEndpoint) contextValidateVirtualIPs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualIPs); i++ {

		if m.VirtualIPs[i] != nil {
			if err := m.VirtualIPs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Endpoint" + "." + "VirtualIPs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceEndpoint) UnmarshalBinary(b []byte) error {
	var res ServiceEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceEndpointVirtualIPsItems0 service endpoint virtual i ps items0
//
// swagger:model ServiceEndpointVirtualIPsItems0
type ServiceEndpointVirtualIPsItems0 struct {

	// addr
	Addr string `json:"Addr,omitempty"`

	// network ID
	NetworkID string `json:"NetworkID,omitempty"`
}

// Validate validates this service endpoint virtual i ps items0
func (m *ServiceEndpointVirtualIPsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service endpoint virtual i ps items0 based on context it is used
func (m *ServiceEndpointVirtualIPsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceEndpointVirtualIPsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceEndpointVirtualIPsItems0) UnmarshalBinary(b []byte) error {
	var res ServiceEndpointVirtualIPsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceServiceStatus The status of the service's tasks. Provided only when requested as
// part of a ServiceList operation.
//
//
// swagger:model ServiceServiceStatus
type ServiceServiceStatus struct {

	// The number of tasks for the service desired to be running.
	// For replicated services, this is the replica count from the
	// service spec. For global services, this is computed by taking
	// count of all tasks for the service with a Desired State other
	// than Shutdown.
	//
	// Example: 10
	DesiredTasks uint64 `json:"DesiredTasks,omitempty"`

	// The number of tasks for the service currently in the Running state
	// Example: 7
	RunningTasks uint64 `json:"RunningTasks,omitempty"`
}

// Validate validates this service service status
func (m *ServiceServiceStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service service status based on context it is used
func (m *ServiceServiceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceServiceStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceServiceStatus) UnmarshalBinary(b []byte) error {
	var res ServiceServiceStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceUpdateStatus The status of a service update.
//
// swagger:model ServiceUpdateStatus
type ServiceUpdateStatus struct {

	// completed at
	CompletedAt string `json:"CompletedAt,omitempty"`

	// message
	Message string `json:"Message,omitempty"`

	// started at
	StartedAt string `json:"StartedAt,omitempty"`

	// state
	// Enum: [updating paused completed]
	State string `json:"State,omitempty"`
}

// Validate validates this service update status
func (m *ServiceUpdateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceUpdateStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["updating","paused","completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceUpdateStatusTypeStatePropEnum = append(serviceUpdateStatusTypeStatePropEnum, v)
	}
}

const (

	// ServiceUpdateStatusStateUpdating captures enum value "updating"
	ServiceUpdateStatusStateUpdating string = "updating"

	// ServiceUpdateStatusStatePaused captures enum value "paused"
	ServiceUpdateStatusStatePaused string = "paused"

	// ServiceUpdateStatusStateCompleted captures enum value "completed"
	ServiceUpdateStatusStateCompleted string = "completed"
)

// prop value enum
func (m *ServiceUpdateStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceUpdateStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceUpdateStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("UpdateStatus"+"."+"State", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service update status based on context it is used
func (m *ServiceUpdateStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceUpdateStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceUpdateStatus) UnmarshalBinary(b []byte) error {
	var res ServiceUpdateStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
